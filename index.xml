<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>敬渊&#39;s Blog</title>
    <link>https://nesl42.github.io/</link>
    <description>敬渊&#39;s Blog</description>
    <generator>Hugo 0.145.0 &amp; FixIt v0.3.17-8212d6fd</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 20 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nesl42.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>久别博客再启新程</title>
      <link>https://nesl42.github.io/posts/firstpost/</link>
      <pubDate>Sun, 16 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://nesl42.github.io/posts/firstpost/</guid>
      <category domain="https://nesl42.github.io/categories/%E4%BA%BA%E9%97%B4%E4%B8%96/">人间世</category>
      <description>&lt;p&gt;种种，欢迎邮件交流：&lt;strong&gt;&lt;a href=&#34;mailto:jingyuan_101@foxmail.com&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;jingyuan_101@foxmail.com&lt;/a&gt;&lt;/strong&gt;， 期待你的来信。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>“天才法案”与新东印度公司：美元稳定币将如何挑战现有法币体系及国家形态</title>
      <link>https://nesl42.github.io/posts/202507-forward_post/</link>
      <pubDate>Sun, 20 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://nesl42.github.io/posts/202507-forward_post/</guid>
      <category domain="https://nesl42.github.io/categories/technology/">Technology</category>
      <description>&lt;p&gt;“天才法案”与新东印度公司：美元稳定币将如何挑战现有法币体系及国家形态&lt;/p&gt;&#xA;&lt;p&gt;这是一种极其高明的非对称战略。美国正在利用其对手最薄弱的一环：对失控的恐惧，来构建自己的护城河 &amp;ndash; 作者&lt;/p&gt;&#xA;&lt;h2 id=&#34;一历史的幽灵东印度公司的数字回归&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;一、历史的幽灵：东印度公司的数字回归&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%b8%80%e5%8e%86%e5%8f%b2%e7%9a%84%e5%b9%bd%e7%81%b5%e4%b8%9c%e5%8d%b0%e5%ba%a6%e5%85%ac%e5%8f%b8%e7%9a%84%e6%95%b0%e5%ad%97%e5%9b%9e%e5%bd%92&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;历史从不简单地重复，但它会押韵。当川普愉快的在“天才法案”（GENIUS Act）的文件上，签下自己的名字的时候，我脑中涌现的，是历史的记忆——那是在十七、十八世纪，被国家授予了主权权力的商业巨兽，荷兰与英国的东印度公司。&lt;/p&gt;&#xA;&lt;p&gt;这部法案看似只是金融监管的技术性调整，但其深层意涵，却是在为21世纪的“新东印度公司”颁发特许状，一场重塑全球权力格局的变革已然拉开序幕。&lt;/p&gt;&#xA;&lt;p&gt;1a. 新权力的特许状&lt;/p&gt;&#xA;&lt;p&gt;回溯四百年前，荷兰东印度公司（VOC）和英国东印度公司（EIC）并非寻常的贸易商行。它们是凭借国家授权，集商人、士兵、外交官和殖民者于一身的混合体。荷兰政府授予VOC的权力包括：自行招募军队、发行货币、与其他国家君主签订条约，甚至发动战争。同样，英女王伊丽莎白一世授予EIC的皇家特许状，也使其拥有了在印度进行贸易垄断、建立军事和行政职能的权力。这些公司是历史上最早的跨国公司，它们控制的不是简单的商品，而是定义了那个时代全球化的命脉——海洋贸易航线。&lt;/p&gt;&#xA;&lt;p&gt;今天，&amp;ldquo;天才法案&amp;quot;所做的，正是以立法形式，为新时代的权力巨头——稳定币发行商——授予合法性。表面上，法案旨在通过设定储备金标准、要求资产认证等方式来规范市场，防范风险。但其真正的效果，是通过筛选和认证，创造出一个受美国政府认可的&amp;quot;合法&amp;quot;稳定币发行商寡头集团。这些被&amp;quot;加冕&amp;quot;的公司，如Circle（USDC发行商）、未来的Tether（如果其选择合规），以及像apple、google、meta、x等多家坐拥数十亿用户的互联网巨头，他们将不再是野蛮生长的加密叛军，而是被正式纳入美国金融战略版图的&amp;quot;特许公司&amp;rdquo;。它们控制的，将是新时代的全球贸易航线——24/7不间断运行的、无国界的数字金融轨道。&lt;/p&gt;&#xA;&lt;p&gt;1b. 从贸易航路到金融轨道&lt;/p&gt;&#xA;&lt;p&gt;东印度公司的权力根植于对物理贸易路线的垄断。它们用炮舰和要塞确保了香料、茶叶和鸦片贸易的独占权，并从中攫取了巨额利润。新时代的&amp;quot;数字东印度公司&amp;quot;则将通过控制全球价值流动的金融轨道来行使权力。当一个由美国财政部或特定机构监管的美元稳定币，成为全球跨境支付、DeFi（去中心化金融）借贷、RWA（真实世界资产）交易的默认结算单位时，其发行商就掌握了定义新金融体系规则的权力。它们可以决定谁能接入这个系统，可以根据指令冻结任何地址的资产，可以设定交易的合规标准。这是一种比控制物理航线更深层、更无形的权力。&lt;/p&gt;&#xA;&lt;p&gt;1c. 与国家之间模糊的共生与对抗&lt;/p&gt;&#xA;&lt;p&gt;东印度公司的历史，是一部与母国之间关系不断演变的史诗。起初，它们是国家推行重商主义、与竞争对手（如葡萄牙）进行战略博弈的代理人。然而，公司的逐利本性使其迅速膨胀为一个独立的权力中心。为了利润，EIC不惜发动战争（如普拉西战役）、从事不道德贸易（如鸦片贸易），屡屡将英国政府拖入其不愿参与的外交与军事泥潭。最终，当公司因管理不善和过度扩张而濒临破产时，又不得不向国家求援，导致政府通过一系列法案（如1773年的《茶叶法案》和1784年的《皮特法案》）逐步加强监管，最终在1858年印度民族大起义后，彻底剥夺了其行政权力，将其领土收归王室直接统治。&lt;/p&gt;&#xA;&lt;p&gt;这段历史为我们预演了未来稳定币发行商与美国政府之间可能的动态关系。目前，这些公司被视为推行美元霸权、对抗中国数字人民币的战略资产。然而，一旦它们成长为&amp;quot;大到不能倒&amp;quot;的全球金融基础设施，其自身的机构利益和股东诉求将变得至关重要。它们可能会为了商业利益，做出与美国外交政策相悖的决定。&lt;/p&gt;&#xA;&lt;p&gt;这预示着，当私人机构发行的美元稳定币体系过于庞大时，将不可避免地和国家主权发生冲突，届时，我们很可能会看到基于利益博弈的稳定币法案的再升级。&lt;/p&gt;&#xA;&lt;p&gt;以下表格清晰地对比了这两种跨越时空的权力实体，揭示了历史惊人的相似性：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-forward_post/1.png&#39; alt=&#34;图像&#34; height=&#34;207&#34; width=&#34;658&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;历史的幽灵已经归来。通过&amp;quot;天才法案&amp;quot;，美国正在释放一种新的东印度公司。它披着科技创新的外衣，手持区块链的权杖，但其内核，却是古老的商业帝国逻辑——一个由国家特许、最终将与国家争夺权力的全球性私人企业主权。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二全球货币海啸美元化大通缩与非美元央行的终结&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;二、全球货币海啸：美元化、大通缩与非美元央行的终结&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%ba%8c%e5%85%a8%e7%90%83%e8%b4%a7%e5%b8%81%e6%b5%b7%e5%95%b8%e7%be%8e%e5%85%83%e5%8c%96%e5%a4%a7%e9%80%9a%e7%bc%a9%e4%b8%8e%e9%9d%9e%e7%be%8e%e5%85%83%e5%a4%ae%e8%a1%8c%e7%9a%84%e7%bb%88%e7%bb%93&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;&amp;ldquo;天才法案&amp;quot;所催生的，不仅是一个新的权力实体，更是一场将席卷全球的货币海啸。这场海啸的能量，源于1971年布雷顿森林体系的崩溃。正是那次历史性的&amp;quot;解放&amp;rdquo;，为今天美元稳定币的全球征服铺平了道路。对于那些主权信用本就脆弱的国家而言，未来将不再是由政府选择本国货币还是传统美元，而是由民众选择在崩溃的本币和触手可及、毫无摩擦的数字美元之间做出抉择。这将引发一波前所未有的超级美元化浪潮，彻底终结许多国家的货币主权，并给它们带来毁灭性的通缩冲击。&lt;/p&gt;&#xA;&lt;p&gt;2a. 布雷顿森林体系的幽灵&lt;/p&gt;&#xA;&lt;p&gt;要理解稳定币的威力，必须回到布雷顿森林体系解体的那个时刻。该体系将美元与黄金挂钩，其他货币与美元挂钩，形成了一个以黄金为最终锚的稳定结构。然而，这一体系内含一个致命的矛盾，即&amp;quot;特里芬难题&amp;quot;：作为全球储备货币，美元必须通过美国的贸易逆差持续流向世界，以满足全球贸易发展的需求；但持续的逆差又会动摇人们对美元兑换黄金能力的信心，最终导致体系崩溃。1971年，尼克松总统关闭黄金兑换窗口，宣告了该体系的死亡。&lt;/p&gt;&#xA;&lt;p&gt;然而，美元的死亡却是它新生的开始。在随后的&amp;quot;牙买加体系&amp;quot;下，美元与黄金彻底脱钩，成为一种纯粹的信用货币。它被从&amp;quot;黄金的枷锁&amp;quot;中解放出来，美联储可以更自由地发行货币，以满足美国国内的财政需求（如越南战争的开支）和全球对美元流动性的需求。这奠定了过去半个世纪美元霸权的基础——一个依赖于全球网络效应和美国综合国力的、无锚的霸权。稳定币，尤其是受美国法律认可的稳定币，正是这个后布雷顿森林体系的终极技术形态。它将美元的流动性供给能力提升到了一个全新的维度，使其能够绕过层层监管的各国政府，绕过传统的、缓慢且昂贵的银行体系，直接渗透到全球经济的每一个毛细血管，每一个个人的手（机）里。&lt;/p&gt;&#xA;&lt;p&gt;2b. 超级美元化（Hyper-dollarization）的降临&lt;/p&gt;&#xA;&lt;p&gt;在阿根廷、土耳其等长期遭受高通胀和政治动荡困扰的国家，民众为了保全财富，自发地将本币兑换成美元，这便是&amp;quot;美元化&amp;quot;现象。然而，传统美元化存在诸多障碍：你需要银行账户，需要面对资本管制，需要承担持有实体货币的风险。稳定币彻底拆除了这些藩篱。任何拥有智能手机的人，都可以在几秒钟内，以极低的成本，将即将贬值的本币换成锚定美元的稳定币。&lt;/p&gt;&#xA;&lt;p&gt;在越南，中东，香港，日本，韩国，一家家的u店正在快速的取代传统的找换店，迪拜售楼处开始接受比特币付款，义乌小店开始能用u来买烟。&lt;/p&gt;&#xA;&lt;p&gt;这些无孔不入支付渗透，将把美元稳定币化从一个渐进的过程，变成一场瞬时完成的海啸。当一个国家的通胀预期稍有抬头，资本将不再是&amp;quot;外流&amp;quot;，而是&amp;quot;蒸发&amp;quot;——瞬间从本币体系中消失，进入全球加密网络。我们可将这种属性定义为&amp;quot;对主权货币的替代性增强&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;对于那些信用本已摇摇欲坠的政府，这将是致命一击。本币的地位将被彻底动摇，因为民众和企业拥有了一个更完美、高效的替代品。&lt;/p&gt;&#xA;&lt;p&gt;2c. 大通缩与国家权力的蒸发&lt;/p&gt;&#xA;&lt;p&gt;当一个经济体被超级美元化浪潮席卷后，其主权国家将失去两项最核心的权力：一是通过印钞来弥补财政赤字的权力（即货币铸币税）；二是通过利率和货币供应量来调控经济的权力（即货币政策独立性）。&lt;/p&gt;&#xA;&lt;p&gt;其后果是灾难性的。&lt;/p&gt;&#xA;&lt;p&gt;首先，随着本币被大规模抛弃，其汇率将螺旋式下跌，陷入恶性通胀。然而，在以美元计价的经济活动层面，却会出现剧烈的大通缩。资产价格、工资和商品价值若以美元衡量，将一落千丈。&lt;/p&gt;&#xA;&lt;p&gt;其次，政府的税基将随之蒸发。以迅速贬值的本币计价的税收，将变得毫无价值，国家财政将陷入崩溃。这种财政的死亡螺旋，将彻底摧毁国家的治理能力。&lt;/p&gt;&#xA;&lt;p&gt;这一过程，从川普签署天才法案为起点，将通过RWA（真实世界资产上链）加速。&lt;/p&gt;&#xA;&lt;p&gt;2d. 白宫 vs. 美联储：美国内部的权力博弈&lt;/p&gt;&#xA;&lt;p&gt;这场货币革命并不只是打击美国的对手，它甚至将在美国内部引发危机。&lt;/p&gt;&#xA;&lt;p&gt;目前，美联储作为独立的中央银行，掌握着美国的货币政策。然而，一个由财政部或白宫下设新机构监管的、私人发行的数字美元体系，将创造出一个平行的货币轨道。行政部门可以通过影响对稳定币发行商的监管规则，来间接甚至直接地干预货币供应和流向，从而绕开美联储。这可能成为美国行政分支为实现其政治或战略目标（例如，在选举年刺激经济，或精准制裁对手）而打造的强大工具，从而在将来引发美元一场关于货币政策独立性的深刻的信任危机。&lt;/p&gt;&#xA;&lt;h2 id=&#34;三21世纪的金融战场美国对抗中国的自由金融体系&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;三、21世纪的金融战场：美国对抗中国的“自由金融体系”&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%b8%8921%e4%b8%96%e7%ba%aa%e7%9a%84%e9%87%91%e8%9e%8d%e6%88%98%e5%9c%ba%e7%be%8e%e5%9b%bd%e5%af%b9%e6%8a%97%e4%b8%ad%e5%9b%bd%e7%9a%84%e8%87%aa%e7%94%b1%e9%87%91%e8%9e%8d%e4%bd%93%e7%b3%bb&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;如果说稳定币法案对内是一场权力重构，那么对外，它就是美国在与中国的大国博弈棋局上，落下的一枚至关重要的棋子：通过立法扶持一个私有的、基于公共区块链的、以美元为核心的&amp;quot;自由金融体系&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;3a. 新时代的金融铁幕&lt;/p&gt;&#xA;&lt;p&gt;二战后，美国主导建立了布雷顿森林体系，其目的不仅是重建战后经济秩序，更是在冷战背景下，构建一个将苏联及其盟友排除在外的西方经济集团。国际货币基金组织（IMF）和世界银行等机构，成为了推行西方价值观和巩固同盟体系的工具。如今，&amp;ldquo;天才法案&amp;quot;所要构建的，正是数字时代的新版&amp;quot;布雷顿森林体系&amp;rdquo;。它旨在建立一个以美元稳定币为基础的全球金融网络，这个网络开放、高效，且在意识形态上与中国国家主导的模式截然对立。这有点像美国当年为对抗苏联的自由贸易体系的安排，但出手更狠。&lt;/p&gt;&#xA;&lt;p&gt;3b. 开放围剿封闭：许可制 vs. 无需许可&lt;/p&gt;&#xA;&lt;p&gt;中美在数字货币上的战略路径，呈现出根本性的差异，这是一场&amp;quot;开放&amp;quot;对&amp;quot;封闭&amp;quot;的意识形态战争。&lt;/p&gt;&#xA;&lt;p&gt;中国的数字人民币（e-CNY）是一个典型的&amp;quot;许可制&amp;quot;（Permissioned）系统。它运行在由央行控制的私有账本上，每一笔交易、每一个账户都在国家的严密监控之下。这是一个数字化的&amp;quot;围墙花园&amp;quot;，其优势在于高效的中心化管理和强大的社会治理能力，但其封闭性也使其难以获得全球用户的真正信任，尤其是那些对其监控能力抱有警惕的个人和机构。&lt;/p&gt;&#xA;&lt;p&gt;相比之下，美国通过&amp;quot;天才法案&amp;quot;所支持的稳定币，则建立在以太坊、Solana等&amp;quot;无需许可&amp;quot;（Permissionless）的公共区块链之上。这意味着，任何人，无论身在何处，都可以在这个网络上进行创新——开发新的金融应用（DeFi）、创建新的市场、进行交易——而无需得到任何中心化机构的批准。美国政府的角色，不是成为这个网络的运营者，而是成为这个网络中最核心资产（美元）的&amp;quot;信用担保人&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;这是一种极其高明的非对称战略。美国正在利用其对手最薄弱的一环——对失控的恐惧——来构建自己的护城河。它将全球的创新者、开发者和寻求金融自由的普通用户，都吸引到以美元为中心的开放生态中。中国被邀请来参加一场它在结构上就无法获胜的游戏：一个由国家控制的局域网，如何与一个向全球开放的、充满活力的金融互联网竞争？&lt;/p&gt;&#xA;&lt;p&gt;3c. 绕开SWIFT：釜底抽薪的降维打击&lt;/p&gt;&#xA;&lt;p&gt;近年来，中俄等国应对美元霸权的一个核心策略，是建立绕开美国控制的金融基础设施，例如替代SWIFT（环球银行金融电信协会）的跨境支付系统。然而，稳定币的出现，让这一策略显得笨拙而过时。基于公共区块链的稳定币交易，从根本上就不需要经过SWIFT或任何传统银行的中介。价值的转移，通过全球分布的节点网络以密码学方式完成，这是一个全新的、与旧体系平行的轨道。&lt;/p&gt;&#xA;&lt;p&gt;这意味着，美国不再需要费力地保卫旧的金融城堡（SWIFT），而是直接开辟了一个全新的战场。在这个新战场上，规则由代码和协议定义，而非国家间的条约。当全球大部分的数字价值开始在这条新轨道上运行时，试图建立一个&amp;quot;SWIFT替代品&amp;quot;就如同在高速公路时代，努力去修建一条更豪华的马车道一样，失去了意义。&lt;/p&gt;&#xA;&lt;p&gt;3d. 赢得网络效应之战&lt;/p&gt;&#xA;&lt;p&gt;数字时代的核心战争，是网络效应的战争。平台一旦吸引了足够多的用户和开发者，就会形成强大的引力，使其竞争对手难以追赶。通过&amp;quot;天才法案&amp;quot;，美国正在将美元——这个全球最强健的货币网络——与加密世界——这个全球最具创新活力的金融网络——进行融合。其产生的网络效应将是指数级的。&lt;/p&gt;&#xA;&lt;p&gt;全球的开发者会优先选择为拥有最大流动性和最广泛用户基础的美元稳定币开发应用。全球的用户会因为丰富的应用场景和资产选择，而涌入这个生态。相比之下，e-CNY可能在&amp;quot;一带一路&amp;quot;等特定范围内推广，但它封闭的、以人民币为中心的特性，使其难以在全球范围内与这个开放的美元生态系统相抗衡。&lt;/p&gt;&#xA;&lt;p&gt;综上所述，&amp;ldquo;天才法案&amp;quot;远非一部简单的国内法案。它是美国在21世纪地缘政治棋局中的核心战略部署。它以一种&amp;quot;四两拨千斤&amp;quot;的方式，利用&amp;quot;去中心化&amp;quot;和&amp;quot;开放&amp;quot;的理念，来巩固其最核心的权力——美元霸权。它不是在与中国进行一场对称的军备竞赛，而是通过改变金融战场的地形，将竞争带入一个美国拥有绝对优势的新维度，对对手的金融体系进行降维打击。&lt;/p&gt;&#xA;&lt;h2 id=&#34;四万物的非国家化rwa与defi如何瓦解国家控制&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;四、万物的&amp;quot;非国家化&amp;rdquo;：RWA与DeFi如何瓦解国家控制&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%9b%9b%e4%b8%87%e7%89%a9%e7%9a%84%e9%9d%9e%e5%9b%bd%e5%ae%b6%e5%8c%96rwa%e4%b8%8edefi%e5%a6%82%e4%bd%95%e7%93%a6%e8%a7%a3%e5%9b%bd%e5%ae%b6%e6%8e%a7%e5%88%b6&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;稳定币本身并非革命的终点，它更像是一匹攻入城的特洛伊城木马。一旦全球用户习惯了通过它来持有和转移价值，一场更宏大、更深刻的革命便会随之而来。这场革命的核心，是将一切有价值的资产——股票、债券、房产、艺术品——都转化为可以在全球公共账本上自由流动的数字代币。这个过程，即&amp;quot;真实世界资产上链&amp;quot;（RWA），将从根本上切断资产与特定国家司法管辖权的联系，实现资产的&amp;quot;非国家化&amp;quot;，并最终颠覆以银行为核心的传统金融体系。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-forward_post/2.jpeg&#39; alt=&#34;图像&#34; height=&#34;673&#34; width=&#34;680&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;4a. 稳定币：通往新世界的&amp;quot;特洛伊木马&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;在古老的传说中，希腊人通过献上一具巨大的木马，最终攻陷了坚固的特洛伊城。今天，稳定币正扮演着类似的角色。在各国政府和监管机构眼中，受监管的、有资产抵押的稳定币似乎是驯服加密世界这匹野马的&amp;quot;木马&amp;quot;——一个相对安全、可控的入口。&lt;/p&gt;&#xA;&lt;p&gt;然而，历史的吊诡之处在于，GENIUS法案在致力于通过推广&amp;quot;安全&amp;quot;的稳定币来巩固国家权力的同时，无意中为&amp;quot;危险&amp;quot;的、真正去中心化的非国家货币，构建了有史以来最庞大的用户获取渠道。&lt;/p&gt;&#xA;&lt;p&gt;稳定币的核心功能，是作为连接传统法定货币世界与加密资产世界的门户。它们是加密世界的&amp;quot;入口匝道&amp;quot;（on-ramp），是跨越两个世界的&amp;quot;桥梁&amp;quot;。一个普通用户最初可能只是为了享受稳定币在跨境汇款或日常支付中带来的低成本和高效率，或商家给予的补贴。但一旦他们下载了数字钱包，习惯了链上交易的模式，他们与比特币、以太坊等真正去中心化资产之间的距离，就只剩下一次点击。&lt;/p&gt;&#xA;&lt;p&gt;那些提供稳定币交易服务的平台，如Coinbase或Kraken，本身就是一个包罗万象的加密资产超市。用户为了稳定币而来，但很快就会被DeFi协议提供的高额收益、或是比特币作为价值存储的叙事所吸引。从持有USDC到质押ETH参与流动性挖矿，这个过程对于一个已经入门的用户来说，是自然而然的延伸。&lt;/p&gt;&#xA;&lt;p&gt;这就为国家制造了一个深刻的悖论。国家的短期目标是通过推广与美元挂钩的稳定币来强化美元霸权。为了实现这一目标，国家必须鼓励和支持用户友好的钱包、交易所和各类应用的开发与普及。然而，这些基础设施在技术上是中立的、协议无关的。同一个钱包，既可以存放受监管的USDC，也可以存放匿名的门罗币；同一个交易所，既可以交易合规的稳定币，也可以交易完全去中心化的比特币。&lt;/p&gt;&#xA;&lt;p&gt;随着用户对加密世界的理解加深，他们对更高收益、更强隐私保护、或真正抗审查性的需求也会随之增长。届时，他们自然会从仅提供价值稳定但无增值潜力的稳定币，转向那些能够满足这些更高层次需求的资产。&lt;/p&gt;&#xA;&lt;p&gt;4b. RWA革命：资产挣脱国界的枷锁&lt;/p&gt;&#xA;&lt;p&gt;如果说DeFi是这场革命的上层建筑，那么RWA就是其坚实的经济基础。RWA的核心，是将存在于物理世界或传统金融系统中的资产，通过法律和技术流程，转化为区块链上的代币。&lt;/p&gt;&#xA;&lt;p&gt;我们可以设想这样一个场景：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一个由中国团队开发的苹果应用商店里拥有数百万全球用户的app，其所有权通过法律和技术手段被代币化，成为在区块链上流通的数字凭证。&lt;/li&gt;&#xA;&lt;li&gt;该代币在一个链上的、无需许可的去中心化金融（DeFi）协议中进行交易。&lt;/li&gt;&#xA;&lt;li&gt;阿根廷一位用户在发起交易后，几秒钟内就在自己的数字钱包中收到了这个代币。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;整个过程——资产的代币化、抵押、稳定币的铸造与转移——完全在链上完成，绕开了中国、美国（因其美元锚定）和阿根廷三国的传统银行系统。这不仅仅是一条更优越的支付轨道，它是一个平行的、几乎无视威斯特伐利亚体系所划定的政治与法律边界的金融平行宇宙。&lt;/p&gt;&#xA;&lt;p&gt;这正是&amp;quot;货币的非国家化&amp;quot;推动&amp;quot;金融的非国家化&amp;quot;，并最终实现&amp;quot;资本的非国家化&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;在资本可以非国家化的情况下，资本家，自然也将非国家化。&lt;/p&gt;&#xA;&lt;p&gt;4c. 传统金融体系的末日&lt;/p&gt;&#xA;&lt;p&gt;这个由稳定币驱动、以RWA为基础的新金融生态，是对传统金融体系的一次全面冲击。传统金融的核心功能，本质上是作为信息和信任的中介。银行、券商、交易所、支付公司等机构，通过其庞大的资本、复杂的系统和政府的牌照，来解决交易双方的信任问题，并从中收取高昂的费用。&lt;/p&gt;&#xA;&lt;p&gt;而区块链技术，通过其不可篡改、公开透明的特性，以及由代码（智能合约）强制执行的规则，提供了一种全新的信任机制——&amp;ldquo;代码即法律&amp;rdquo;。在这个新范式下，传统中介的大部分功能都显得多余和低效：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;银行的存贷业务，可以被去中心化的借贷协议所取代。&lt;/li&gt;&#xA;&lt;li&gt;交易所的撮合交易，可以被自动做市商（AMM）算法所取代。&lt;/li&gt;&#xA;&lt;li&gt;支付公司的跨境结算，可以被稳定币的秒级全球转账所取代。&lt;/li&gt;&#xA;&lt;li&gt;华尔街的资产证券化，可以被更透明、更高效的RWA代币化所取代。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;五主权个体的崛起与国家的黄昏&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;五、主权个体的崛起与国家的黄昏&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%ba%94%e4%b8%bb%e6%9d%83%e4%b8%aa%e4%bd%93%e7%9a%84%e5%b4%9b%e8%b5%b7%e4%b8%8e%e5%9b%bd%e5%ae%b6%e7%9a%84%e9%bb%84%e6%98%8f&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;当资本可以无国界流动，当资产可以脱离司法管辖，当权力从民族国家向私人巨头和网络社群转移，我们便抵达了这场变革的终点——一个由&amp;quot;主权个人&amp;quot;（The Sovereign Individual）主导，以威斯特伐利亚体系（Westphalian system）终结为标志的新时代。这场由稳定币和人工智能（AI）共同驱动的革命，其深远影响将超越法国大革命，因为它并不仅仅带来政权的更迭，它改变的，更是权力的存在形式。&lt;/p&gt;&#xA;&lt;p&gt;（主权个人一书，的确是我们这个时代的预言）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-forward_post/3.png&#39; alt=&#34;图像&#34; height=&#34;475&#34; width=&#34;310&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;5a. 《主权个人》的预言成真&lt;/p&gt;&#xA;&lt;p&gt;1997年，詹姆斯·戴尔·戴维森（James Dale Davidson）和里斯-莫格勋爵（Lord William Rees-Mogg）在其惊世骇俗的著作《主权个人》中预言，信息时代的到来将从根本上改变暴力和权力的逻辑。他们认为，民族国家之所以能在工业时代崛起，是因为它能有效地保护大规模、固定化的工业资产，并从中征税。但在信息时代，最重要的资本——知识、技能和金融资产——将变得高度流动，甚至存在于无形的网络空间中。届时，国家将像一个试图用栅栏圈住“长了翅膀的牛”的牧场主，其征税和控制能力将大打折扣。&lt;/p&gt;&#xA;&lt;p&gt;稳定币、DeFi和RWA的出现，正是这本书中“网络货币”（cybermoney）和“网络经济”（cybereconomy）的现实版本。它们共同构建了一个全球性的、低摩擦的价值网络，让资本真正长上了翅膀。一个精英个体可以轻松地将自己的财富配置于全球各地的RWA代币，并通过稳定币在不同司法管辖区之间瞬时转移，而这一切都记录在一个国家机器难以触及的公共账本上。书中预言的“个人将摆脱政府的压迫”和“财富持有者将能够绕开国家对货币的垄断”正在成为现实。&lt;/p&gt;&#xA;&lt;p&gt;5b. 威斯特伐利亚体系的终结&lt;/p&gt;&#xA;&lt;p&gt;自1648年《威斯特伐利亚和约》签订以来，世界政治的基本单位就是主权国家。这个体系的核心原则包括：国家在其领土内拥有至高无上的主权、各国主权平等、以及互不干涉内政原则。这个体系的基石，是国家对领土内的人口和财产的绝对控制权。&lt;/p&gt;&#xA;&lt;p&gt;主权个人的崛起，正在从根本上侵蚀这一基石。当最富创造力和生产力的个体，其经济活动和财富积累都发生在“域外”（cyberspace）时，领土的边界就失去了意义。国家发现自己无法有效向这些全球流动的精英征税，其财政基础将不可避免地被削弱。为了阻止财富外流，绝望的政府可能会采取更激进、更专制的手段，例如书中预言的“人质劫持式”的税收和对促成个人自主的技术进行破坏。但这只会加速精英的出走，形成恶性循环。最终，民族国家可能会蜕变为一个空壳，其功能仅限于为那些无法进入全球数字经济的、不那么具有流动性的民众提供福利和保障——一个为穷人服务的“保姆国家“。但显然，这样的国家，与财富创造无关&lt;/p&gt;&#xA;&lt;p&gt;5c. 最后的边疆：隐私与国家税收的终局之战&lt;/p&gt;&#xA;&lt;p&gt;这场革命的下一步，将是隐私。目前的公共区块链虽然是匿名的（pseudonymous），但交易仍可被追踪。然而，随着零知识证明等隐私技术的成熟（如Zcash和Monero所采用的技术），未来的金融交易将可能实现完全的匿名和不可追踪。&lt;/p&gt;&#xA;&lt;p&gt;当全球化的、基于稳定币的金融系统与强大的隐私技术相结合时，就构成了对国家税收能力的最终挑战。税务机关将面临一个无法穿透的“黑箱”，无法有效识别交易方和应税所得。这将是“去监管”的最终形态，因为当国家失去征税能力时，它也就失去了进行有效监管和提供公共服务的能力。&lt;/p&gt;&#xA;&lt;p&gt;法国大革命，是用“民族主权”替代了“君主主权”，权力的主体从国王换成了民族国家，但权力的地域性本质并未改变。而稳定币开启的这场革命，则是用“网络主权”和“个体主权”，去消解“民族国家的领土主权”。它不是权力的转移，而是权力的“去中心化”和“非国家化”。这是一个更根本、更彻底的范式转移，其影响之深远，确实不亚于，甚至可能超过法国大革命。我们正站在一个旧世界解体、新秩序浮现的黎明。这个新世界将赋予个体前所未有的自由和力量，但也将带来我们今天难以想象的混乱与挑战。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>十大英雄联盟悲情语录</title>
      <link>https://nesl42.github.io/posts/202507-lol/</link>
      <pubDate>Sun, 20 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://nesl42.github.io/posts/202507-lol/</guid>
      <category domain="https://nesl42.github.io/categories/%E4%BA%BA%E9%97%B4%E4%B8%96/">人间世</category>
      <description>&lt;p&gt;刚看了一个视频，突然想到有句话这个视频里面有，于是把这个视频的字幕提取出来了。&lt;/p&gt;&#xA;&lt;p&gt;下面的视频制作时间：2019-04-21&lt;/p&gt;&#xA;&lt;p&gt;在刚刚结束的比赛中，IG举报京东获得了历史上第一个联赛冠军捍卫了如今LPL第一排名的地位。电子竞技只有一个胜者却有无数败者。LPL固然精彩，但那些浴火而生的新军、战斗不息的老兵同样有动人的故事。苦追而不得，意满却难平。&lt;/p&gt;&#xA;&lt;p&gt;今天我们就来盘点那些选手们的意难平语录&lt;/p&gt;&#xA;&lt;h2 id=&#34;第十名-做了个梦我们拿了冠军这一定是梦吧rookie&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第十名 “做了个梦，我们拿了冠军，这一定是梦吧。”&amp;ndash;Rookie&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e5%8d%81%e5%90%8d-%e5%81%9a%e4%ba%86%e4%b8%aa%e6%a2%a6%e6%88%91%e4%bb%ac%e6%8b%bf%e4%ba%86%e5%86%a0%e5%86%9b%e8%bf%99%e4%b8%80%e5%ae%9a%e6%98%af%e6%a2%a6%e5%90%a7rookie&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;在这期盘点的10人中，rookie是唯一一个在上赛季捧杯的选手，因此我们将它排在第十名。&lt;code&gt;但在他站上最高山峰之后，大家是否还记得他在风雨中奔跑了多久，才等来了这场金色的雨。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;在初来LPL的时候，rookie只是IG买kakao的赠品，煤矿少年靠自己的天赋与努力爬上了主力中单的位置，但IG那个时候的战绩并不理想，S5被FNATIC两回合暴打回家，每个赛季前都说要起飞到最后却习惯性断腿，就算在夺冠前的春夏季赛，也被喷为18连胜总殿军。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;年复一年的努力&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;却换来了年复一年的失利&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;S7夏季赛ROX的那场梦&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;现在听起来也依然是笑中带泪&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;连一个夏季赛的冠军&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;那个时候看起来都遥不可及&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;“做了一个梦，我们IG拿冠军，我说是不是假的，但就是个梦吧。”&lt;/p&gt;&#xA;&lt;p&gt;他当时特别开心，但接连不断的失望也没有让rookie绝望，每个赛季他都是那个勤勉努力、超级C的rookie。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;苦心人，天不负。&lt;/code&gt;在S8的顶峰上，rookie捧起了第一座属于LPL的冠军，而今年能否再回头填补上那座夏季赛冠军的梦，就让我们继续拭目以待吧。&lt;/p&gt;&#xA;&lt;h2 id=&#34;第九名-我不想讲韦神-godv&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第九名 “我不想讲韦神”—— GODV&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e4%b9%9d%e5%90%8d-%e6%88%91%e4%b8%8d%e6%83%b3%e8%ae%b2%e9%9f%a6%e7%a5%9e-godv&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;GODV，年少成名，法号无天，S5带领老干爹拿下了夏季赛冠军，一时风光无两。&lt;/p&gt;&#xA;&lt;p&gt;但后来的故事我们也都知道了，反向Q和天刀之后老干爹和韦神再也回不到曾经攀登过的高峰了，直到S8开始前的一条微博告诉我们，&lt;code&gt;他选择褪去皎月的光，却拿起了绝地的枪。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;很多人猜测韦神转型的原因。有的人认为他再也追赶不上当初被寄予厚望的自己，有的说是为了蹭吃鸡的热度。捞了可以再去变强，冠军可以不断去追寻，哀莫大于心死。对于这个中二嘤嘤怪来说，这么多失去的东西里，愤恨难平的只有老干爹&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;“在老干爹打，我是有目标的，去了其他的，我没有目标。”&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;韦神从来没有放弃过对于英雄联盟的梦想，只是这个梦想，如果没有老干爹就不再有意义了。&lt;/p&gt;&#xA;&lt;p&gt;4AM的GODV或许看起来光芒万丈，但在内心深处，可能永远残留着那一段属于英雄联盟的意难平吧。&lt;/p&gt;&#xA;&lt;p&gt;“你现在是准备彻底转型吃鸡了对吧”&lt;/p&gt;&#xA;&lt;p&gt;“嗯”&lt;/p&gt;&#xA;&lt;p&gt;“这句话需要你自己重新说下”&lt;/p&gt;&#xA;&lt;p&gt;“我不想讲”&lt;/p&gt;&#xA;&lt;p&gt;但是韦神，你那射丢的一剑，imp已经帮你射回来了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;第八名-金咕咕想去s8doinb&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第八名 “金咕咕想去S8。”——DOINB&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e5%85%ab%e5%90%8d-%e9%87%91%e5%92%95%e5%92%95%e6%83%b3%e5%8e%bbs8doinb&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;我们对于DOINB的印象经常是直播鬼才100个飞机，但看到他这个id，我们才意识到对于这个狗东西最重要的一直只有赢。&lt;/p&gt;&#xA;&lt;p&gt;2018年初与OMG决裂的司马老贼，在EDG当年背过的mouse和DOINB等人来到RW，自此初代侠勇成立。一群失意的人走到一起为了梦想背水一战。春季赛中他们一路披荆斩棘拿下了春季赛季军，洲际赛上他们往狂澜于既倒，护国侠勇力斩KZ。这支队伍里，无论是DOINB还是老贼，征战多年却都没有打进过S赛，唯一打进过S赛拉光，对于世界赛也只有背锅的回应。想去S8的不只是金咕咕，而是这整只rw。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;但电竞是残酷的，每座顶峰下都是数不清的败者。&lt;/code&gt;HARO的三角回旋踢踢碎了他们的梦想。赛季结束后mouse退役，DOINB司马老贼小夫纷纷离队。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;烟花燃起&#xA;&#xA;没能冲达云霄&#xA;&#xA;便四散为花火&#xA;&#xA;留下了短暂却耀眼的光芒&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;今年的DOINB还有去S9的机会，只是身边已经不再是这些人了&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;“佳慧难再遇，三载为千秋”&lt;/code&gt;，侠盗1.0的故事不会再有续集了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;第七名-输的时候说什么都像是借口&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第七名 “输的时候说什么都像是借口。”&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e4%b8%83%e5%90%8d-%e8%be%93%e7%9a%84%e6%97%b6%e5%80%99%e8%af%b4%e4%bb%80%e4%b9%88%e9%83%bd%e5%83%8f%e6%98%af%e5%80%9f%e5%8f%a3&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;kaoma这句话更多时候都是配上了李哥的图片在网络上流传起来，实际上这句话是由SKT教练在2015年MSI失利后对队员说的话。&lt;/p&gt;&#xA;&lt;p&gt;那一年的MSISKT和EDG来到了决赛的第五场，尽管不是最好的选择，但Faker依然锁下了此前百分之百胜率的妖妓。然而这一切都是在EDG的计划之中，比赛结束后，Faker在漫天的采血中不知所措，他的对手为LPL拿下了第一个官方世界冠军，赛后的Faker躲在了角落里，扣马对着所有人说出了这句话，是的，电竞的世界里，亚军是不会被记住的，只有胜者才能享受聚光灯和欢呼声，19岁的Faker记住了这句话。&lt;/p&gt;&#xA;&lt;p&gt;几个月后，他与SSKT便捧起了S5的冠军奖杯。&lt;code&gt;输的时候说什么都像是借口，那么一直赢下去就可以了吧。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;第六名-输不起是吧笑笑&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第六名 “输不起是吧。”——笑笑&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e5%85%ad%e5%90%8d-%e8%be%93%e4%b8%8d%e8%b5%b7%e6%98%af%e5%90%a7%e7%ac%91%e7%ac%91&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;在中国英雄联盟职业的最早期是IG与we的时代，两支队伍此消彼长。在主队长期的对抗中，双方粉丝积累下了不少恩怨。那不是最好的时代，而是最坏的时代。选手们在拥挤的网吧打比赛，平常的训练和吃饭都是问题，而粉丝文化也充满了戾气，比现在更深。在那个时候有选手出现失误、队伍意外战败都可能被粉丝喷的抬不起头来。在2013年s we we l的决赛中，IG3比二击败we，正当队员们在台上为胜利欢呼时，谁能想到一个矿泉水瓶就砸向了PDD&lt;/p&gt;&#xA;&lt;p&gt;现在去分析，笑笑那句简单的“输不起是吧”，心中反而有一些五味杂陈，PDD笑笑他们都是优秀的选手，却生在了最坏的时代，他们的训练环境比当年选手更加艰苦，现在的队伍拿下比赛会获得山呼海啸的欢呼，他们迎来的却是夹杂着矿泉水瓶的辱骂，他们拿下了比赛，但在当时却得不到相应的认可。看着心仪的IG在众山之巅的风光，笑笑心中除了欣慰，或许还存留着一点羡慕吧。&lt;/p&gt;&#xA;&lt;h2 id=&#34;第五名-我打比赛是为了钱但我真的很想赢麻辣香锅&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第五名 “我打比赛是为了钱,但我真的很想赢。”——麻辣香锅&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e4%ba%94%e5%90%8d-%e6%88%91%e6%89%93%e6%af%94%e8%b5%9b%e6%98%af%e4%b8%ba%e4%ba%86%e9%92%b1%e4%bd%86%e6%88%91%e7%9c%9f%e7%9a%84%e5%be%88%e6%83%b3%e8%b5%a2%e9%ba%bb%e8%be%a3%e9%a6%99%e9%94%85&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;有这么一个选手，他喜欢吃小龙虾，连名字都是麻辣香锅的缩写，和那些说为了梦想打游戏的选手不一样，他说自己打职业就是为了钱，但我们知道刘诗雨真的很想赢。他只有一副竹竿身板却没有他不敢开的团，对手不需要去野区找他因为下一秒麻辣香锅就会跳到你脸上。2018对麻辣香锅本应该是最丰收的一年，S8强队伍取得了所有的冠军，他想赢也一直在赢。S8的最后，曾经力挽狂澜的梦魇这次也没能救下RNG。他想赢但这次真的赢不了了。到了2019年，因为伤病，郭老师暂时离开了赛场。当RNG春季赛被淘汰的时候，场下的香锅看着队员们失落的样子一定很难过吧，他想赢，但如果没法上场，连拼一把的机会都不会有。&lt;/p&gt;&#xA;&lt;p&gt;夏天快到了，我们也不知道那个绝食打野还能不能回来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;第四名-我不是退役只是没人要&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第四名 “我不是退役，只是没人要。”&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e5%9b%9b%e5%90%8d-%e6%88%91%e4%b8%8d%e6%98%af%e9%80%80%e5%bd%b9%e5%8f%aa%e6%98%af%e6%b2%a1%e4%ba%ba%e8%a6%81&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;我们在赛场上看到的选手，都是从金字塔底部慢慢爬上去的精英，而在最底层有太多我们不知姓名的选手，他们或许是实力不够，或许是年纪大了没有状态。在这个丛林法则的电竞圈，一切都是残酷的。&lt;/p&gt;&#xA;&lt;p&gt;而在这些人中，吉吉国王应该是最值得唏嘘的一个吧。2013年春季赛的一场对决中，黑暗势力OMG对战OMG，看似悬殊的比赛，却被OTTO1人扭转乾坤。他使用gogoing以为傲的鳄鱼单杀了大哥的瑞兹五次，但OTTO的职业生涯并没有像这样平步青云，之后他离开OMG去了sat经历了万猪拱塔，然后淡出了职业赛场在斗鱼开启了直播。每天的生活从训练比赛rank变成了只剩下在直播中喷喷打野，但OTTO从没有退役，他有些自嘲地说着&lt;code&gt;“我不是退役，只是没人要”。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;国王&#xA;&#xA;你最光辉的时刻是什么时候&#xA;&#xA;是单杀gogoing吗&#xA;&#xA;但这些都已经回不去了呀&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;第三名-求求你们陪我打完g联赛再离开草莓&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第三名 “求求你们陪我打完G联赛再离开。”——草莓&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e4%b8%89%e5%90%8d-%e6%b1%82%e6%b1%82%e4%bd%a0%e4%bb%ac%e9%99%aa%e6%88%91%e6%89%93%e5%ae%8cg%e8%81%94%e8%b5%9b%e5%86%8d%e7%a6%bb%e5%bc%80%e8%8d%89%e8%8e%93&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;2012年，五个少年登上了LPL的领奖台带来了第一座世界冠军，成为后来LPL一切沉沦与荣耀的开始。此后的we 开启了48连胜的不败神话，五个传奇般的IG至今仍在玩家之间口口相传。&lt;/p&gt;&#xA;&lt;p&gt;然而可惜的是，无论流星在天空多么闪耀，都逃不了坠落的那一刻。2013年的we战绩并不理想，冲击世界赛失败，也在队内埋下了矛盾的种子，而在we cg败给OMG之后，we 的动荡也随之开始。阿布带着诺言和卷毛离队转投EDG，那个平时看上去冷酷男孩的草莓，在第二天得知消息后在微博含泪挽留“我求求你们陪我打完G联赛再离开”。赛场上他是能将队员护在身后的上单，这一次却阻止不了队友从身边离开。&lt;/p&gt;&#xA;&lt;p&gt;从此老we we分崩离析，再也无法挽回颓势，&lt;code&gt;那些五个人在一起训练比赛吃外卖的日子，草莓纵使再不舍，也终究是回不去了。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;第二名-去年没能带队友来到这里真的很对不起他们faker&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第二名 “去年没能带队友来到这里，真的很对不起他们。”——Faker&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e4%ba%8c%e5%90%8d-%e5%8e%bb%e5%b9%b4%e6%b2%a1%e8%83%bd%e5%b8%a6%e9%98%9f%e5%8f%8b%e6%9d%a5%e5%88%b0%e8%bf%99%e9%87%8c%e7%9c%9f%e7%9a%84%e5%be%88%e5%af%b9%e4%b8%8d%e8%b5%b7%e4%bb%96%e4%bb%acfaker&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;如果神也玩英雄联盟，他的id应该就是SKT Faker。天神下凡的实力，心无杂念的态度，将自己的人生都融入了召唤师峡谷。但谁能想到17年的MSI后的两年Faker再也没摸到过奖杯。S7总决赛失利后哭的像个孩子，S8在冷板凳上看着队伍不断失利，即使是神也会流下迷茫的泪水，这个被我们捧上神坛的男人，其实还是个不到23岁的男孩。他想赢，但他也会失利，他想前进，但他也会迷茫。&lt;/p&gt;&#xA;&lt;p&gt;S9开始前，SKT其余人全部离队，再一次只剩下了Faker。当年那个想和队员们分享快乐，结果转头空无一人此情景又再一次出现。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;被称作Faker接班人的选手接连出现，但站到最后的一直都是Faker。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;今年LCK春季赛中，Faker与SSKT在hi flabean注视下横扫了green。&lt;/p&gt;&#xA;&lt;p&gt;就是这样一个男人，他忘了S7bad推推棒，他忘了S8blank水货发挥，他流下眼泪是因为觉得自己不够强，但他明明已经是最强的那个了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;魔王啊，就这样把你的故事继续下去吧&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;第一名-rox-tigers-这样的队伍也许再也颇有了smeb&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第一名 “rox tigers 这样的队伍也许再也颇有了。”——SMEB&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e4%b8%80%e5%90%8d-rox-tigers-%e8%bf%99%e6%a0%b7%e7%9a%84%e9%98%9f%e4%bc%8d%e4%b9%9f%e8%ae%b8%e5%86%8d%e4%b9%9f%e9%a2%87%e6%9c%89%e4%ba%86smeb&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;2016年LCK夏季赛总决赛结束之前，英文流解说这么说道，就是这样的一群选手被其他队员拒绝，没有大赞助商，没有训练基地，没有关系，因为他们即将夺得LCK夏季赛冠军。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;rox tigers的故事像极了那些热血少年漫画。一群不知道哪里聚集到一起的小屁孩，却笑着走向了挑战大魔王的路&lt;/code&gt;。&lt;code&gt;可电竞不是童话，勇者最后倒在了魔王的面前&lt;/code&gt;，经历了一场史诗级别的BO5以后，ROXTT水晶被SKT推平。由于没有资金队伍即将解散，追梦的少年被折断了手中的剑。&lt;/p&gt;&#xA;&lt;p&gt;一个月后，在rox tigers最后一场比赛中，他们零封SSKT捧起奖杯，&lt;code&gt;勇者执起了断剑，挥出将死的一击。&lt;/code&gt;，随后不久队伍解散，路人离队。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;聚是一团火，散是满天星。他们彼此陪伴了最难忘的日子，但今后的路就要自己走了。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;很多时候让我们爱上那些选手的瞬间，不是那些胜利后的意气风发，而是与奖杯擦肩过后的背影。&lt;code&gt;泪水让他们的故事更加有血有肉&lt;/code&gt;，让我们想着原来他也和我们一样啊。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;谁都有属于自己的意难平，或许是失去联系的挚友，或许是没能说出的抱歉，也或许是再也见不到的初恋，毕竟谁的青春没有遗憾相伴呢。&lt;/code&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>DAI 白皮书翻译</title>
      <link>https://nesl42.github.io/posts/202507-dai/</link>
      <pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://nesl42.github.io/posts/202507-dai/</guid>
      <category domain="https://nesl42.github.io/categories/technology/">Technology</category>
      <description>&lt;p&gt;DAI白皮书&lt;/p&gt;&#xA;&lt;p&gt;[toc]&lt;/p&gt;&#xA;&lt;h2 id=&#34;dai稳定币概述&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Dai稳定币概述&lt;/span&gt;&#xA;  &lt;a href=&#34;#dai%e7%a8%b3%e5%ae%9a%e5%b8%81%e6%a6%82%e8%bf%b0&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;当前主流数字资产（如比特币 Bitcoin [BTC] 和以太币 Ether [ETH]）价格波动过于剧烈，难以作为日常交易货币使用。比特币的价值经常出现大幅波动，单日涨跌幅度可达 25%，有时甚至一个月内涨幅超过 300%。&lt;/p&gt;&#xA;&lt;p&gt;Dai 稳定币（Dai Stablecoin）是一种以&lt;strong&gt;抵押资产&lt;/strong&gt;为支撑的加密货币，其价值相对美元保持稳定。我们认为，像 Dai 这样的稳定数字资产对于充分发挥区块链技术的潜力至关重要。&lt;/p&gt;&#xA;&lt;p&gt;Maker 是一个基于以太坊（Ethereum）的智能合约平台，它通过一套动态的&lt;strong&gt;抵押债务头寸&lt;/strong&gt;（Collateralized Debt Positions，简称 CDPs）系统、自动反馈机制以及适当激励的外部参与者，来支持并稳定 Dai 的价值。&lt;/p&gt;&#xA;&lt;p&gt;Maker 允许任何人利用其持有的以太坊资产，在 Maker 平台上生成 Dai。一旦生成，Dai 就可以像其他任何加密货币一样使用：可以自由转账给他人、用于商品或服务的支付，也可以作为长期储蓄持有。更重要的是，Dai 的生成过程还为构建一个强大的去中心化保证金交易平台提供了必要条件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;抵押债务头寸智能合约collateralized-debt-position-smart-contracts&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;抵押债务头寸智能合约（Collateralized Debt Position Smart Contracts）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%8a%b5%e6%8a%bc%e5%80%ba%e5%8a%a1%e5%a4%b4%e5%af%b8%e6%99%ba%e8%83%bd%e5%90%88%e7%ba%a6collateralized-debt-position-smart-contracts&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;任何持有抵押资产（Collateral Assets）的用户，都可以通过 Maker 平台独有的&lt;strong&gt;抵押债务头寸（Collateralized Debt Position, CDP）智能合约&lt;/strong&gt;，利用这些资产生成 Dai。&lt;/p&gt;&#xA;&lt;p&gt;CDP 会锁定用户存入的抵押资产，并允许用户生成 Dai，但同时也会产生相应的债务。这笔债务会一直锁定抵押资产，直到用户偿还等值的 Dai 后，才能重新取回抵押物。&lt;strong&gt;所有活跃的 CDP 都必须保持超额抵押&lt;/strong&gt;，即抵押物的价值始终高于债务价值。&lt;/p&gt;&#xA;&lt;h3 id=&#34;cdp-操作流程&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;CDP 操作流程&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#cdp-%e6%93%8d%e4%bd%9c%e6%b5%81%e7%a8%8b&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;h4 id=&#34;步骤-1创建-cdp-并存入抵押物&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;步骤 1：创建 CDP 并存入抵押物&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%ad%a5%e9%aa%a4-1%e5%88%9b%e5%bb%ba-cdp-%e5%b9%b6%e5%ad%98%e5%85%a5%e6%8a%b5%e6%8a%bc%e7%89%a9&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;用户首先向 Maker 发送交易以创建 CDP，随后再发送另一笔交易，存入用于生成 Dai 的抵押资产（包括数量和类型）。此时，CDP 即被视为&lt;strong&gt;已抵押（Collateralized）&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h4 id=&#34;步骤-2从已抵押的-cdp-中生成-dai&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;步骤 2：从已抵押的 CDP 中生成 Dai&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%ad%a5%e9%aa%a4-2%e4%bb%8e%e5%b7%b2%e6%8a%b5%e6%8a%bc%e7%9a%84-cdp-%e4%b8%ad%e7%94%9f%e6%88%90-dai&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;用户发送交易，从 CDP 中提取所需数量的 Dai。作为交换，CDP 会累积等值的债务，并锁定抵押物，直到债务还清为止。&lt;/p&gt;&#xA;&lt;h4 id=&#34;步骤-3偿还债务并支付稳定费stability-fee&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;步骤 3：偿还债务并支付稳定费（Stability Fee）&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%ad%a5%e9%aa%a4-3%e5%81%bf%e8%bf%98%e5%80%ba%e5%8a%a1%e5%b9%b6%e6%94%af%e4%bb%98%e7%a8%b3%e5%ae%9a%e8%b4%b9stability-fee&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;当用户想要取回抵押物时，必须偿还 CDP 中的债务，并支付随时间累积的&lt;strong&gt;稳定费（Stability Fee）&lt;/strong&gt;（该费用仅能以 MKR 支付）。用户向 CDP 发送足额的 Dai 和 MKR 后，债务和稳定费即被结清，CDP 恢复**无负债（Debt Free）**状态。&lt;/p&gt;&#xA;&lt;h4 id=&#34;步骤-4提取抵押物并关闭-cdp&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;步骤 4：提取抵押物并关闭 CDP&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%ad%a5%e9%aa%a4-4%e6%8f%90%e5%8f%96%e6%8a%b5%e6%8a%bc%e7%89%a9%e5%b9%b6%e5%85%b3%e9%97%ad-cdp&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;在债务和稳定费全部结清后，用户可向 Maker 发送交易，自由取回全部或部分抵押物至自己的钱包，并选择关闭 CDP。&lt;/p&gt;&#xA;&lt;h2 id=&#34;单抵押-daisingle-collateral-dai-vs-多抵押-daimulti-collateral-dai&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;单抵押 Dai（Single-Collateral Dai） vs 多抵押 Dai（Multi-Collateral Dai）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%8d%95%e6%8a%b5%e6%8a%bc-daisingle-collateral-dai-vs-%e5%a4%9a%e6%8a%b5%e6%8a%bc-daimulti-collateral-dai&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Dai 在初始阶段将仅支持一种抵押资产类型——资金池化以太币（Pooled Ether）。未来 6-12 个月内，我们计划将单抵押 Dai 升级为多抵押 Dai，其核心区别在于后者可支持任意数量的担保债务头寸（CDP）类型。&lt;/p&gt;&#xA;&lt;h2 id=&#34;资金池化以太币peth单抵押-dai-的临时机制&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;资金池化以太币/PETH（单抵押 Dai 的临时机制）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e8%b5%84%e9%87%91%e6%b1%a0%e5%8c%96%e4%bb%a5%e5%a4%aa%e5%b8%81peth%e5%8d%95%e6%8a%b5%e6%8a%bc-dai-%e7%9a%84%e4%b8%b4%e6%97%b6%e6%9c%ba%e5%88%b6&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;在 Maker 平台初期，资金池化以太币（PETH）将是唯一接受的抵押资产类型。用户若想在平台第一阶段开设担保债务头寸（CDP）并生成 Dai，需先获取 PETH。操作方式非常简单：用户将以太币（ETH）存入特定智能合约后，该合约会即时汇集所有用户的 ETH，并按比例向用户返还对应的 PETH。&lt;/p&gt;&#xA;&lt;p&gt;若以太币（ETH）遭遇市场暴跌，导致某 CDP 的债务价值超过其抵押资产价值，Maker 平台将通过稀释 PETH 进行系统资本重组。这意味着每位持有人对 PETH 的比例求偿权将相应降低。&lt;/p&gt;&#xA;&lt;p&gt;待 Maker 平台完成升级并支持多抵押资产类型后，PETH 机制将被废止，届时以太币（ETH）将与其他新增抵押资产共同作为担保品。&lt;/p&gt;&#xA;&lt;h2 id=&#34;价格稳定机制&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;价格稳定机制&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%bb%b7%e6%a0%bc%e7%a8%b3%e5%ae%9a%e6%9c%ba%e5%88%b6&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h2 id=&#34;目标价格target-price&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;目标价格（Target Price）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%9b%ae%e6%a0%87%e4%bb%b7%e6%a0%bctarget-price&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;在Maker平台上，Dai目标价格（Dai Target Price）具有两大核心功能：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;用于计算抵押债务头寸（CDP）的抵押品与债务比率；&lt;/li&gt;&#xA;&lt;li&gt;在全球清算（global settlement）发生时，用于确定Dai持有者所获抵押资产的价值。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;目标价格（Target Price）最初以美元计价，初始值为1，即与美元保持1:1的软挂钩（soft peg）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;目标利率反馈机制target-rate-feedback-mechanismtrfm&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;目标利率反馈机制（Target Rate Feedback Mechanism，TRFM）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%9b%ae%e6%a0%87%e5%88%a9%e7%8e%87%e5%8f%8d%e9%a6%88%e6%9c%ba%e5%88%b6target-rate-feedback-mechanismtrfm&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;当市场出现严重不稳定时，可启动&lt;strong&gt;目标利率反馈机制&lt;/strong&gt;（TRFM）。该机制启动后，将打破Dai的固定锚定关系，但仍保持相同的计价单位。&lt;/p&gt;&#xA;&lt;p&gt;TRFM是Dai稳定币系统（Dai Stablecoin System）通过自动调整目标利率（Target Rate），促使市场力量维持Dai市场价格围绕目标价格（Target Price）波动的核心机制。目标利率决定了目标价格随时间的变化趋势——当目标利率为正时，系统激励用户持有Dai；当目标利率为负时，则激励用户借入Dai。TRFM未启动时，目标利率固定为0%，此时目标价格保持不变，Dai维持锚定状态。&lt;/p&gt;&#xA;&lt;p&gt;当TRFM启动后，目标利率与目标价格将动态变化，通过自动调整用户生成/持有Dai的激励来平衡供需关系。该反馈机制推动Dai市场价格向可变目标价格靠拢，既能抑制波动性，又能在需求冲击时提供实时流动性。&lt;/p&gt;&#xA;&lt;p&gt;具体运作逻辑：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;当Dai市场价格低于目标价格时，目标利率上升&#xA;→ 目标价格增速加快，通过CDP生成Dai的成本上升&#xA;→ 持有Dai的资本收益增加，推高市场需求&#xA;→ 供需关系变化（供给减少+需求增加）促使Dai市场价格回升至目标价格&lt;/li&gt;&#xA;&lt;li&gt;当Dai市场价格高于目标价格时，机制反向运作：&#xA;→ 目标利率下降刺激Dai生成需求，同时抑制持有需求&#xA;→ 供需调整推动Dai市场价格回落至目标价格&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;该机制构成负反馈循环（negative feedback loop）：市场价格偏离目标价格的幅度越大，反向调节作用力就越强。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;举例：&#xA;&#xA;情况 1：Dai 价格太低（低于目标价格）&#xA;- 假设：1 Dai 的市场价格 = 0.98 美元（目标价格是 1 美元）。&#xA;- TRFM 启动：系统 提高目标利率（比如从 0% → +2%）。&#xA;- 影响：&#xA;  - 对借款人（CDP 用户）：借 Dai 的成本变高（因为利率上升），导致 Dai 供应减少。&#xA;  - 对持币人：持有 Dai 能获得利息（利率为正），因此 更多人愿意持有 Dai，而不是卖出。&#xA;- 结果：需求增加 + 供应减少 → Dai 价格回升至 1 美元。&#xA;&#xA;情况 2：Dai 价格太高（高于目标价格）&#xA;- 假设：1 Dai 的市场价格 = 1.02 美元（目标价格是 1 美元）。&#xA;- TRFM 启动：系统 降低目标利率（比如从 0% → -1%）。&#xA;- 影响：&#xA;  - 对借款人（CDP 用户）：借 Dai 的成本降低（利率下降），导致 Dai 供应增加。&#xA;  - 对持币人：持有 Dai 要支付利息（利率为负），因此 更多人愿意卖出 Dai，而不是持有。&#xA;- 结果：供应增加 + 需求减少 → Dai 价格回落至 1 美元。&#xA;&#xA;3. 为什么叫“负反馈循环”？&#xA;- “负反馈” 的意思是：偏离目标越远，反向调节的力度越大。&#xA;  - 比如 Dai 价格跌到 0.95 美元（比 0.98 美元更低），TRFM 会 更大幅度提高利率，加速 Dai 价格回升。&#xA;  - 反之，如果 Dai 涨到 1.05 美元，TRFM 会 更大幅度降低利率，加速价格回落。&#xA;- 这样就能 避免价格剧烈波动，让 Dai 长期稳定在目标价格附近。&#xA;&#xA;TRFM 的本质就是 用利率调节市场行为，让 Dai 的价格 自动回归稳定，而不是依赖人为干预。&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;灵敏度参数sensitivity-parameter&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;灵敏度参数（Sensitivity Parameter）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%81%b5%e6%95%8f%e5%ba%a6%e5%8f%82%e6%95%b0sensitivity-parameter&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;TRFM（目标利率反馈机制）的&lt;strong&gt;灵敏度参数（Sensitivity Parameter）​&lt;/strong&gt;用于决定&lt;strong&gt;目标利率（Target Rate）​&lt;/strong&gt;对Dai目标价格与市场价格偏差的调整幅度。该参数通过调节反馈速率，使系统保持动态平衡。尽管MKR持币人（MKR voters）可设定此参数，但当TRFM激活时，​&lt;strong&gt;目标价格（Target Price）​&lt;/strong&gt;与&lt;strong&gt;目标利率（Target Rate）​&lt;/strong&gt;将由市场动态决定，而非直接受MKR持币人控制。&lt;/p&gt;&#xA;&lt;p&gt;此外，&lt;strong&gt;灵敏度参数（Sensitivity Parameter）&lt;strong&gt;还用于启用或停用TRFM。若该参数与&lt;/strong&gt;目标利率（Target Rate）&lt;strong&gt;同时为零，则Dai将严格锚定当前&lt;/strong&gt;目标价格（Target Price）&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;全局清算global-settlement&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;全局清算（Global Settlement）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%85%a8%e5%b1%80%e6%b8%85%e7%ae%97global-settlement&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;全局清算是一项作为最终手段的流程，通过密码学方式为Dai持有者担保目标价格（Target Price）。该流程会关闭并有序解除Maker平台（Maker Platform）的运作，同时确保所有用户（包括Dai持有者和CDP用户）都能获得其应得的资产净值。此过程完全去中心化，由MKR持币人（MKR voters）投票决定是否启动，确保仅在最严重的紧急情况下使用。此类紧急情况包括：长期市场非理性波动、黑客攻击或安全漏洞，以及系统升级。&lt;/p&gt;&#xA;&lt;h3 id=&#34;全局清算分步流程&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;全局清算分步流程&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%85%a8%e5%b1%80%e6%b8%85%e7%ae%97%e5%88%86%e6%ad%a5%e6%b5%81%e7%a8%8b&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;h4 id=&#34;第一步激活全局清算&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第一步：激活全局清算&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e4%b8%80%e6%ad%a5%e6%bf%80%e6%b4%bb%e5%85%a8%e5%b1%80%e6%b8%85%e7%ae%97&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;若被Maker治理（Maker Governance）指定为全局清算人（global settlers）的足够多成员认为系统遭受严重攻击，或全局清算被列为技术升级的一部分，则可激活全局清算功能。此操作将停止CDP的创建与操作，并将价格预言机（Price Feed）冻结为固定值，用于计算所有用户的比例索赔。&lt;/p&gt;&#xA;&lt;h4 id=&#34;第二步处理全局清算索赔&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第二步：处理全局清算索赔&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e4%ba%8c%e6%ad%a5%e5%a4%84%e7%90%86%e5%85%a8%e5%b1%80%e6%b8%85%e7%ae%97%e7%b4%a2%e8%b5%94&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;全局清算激活后，需预留一段时间让清算维护者（keepers）根据固定预言机值处理所有Dai及CDP持有者的比例索赔。处理完成后，Dai和CDP持有者均可凭其资产申领固定数量的ETH。&lt;/p&gt;&#xA;&lt;h4 id=&#34;第三步dai与cdp持有者申领抵押资产&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;第三步：Dai与CDP持有者申领抵押资产&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%ac%ac%e4%b8%89%e6%ad%a5dai%e4%b8%8ecdp%e6%8c%81%e6%9c%89%e8%80%85%e7%94%b3%e9%a2%86%e6%8a%b5%e6%8a%bc%e8%b5%84%e4%ba%a7&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;每位Dai和CDP持有者可调用Maker平台上的索赔功能，直接将其Dai和CDP按Dai目标价格兑换为对应计算值的固定数量ETH。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;示例：&lt;/em&gt;&#xA;若Dai目标价格为1美元，ETH/USD价格为200，且用户在全局清算激活时持有1000 Dai，则在处理期结束后，可从Maker平台申领恰好5 ETH。最终索赔无时间限制。&lt;/p&gt;&#xA;&lt;h2 id=&#34;maker平台maker-platform的风险管理risk-management&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Maker平台（Maker Platform）的风险管理（Risk Management）&lt;/span&gt;&#xA;  &lt;a href=&#34;#maker%e5%b9%b3%e5%8f%b0maker-platform%e7%9a%84%e9%a3%8e%e9%99%a9%e7%ae%a1%e7%90%86risk-management&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;MKR代币（MKR token）持有者可通过投票执行以下风险管理操作：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;新增CDP类型（Add new CDP type）：&#xA;创建具有独特风险参数组合的新CDP类型。CDP类型可以是新型抵押品，或对现有抵押品类别的风险参数进行重新配置。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;修改现有CDP类型（Modify existing CDP types）：&#xA;调整已添加的一个或多个CDP类型的风险参数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;调整敏感度参数（Modify Sensitivity Parameter）：&#xA;改变目标利率反馈机制（Target Rate Feedback Mechanism, TRFM）的敏感度。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;调整目标利率（Modify Target Rate）：&#xA;治理层可变更目标利率。实际操作中仅适用于特定场景：当MKR持有者需要将Dai价格锚定至当前目标价时。该操作需同步调整敏感度参数，若将两者均设为0%，则TRFM将被禁用，Dai目标价将永久锚定当前值。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;选定可信预言机集合（Choose the set of trusted oracles）：&#xA;Maker平台通过去中心化预言机网络获取抵押品内部报价及Dai市场价格数据。MKR持有者有权决定可信预言机节点的数量及具体成员。即使半数预言机节点被攻陷或故障，系统仍可维持安全运行。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;调整价格反馈敏感度（Modify Price Feed Sensitivity）：&#xA;修改价格反馈对系统内部价格波动的最大影响阈值规则。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;选定全局清算人集合（Choose the set of global settlers）：&#xA;全局清算（Global settlement）是抵御预言机攻击或治理流程攻击的关键机制。治理流程负责选定全局清算人组，并确定触发全局清算所需的最低清算人数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;风险参数risk-parameters&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;风险参数（Risk Parameters）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e9%a3%8e%e9%99%a9%e5%8f%82%e6%95%b0risk-parameters&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;抵押债务头寸（Collateralized Debt Positions, CDPs）通过多重风险参数规范其使用规则。每种CDP类型均具备独特的参数组合，这些参数根据该CDP类型所用抵押品的风险特征设定，并由MKR持有者通过投票直接管控（1 MKR = 1投票权）。&lt;/p&gt;&#xA;&lt;h4 id=&#34;cdp核心风险参数&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;CDP核心风险参数：&lt;/span&gt;&#xA;  &lt;a href=&#34;#cdp%e6%a0%b8%e5%bf%83%e9%a3%8e%e9%99%a9%e5%8f%82%e6%95%b0&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;债务上限（Debt Ceiling）&#xA;单一CDP类型可生成的最大债务额度。当某类CDP的未偿债务达到上限时，必须关闭现有头寸才能新增债务。该参数用于确保抵押品组合的充分多样化。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;清算比率（Liquidation Ratio）&#xA;触发CDP清算的抵押品-债务比率阈值。低清算比率表明MKR持有者预期抵押品价格波动较小，高比率则预示预期波动剧烈。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;稳定费（Stability Fee）：所有CDP需支付的年化费用，按未偿债务计算并以Dai计价，但必须通过MKR代币支付（支付金额根据MKR实时市价计算）。所支付的MKR将被销毁，永久减少流通供应。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;惩罚比率（Penalty Ratio）：用于确定清算拍卖中用于回购销毁MKR的Dai最大比例（剩余抵押品将返还原CDP持有者）。该参数覆盖清算机制的低效成本。&#xA;&lt;em&gt;注：在单抵押Dai（Single-Collateral Dai）阶段，清算惩罚资金用于回购销毁PETH，从而提升PETH/ETH汇率。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mkr代币治理机制&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;MKR代币治理机制&lt;/span&gt;&#xA;  &lt;a href=&#34;#mkr%e4%bb%a3%e5%b8%81%e6%b2%bb%e7%90%86%e6%9c%ba%e5%88%b6&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;除了用于支付活跃CDP（Collateralized Debt Position）的稳定费外，MKR代币在Maker平台治理中发挥着核心作用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;治理架构&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;治理架构&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%b2%bb%e7%90%86%e6%9e%b6%e6%9e%84&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;系统级治理通过MKR持有者投票选举「活跃提案（Active Proposal）」实现。该提案作为智能合约，经MKR投票授权后获得根权限（root access），可修改Maker平台的内部治理参数。&lt;/p&gt;&#xA;&lt;h2 id=&#34;提案类型&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;提案类型&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%8f%90%e6%a1%88%e7%b1%bb%e5%9e%8b&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;提案分为两种形式：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;单次执行提案合约（Single Action Proposal Contracts, SAPC）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;获取根权限后仅能执行一次&lt;/li&gt;&#xA;&lt;li&gt;执行后立即生效并自动修改平台治理参数&lt;/li&gt;&#xA;&lt;li&gt;执行后合约自毁且不可复用&lt;/li&gt;&#xA;&lt;li&gt;适用于系统初期阶段，操作简单但灵活性较低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;委托提案合约（Delegating Proposal Contracts, DPC）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过合约内编码的第二层治理逻辑持续行使根权限&lt;/li&gt;&#xA;&lt;li&gt;可包含基础逻辑（如每周风险参数更新投票协议）&lt;/li&gt;&#xA;&lt;li&gt;支持高级功能：&#xA;▸ 设定特定时段内的治理行为幅度限制&#xA;▸ 将部分/全部权限分级委托至第三层DPC（可附加限制条件）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;提案机制&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;提案机制&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%8f%90%e6%a1%88%e6%9c%ba%e5%88%b6&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;任何以太坊账户均可部署有效提案合约&lt;/li&gt;&#xA;&lt;li&gt;MKR持有者可用代币对多个候选提案进行赞成投票&lt;/li&gt;&#xA;&lt;li&gt;累计赞成票数最高的智能合约将当选为活跃提案&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mkr与多抵押daimulti-collateral-dai&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;MKR与多抵押Dai（Multi-Collateral Dai）&lt;/span&gt;&#xA;  &lt;a href=&#34;#mkr%e4%b8%8e%e5%a4%9a%e6%8a%b5%e6%8a%bcdaimulti-collateral-dai&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;在升级至多抵押Dai系统后，MKR代币将通过取代PETH（Pooled Ether）成为系统资本重组（recapitalization）的核心资源，从而在Dai稳定币体系中承担更重要的职能。&lt;/p&gt;&#xA;&lt;h3 id=&#34;风险cdpcollateralized-debt-positions的自动清算机制&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;风险CDP（Collateralized Debt Positions）的自动清算机制&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e9%a3%8e%e9%99%a9cdpcollateralized-debt-positions%e7%9a%84%e8%87%aa%e5%8a%a8%e6%b8%85%e7%ae%97%e6%9c%ba%e5%88%b6&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;为确保系统始终持有足额抵押品覆盖所有未偿债务（根据目标价格/Target Price），当某个CDP被判定风险过高时将被清算。Maker平台通过比较**清算比率（Liquidation Ratio）&lt;strong&gt;与CDP当前的&lt;/strong&gt;抵押品-债务比率（collateral-to-debt ratio）**来触发清算流程。&lt;/p&gt;&#xA;&lt;h4 id=&#34;清算比率设定&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;清算比率设定&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%b8%85%e7%ae%97%e6%af%94%e7%8e%87%e8%ae%be%e5%ae%9a&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;每种CDP类型都有独特的清算比率，该比率由MKR持币人投票决定，并根据该CDP类型所对应抵押资产的风险特征设定。当CDP的抵押率触及清算阈值时，Maker平台将自动收购其抵押资产并抛售。当前存在两种机制：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单抵押Dai（Single-Collateral Dai）：临时采用流动性供给合约（Liquidity Providing Contract）&lt;/li&gt;&#xA;&lt;li&gt;多抵押Dai（Multi-Collateral Dai）：采用拍卖机制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;流动性供给合约单抵押dai临时机制&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;流动性供给合约（单抵押Dai临时机制）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%b5%81%e5%8a%a8%e6%80%a7%e4%be%9b%e7%bb%99%e5%90%88%e7%ba%a6%e5%8d%95%e6%8a%b5%e6%8a%bcdai%e4%b8%b4%e6%97%b6%e6%9c%ba%e5%88%b6&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;在单抵押Dai阶段，清算通过智能合约「流动性供给合约」执行。该合约根据系统价格预言机（Price Feed）与以太坊用户及清算机器人（Keepers）直接交易：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;清算触发&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;被清算CDP立即由系统接管&lt;/li&gt;&#xA;&lt;li&gt;原持有者可获得：剩余抵押品价值 - 债务 - 稳定费（Stability Fee）- 清算罚金（Liquidation Penalty）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;抵押品处理流程&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PETH抵押品被放入流动性供给合约公开出售&lt;/li&gt;&#xA;&lt;li&gt;清算机器人可通过原子交易（Atomically）支付Dai购买PETH（相当于抄底）&lt;/li&gt;&#xA;&lt;li&gt;所获Dai将立即从流通供应量中销毁，直至覆盖CDP债务缺口。卖PETH得到的Dai会先偿还债务，多余的资金将用于回购并销毁PETH，从而推高PETH价格。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;超额处理与价值重分配&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若Dai支付额超过债务缺口：超额部分将用于从市场回购并销毁PETH，通过提高ETH/PETH比率使PETH持有者增值&lt;/li&gt;&#xA;&lt;li&gt;若初始抛售未能覆盖债务：系统将持续增发并抛售PETH，导致ETH/PETH比率下降，使PETH持有者蒙受价值损失&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;债务与抵押品拍卖multi-collateral-dai&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;债务与抵押品拍卖（Multi-Collateral Dai）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%80%ba%e5%8a%a1%e4%b8%8e%e6%8a%b5%e6%8a%bc%e5%93%81%e6%8b%8d%e5%8d%96multi-collateral-dai&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;当发生清算时，Maker 平台会购买抵押债务头寸（CDP）的抵押资产，随后通过自动化拍卖机制进行出售。该拍卖机制使系统即便在缺乏价格信息时，仍能完成 CDP 的结算。&lt;/p&gt;&#xA;&lt;h4 id=&#34;债务拍卖debt-auction&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;债务拍卖（Debt Auction）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%80%ba%e5%8a%a1%e6%8b%8d%e5%8d%96debt-auction&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;为接管 CDP 的抵押资产以便出售，系统需先筹集足够的 Dai 代币以偿付该 CDP 的债务。此过程称为债务拍卖（Debt Auction），其运作方式是通过稀释 MKR 代币的供应量，并以拍卖形式向竞标者出售这些代币。&lt;/p&gt;&#xA;&lt;h4 id=&#34;抵押品拍卖collateral-auction&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;抵押品拍卖（Collateral Auction）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%8a%b5%e6%8a%bc%e5%93%81%e6%8b%8d%e5%8d%96collateral-auction&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;与此同时，CDP 的抵押资产会在抵押品拍卖（Collateral Auction）中出售。拍卖所得（同样以 Dai 计价）将优先用于偿付 CDP 的债务及清算罚金（Liquidation Penalty，这是由 MKR 持有者投票确定的风险参数），剩余资金则用于回购并销毁 MKR 代币。此操作可直接抵消债务拍卖中产生的 MKR 稀释效应。&lt;/p&gt;&#xA;&lt;p&gt;若竞标出价足以全额覆盖 CDP 债务及清算罚金，抵押品拍卖将切换为反向拍卖机制（reverse auction），尝试以最小数量的抵押资产完成清算——任何剩余的抵押品将返还给 CDP 的原所有者。&lt;/p&gt;&#xA;&lt;h2 id=&#34;关键外部参与者key-external-actors&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;关键外部参与者（Key External Actors）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%85%b3%e9%94%ae%e5%a4%96%e9%83%a8%e5%8f%82%e4%b8%8e%e8%80%85key-external-actors&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;除智能合约基础设施外，Maker平台（Maker Platform）依赖特定外部参与者维持运营。其中：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;守护者（Keepers）：利用平台经济激励机制的独立参与者&lt;/li&gt;&#xA;&lt;li&gt;预言机（Oracles）与全局清算人（Global Settlers）：由MKR持币人（MKR Voters）授予系统特殊权限的角色&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;守护者keepers&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;守护者（Keepers）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%ae%88%e6%8a%a4%e8%80%85keepers&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;守护者是通过盈利机会激励的（通常自动化的）独立参与者，在Dai稳定币系统（Dai Stablecoin System）中：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;参与债务拍卖（Debt Auctions）和抵押品拍卖（Collateral Auctions）（当抵押债务头寸CDPs被清算时）&lt;/li&gt;&#xA;&lt;li&gt;围绕目标价格（Target Price）进行Dai套利：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当市价高于目标价格时卖出Dai&lt;/li&gt;&#xA;&lt;li&gt;当市价低于目标价格时买入Dai&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;预言机oracles&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;预言机（Oracles）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e9%a2%84%e8%a8%80%e6%9c%baoracles&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;系统需要两类实时数据：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;CDP抵押资产的市场价格（用于触发清算）&lt;/li&gt;&#xA;&lt;li&gt;Dai市场价格及其与目标价格的偏差（用于目标费率调整机制TRFM激活时的参数调整）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;安全机制：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MKR持币人选定可信预言机节点，通过以太坊交易提交数据&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;价格反馈敏感度参数（Price Feed Sensitivity Parameter）&lt;/strong&gt;：限制价格数据的最大波动幅度（例如&amp;quot;15分钟内5%&amp;ldquo;的设定意味着价格在45分钟内最多波动约15%），为应对预言机攻击提供全局清算（global settlement）响应时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;全局清算人global-settlers&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;全局清算人（Global Settlers）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%85%a8%e5%b1%80%e6%b8%85%e7%ae%97%e4%ba%baglobal-settlers&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;作为Dai稳定币系统的最后防线：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由MKR持币人选举产生&lt;/li&gt;&#xA;&lt;li&gt;唯一权限：触发全局清算（global settlement）&lt;/li&gt;&#xA;&lt;li&gt;无其他系统特权&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;应用案例&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;应用案例&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%ba%94%e7%94%a8%e6%a1%88%e4%be%8b&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h3 id=&#34;基础借贷&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;基础借贷&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%9f%ba%e7%a1%80%e5%80%9f%e8%b4%b7&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;案例1&lt;/strong&gt;：Bob需要贷款，他：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;锁定价值显著超过100美元的ETH到CDP&lt;/li&gt;&#xA;&lt;li&gt;立即生成100 Dai到其以太坊账户&lt;/li&gt;&#xA;&lt;li&gt;假设年稳定费（Stability Fee）为1%，一年后需偿还101 Dai才能取回ETH&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;杠杆交易&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;杠杆交易&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%9d%a0%e6%9d%86%e4%ba%a4%e6%98%93&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;案例2&lt;/strong&gt;：Bob进行ETH/Dai保证金做多：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;抵押价值150美元的ETH生成100 Dai&lt;/li&gt;&#xA;&lt;li&gt;用100 Dai购买等值ETH&lt;/li&gt;&#xA;&lt;li&gt;最终获得1.66倍ETH/USD风险敞口&lt;/li&gt;&#xA;&lt;li&gt;原始抵押品（150美元ETH）持续锁定直至偿还债务+稳定费&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;多角色协作&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;多角色协作&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%a4%9a%e8%a7%92%e8%89%b2%e5%8d%8f%e4%bd%9c&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;案例3&lt;/strong&gt;：Alice与Bob通过场外合约（OTC contract）合作：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Alice提供50美元ETH，Bob提供100美元ETH&lt;/li&gt;&#xA;&lt;li&gt;合约创建CDP并生成100 Dai转给Bob&lt;/li&gt;&#xA;&lt;li&gt;CDP所有权转移给Alice，使其获得：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;100美元债务（以Dai计价）&lt;/li&gt;&#xA;&lt;li&gt;150美元抵押品（以ETH计价）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;实现3倍ETH/USD杠杆做多&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;清算机制&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;清算机制&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%b8%85%e7%ae%97%e6%9c%ba%e5%88%b6&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;案例4&lt;/strong&gt;：ETH价格暴跌时的清算流程（假设参数）：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;清算比率（Liquidation Ratio）：145%&lt;/li&gt;&#xA;&lt;li&gt;惩罚比率（Penalty Ratio）：105%&lt;/li&gt;&#xA;&lt;li&gt;初始抵押率：150% → 价格下跌10%后降至~135%&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;触发流程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;交易者启动清算&lt;/li&gt;&#xA;&lt;li&gt;债务拍卖：用Dai竞拍MKR&lt;/li&gt;&#xA;&lt;li&gt;抵押品拍卖：用Dai竞拍价值~135美元的ETH抵押品&lt;/li&gt;&#xA;&lt;li&gt;当竞价达105 Dai时，进入反向竞价阶段（以最少抵押品换取105 Dai）&lt;/li&gt;&#xA;&lt;li&gt;剩余抵押品返还CDP持有者&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;可触达市场addressable-market&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;可触达市场（Addressable Market）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%8f%af%e8%a7%a6%e8%be%be%e5%b8%82%e5%9c%baaddressable-market&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;如引言所述，具备价格稳定性的加密货币是大多数去中心化应用的基础需求。因此，Dai的潜在市场规模至少与整个区块链行业相当。以下列举了Dai稳定币系统(Dai Stablecoin System)作为价格稳定的加密货币及去中心化保证金交易平台(decentralized margin trading platform)的部分直接应用场景（涵盖区块链及更广泛领域），该清单并非穷尽：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;预测市场与博彩应用（Prediction Markets &amp;amp; Gambling Applications）&#xA;当进行非关联性预测时，用户显然不愿因使用波动性加密货币下注而增加额外风险。若用户还需对下注所用波动性资产的未来价格进行投机，长期押注将变得尤其不可行。而像Dai这样具备价格稳定性的加密货币，将成为预测市场和博彩用户的自然选择。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;金融市场（Financial Markets）：对冲、衍生品与杠杆&#xA;抵押债务头寸(CDPs)将实现无需许可的杠杆交易。Dai还可作为稳定可靠的抵押品，应用于定制化衍生品智能合约（如期权或差价合约(CFD)）中。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;商户收款、跨境交易与汇款&#xA;通过规避汇率波动风险并消除中间环节，使用Dai可显著降低国际贸易的 transaction costs。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;透明会计系统（Transparent Accounting Systems）&#xA;慈善机构、非政府组织(NGO)及政府机构采用Dai后，将提升运营效率并降低腐败风险。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;风险及应对措施risks-and-their-mitigation&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;风险及应对措施（Risks and their Mitigation）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e9%a3%8e%e9%99%a9%e5%8f%8a%e5%ba%94%e5%af%b9%e6%8e%aa%e6%96%bdrisks-and-their-mitigation&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;Maker平台的顺利开发、部署及运营面临诸多潜在风险。Maker社区必须采取一切必要措施进行风险缓释。以下列举已识别的关键风险及相应应对方案：&lt;/p&gt;&#xA;&lt;h4 id=&#34;1-智能合约基础设施遭恶意黑客攻击&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1. 智能合约基础设施遭恶意黑客攻击&lt;/span&gt;&#xA;  &lt;a href=&#34;#1-%e6%99%ba%e8%83%bd%e5%90%88%e7%ba%a6%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd%e9%81%ad%e6%81%b6%e6%84%8f%e9%bb%91%e5%ae%a2%e6%94%bb%e5%87%bb&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;风险描述：&lt;/p&gt;&#xA;&lt;p&gt;早期阶段的最大风险在于恶意程序员可能发现已部署智能合约的漏洞，并在修复前利用其破坏系统或窃取资产。最坏情况下，Maker平台（Maker Platform）中作为抵押品的所有去中心化数字资产（如以太坊（ETH）或Augur声誉币（REP））可能被永久盗取。而Digix黄金IOU等非去中心化抵押资产则可通过中心化后门冻结控制。&lt;/p&gt;&#xA;&lt;p&gt;应对措施（Mitigation）：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自开发伊始，智能合约安全始终是Dai项目的最高优先级&lt;/li&gt;&#xA;&lt;li&gt;代码库已接受区块链行业顶尖安全研究团队的三次独立审计&lt;/li&gt;&#xA;&lt;li&gt;长期将通过形式化验证（Formal Verification）实现理论上的终极安全——用数学方法证明代码行为完全符合设计意图&lt;/li&gt;&#xA;&lt;li&gt;目前已通过Haskell语言完成Dai稳定币系统的完整参考实现，为高阶形式化验证奠定基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-抵押资产遭遇黑天鹅事件black-swan-event&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2. 抵押资产遭遇黑天鹅事件（Black Swan Event）&lt;/span&gt;&#xA;  &lt;a href=&#34;#2-%e6%8a%b5%e6%8a%bc%e8%b5%84%e4%ba%a7%e9%81%ad%e9%81%87%e9%bb%91%e5%a4%a9%e9%b9%85%e4%ba%8b%e4%bb%b6black-swan-event&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;风险描述：&lt;/p&gt;&#xA;&lt;p&gt;当Dai稳定币系统（Dai Stablecoin System）处于早期阶段（MKR代币尚不足以支撑通胀稀释时），或后期采用多元化抵押组合时，抵押资产可能发生极端价格波动。&lt;/p&gt;&#xA;&lt;p&gt;应对措施：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初期仅接受ETH作为抵押债务头寸（CDP）抵押品&lt;/li&gt;&#xA;&lt;li&gt;设置债务上限（Debt Ceiling）并采用渐进式放宽机制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;3-市场竞争与用户体验挑战&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3. 市场竞争与用户体验挑战&lt;/span&gt;&#xA;  &lt;a href=&#34;#3-%e5%b8%82%e5%9c%ba%e7%ab%9e%e4%ba%89%e4%b8%8e%e7%94%a8%e6%88%b7%e4%bd%93%e9%aa%8c%e6%8c%91%e6%88%98&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;风险描述：&lt;/p&gt;&#xA;&lt;p&gt;尽管Dai稳定币系统（Dai Stablecoin System）凭借“真正去中心化”特性成为区块链行业最复杂的稳定模型，但用户可能为追求操作简便性转向中心化数字资产。&lt;/p&gt;&#xA;&lt;p&gt;应对措施：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;确保Dai符合ERC-20标准，实现与以太坊生态的无缝兼容&lt;/li&gt;&#xA;&lt;li&gt;维持高流动性，使普通用户无需理解底层机制即可便捷使用&lt;/li&gt;&#xA;&lt;li&gt;针对保证金交易用户（做市商（Keeper）及投资机构）提供详尽文档支持，Maker社区将确保系统各环节均有清晰说明&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;4-定价异常与非理性市场行为&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4. 定价异常与非理性市场行为&lt;/span&gt;&#xA;  &lt;a href=&#34;#4-%e5%ae%9a%e4%bb%b7%e5%bc%82%e5%b8%b8%e4%b8%8e%e9%9d%9e%e7%90%86%e6%80%a7%e5%b8%82%e5%9c%ba%e8%a1%8c%e4%b8%ba&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;风险描述：&lt;/p&gt;&#xA;&lt;p&gt;预言机（Oracle）价格馈送故障或非理性市场动态可能导致Dai价值长期偏离锚定。若市场信心崩溃，即使触发TRFM调整机制或启动MKR稀释，仍可能无法恢复流动性。&lt;/p&gt;&#xA;&lt;p&gt;应对措施：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Maker社区需激励充足资本池充当做市商（Keeper）&lt;/li&gt;&#xA;&lt;li&gt;通过市场理性最大化实现Dai供应量的稳定增长&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;5-中心化基础设施失效&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;5. 中心化基础设施失效&lt;/span&gt;&#xA;  &lt;a href=&#34;#5-%e4%b8%ad%e5%bf%83%e5%8c%96%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd%e5%a4%b1%e6%95%88&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;风险描述：&lt;/p&gt;&#xA;&lt;p&gt;早期阶段Maker团队在预算管理、人才招募、合作拓展及监管沟通等方面起主导作用。若因法律问题或管理不善导致团队失能，平台发展将面临重大风险。&lt;/p&gt;&#xA;&lt;p&gt;应对措施：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Maker社区作为去中心化制衡力量存在&lt;/li&gt;&#xA;&lt;li&gt;MKR代币分配阶段已确保核心开发者持有显著份额&lt;/li&gt;&#xA;&lt;li&gt;若团队失能，持币者将自发资助开发（或直接参与开发）以维护自身权益&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;结论conclusion&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;结论（Conclusion）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%bb%93%e8%ae%baconclusion&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;Dai稳定币系统(Dai Stablecoin System)旨在解决以太坊生态系统(Ethereum ecosystem)及更广泛区块链经济中价值稳定交换的核心问题。我们相信：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过Dai的生成、流通及回收机制&lt;/li&gt;&#xA;&lt;li&gt;结合MKR持有者直接参与风险管理（Risk Management）的设计&lt;/li&gt;&#xA;&lt;li&gt;做市商（Keeper）在利益驱动下的自发调节&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这三重机制将共同确保Dai长期保持高效的价格稳定性。Maker社区创始人制定了审慎的治理路线图(governance roadmap)，既满足短期敏捷开发需求，又符合长期去中心化理念。当前发展路线聚焦于以负责任的方式推动Dai的规模化采用，实施路径兼具进取性与系统性。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;通俗解释抵押债务头寸cdp的计算&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;通俗解释：抵押债务头寸（CDP）的计算&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e9%80%9a%e4%bf%97%e8%a7%a3%e9%87%8a%e6%8a%b5%e6%8a%bc%e5%80%ba%e5%8a%a1%e5%a4%b4%e5%af%b8cdp%e7%9a%84%e8%ae%a1%e7%ae%97&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h4 id=&#34;1-什么是抵押债务头寸cdp&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1. 什么是抵押债务头寸（CDP）？&lt;/span&gt;&#xA;  &lt;a href=&#34;#1-%e4%bb%80%e4%b9%88%e6%98%af%e6%8a%b5%e6%8a%bc%e5%80%ba%e5%8a%a1%e5%a4%b4%e5%af%b8cdp&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;CDP（Collateralized Debt Position，抵押债务头寸）是 MakerDAO 系统的核心机制，类似于银行的“抵押贷款”。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;你存入抵押品（如 ETH）→ 借出 Dai（稳定币）&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;必须保持足够的抵押率&lt;/strong&gt;，否则会被清算（系统自动卖掉你的抵押品还债）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-cdp-的关键参数&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2. CDP 的关键参数&lt;/span&gt;&#xA;  &lt;a href=&#34;#2-cdp-%e7%9a%84%e5%85%b3%e9%94%ae%e5%8f%82%e6%95%b0&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;参数&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;解释&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;例子&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;抵押品价值（Collateral Value）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;你存入的资产（如 ETH）的当前市场价格&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1 ETH = $3,000&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;债务（Debt）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;你借出的 Dai 数量&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;借了 2,000 Dai&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;抵押率（Collateral Ratio）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;抵押品价值 ÷ 债务&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;3,000 / 2,000 = 150%&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;清算线（Liquidation Threshold）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;最低允许的抵押率（如 150%）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;低于 150% 会被清算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-如何计算-cdp-是否安全&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3. 如何计算 CDP 是否安全？&lt;/span&gt;&#xA;  &lt;a href=&#34;#3-%e5%a6%82%e4%bd%95%e8%ae%a1%e7%ae%97-cdp-%e6%98%af%e5%90%a6%e5%ae%89%e5%85%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;公式&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;$\text{抵押率} = \frac{\text{抵押品价值}}{\text{债务}} \times 100%$&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;你存入 &lt;strong&gt;1 ETH（价值 $3,000）&lt;/strong&gt;，借出 &lt;strong&gt;2,000 Dai&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;当前抵押率：$\frac{3000}{2000} \times 100% = 150%$&lt;/p&gt;&#xA;&lt;p&gt;（刚好达到最低要求，暂时安全）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;如果 ETH 价格下跌&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ETH 跌到 &lt;strong&gt;$2,500&lt;/strong&gt;，债务仍是 2,000 Dai。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;新抵押率：&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;$\frac{2500}{2000} \times 100% = 125% $&lt;/p&gt;&#xA;&lt;p&gt;（低于 150%，触发清算！）&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-清算会发生什么&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4. 清算会发生什么？&lt;/span&gt;&#xA;  &lt;a href=&#34;#4-%e6%b8%85%e7%ae%97%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;系统会自动拍卖你的抵押品（ETH），用拍卖得到的 Dai 还债。&lt;/li&gt;&#xA;&lt;li&gt;你还会被收取 &lt;strong&gt;清算罚金&lt;/strong&gt;（如 13%），剩余抵押品（如果有）会还给你。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;接上例&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;清算时，系统卖掉你的 1 ETH（$2,500），还掉 2,000 Dai 债务。&lt;/li&gt;&#xA;&lt;li&gt;罚金：13% × 2,000 Dai = 260 Dai&lt;/li&gt;&#xA;&lt;li&gt;最终债务：2,000 + 260 = 2,260 Dai&lt;/li&gt;&#xA;&lt;li&gt;剩余抵押品价值：2,500 - 2,260 = $240（还给你）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-如何避免清算&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;5. 如何避免清算？&lt;/span&gt;&#xA;  &lt;a href=&#34;#5-%e5%a6%82%e4%bd%95%e9%81%bf%e5%85%8d%e6%b8%85%e7%ae%97&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;增加抵押品：存入更多 ETH，提高抵押率。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例：再存入 0.2 ETH（$500），新抵押率 = (3,000 + 500) / 2,000 = 175%&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;偿还部分债务：还掉部分 Dai，降低债务。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例：还 500 Dai，新债务 = 1,500 Dai，新抵押率 = 3,000 / 1,500 = 200%&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;6-为什么-cdp-设计成这样&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;6. 为什么 CDP 设计成这样？&lt;/span&gt;&#xA;  &lt;a href=&#34;#6-%e4%b8%ba%e4%bb%80%e4%b9%88-cdp-%e8%ae%be%e8%ae%a1%e6%88%90%e8%bf%99%e6%a0%b7&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;保护系统&lt;/strong&gt;：确保 Dai 始终有足够抵押品支撑，避免坏账。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;保护借款人&lt;/strong&gt;：清算机制避免你欠下无限债务（类似股票融资的“平仓”）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;总结&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;总结&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%80%bb%e7%bb%93&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;CDP = 抵押贷款&lt;/strong&gt;，用 ETH 等资产借 Dai。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;抵押率是关键&lt;/strong&gt;：必须 &amp;gt;150%（或其他设定值），否则被清算。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;清算 = 强制卖抵押品还债&lt;/strong&gt;，并收罚金。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应对方法&lt;/strong&gt;：加抵押品或还部分 Dai。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这样设计让 MakerDAO 既安全又去中心化，类似银行的“抵押贷款”，但由代码自动执行规则。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;</description>
    </item>
    <item>
      <title>ETH 白皮书阅读</title>
      <link>https://nesl42.github.io/posts/202507-eth_white_paper/</link>
      <pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://nesl42.github.io/posts/202507-eth_white_paper/</guid>
      <category domain="https://nesl42.github.io/categories/technology/">Technology</category>
      <description>&lt;p&gt;[toc]&lt;/p&gt;&#xA;&lt;p&gt;Page last updated:2025年2月12日&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这篇介绍性论文最初由 &lt;a href=&#34;https://ethereum.org/zh/what-is-ethereum/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;以太坊&lt;/a&gt; 创始人 Vitalik Buterin 在 2014 年发表，前于 2015 年的项目正式发布时间。 值得一提的是，和其他社区驱动的开源软件项目一样，以太坊自发布以来一直不断发展。&lt;/p&gt;&#xA;&lt;p&gt;虽然已经过数年，但由于本文仍然可提供有用的参考并能够准确表述以太坊及其愿景，我们仍然在维护它。 若想了解以太坊的最新进展，以及以太坊协议的更新情况，我们推荐你阅读 &lt;a href=&#34;https://ethereum.org/zh/learn/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;本指南&lt;/a&gt; 。*&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ethereum.org/content/whitepaper/whitepaper-pdf/Ethereum_Whitepaper_-_Buterin_2014.pdf&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;寻求此白皮书早期版本或规范版本 [自 2014 年 12 月起] 的研究人员和学者应使用此 PDF。&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;中本聪 2009 年开发的比特币常被誉为资金和货币的一次革命性变革，作为数字资产的首个实例，它同时具有以下特点：没有实物或 &lt;a href=&#34;http://bitcoinmagazine.com/8640/an-exploration-of-intrinsic-value-what-it-is-why-bitcoin-doesnt-have-it-and-why-bitcoin-does-have-it/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;内在价值&lt;/a&gt; 支撑，也没有一个中心化的发行机构或控制者。 然而，比特币实验有另一个可以说是更重要的部分，即作为分布式共识工具的底层区块链技术，并且人们的注意力正迅速地开始转移到比特币的这个方面。 经常被提到的其他区块链技术应用包括：使用链上数字资产表示自定义货币和金融工具（“ &lt;a href=&#34;https://docs.google.com/a/buterin.com/document/d/1AnkP_cVZTCMLIzw4DvsW6M8Q2JC0lIzrTLuoWu2z1BE/edit&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;彩色币&lt;/a&gt; ”）、底层物理设备的所有权（“ &lt;a href=&#34;https://en.bitcoin.it/wiki/Smart_Property&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;智能资产&lt;/a&gt; ”）、非同质化资产例如域名（“ &lt;a href=&#34;http://namecoin.org/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;域名币&lt;/a&gt; ”），以及一些更复杂的应用，例如让数字资产由一段实现任意规则的代码（“ &lt;a href=&#34;http://www.fon.hum.uva.nl/rob/Courses/InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.best.vwh.net/idea.html&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;智能合约&lt;/a&gt; ”）甚至由基于区块链的“ &lt;a href=&#34;http://bitcoinmagazine.com/7050/bootstrapping-a-decentralized-autonomous-corporation-part-i/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;去中心化自治组织&lt;/a&gt; ”(DAO) 直接控制。 以太坊打算提供一种内置完全成熟的图灵完备编程语言的区块链，这种语言可用来创建“合约”，而合约可用于编码任意状态转换函数，让用户可以创建上述任何系统以及我们尚未想象到的许多其他内容，只需用几行代码编写出想实现的逻辑即可。&lt;/p&gt;&#xA;&lt;h2 id=&#34;比特币及现有概念简介&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;比特币及现有概念简介&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%af%94%e7%89%b9%e5%b8%81%e5%8f%8a%e7%8e%b0%e6%9c%89%e6%a6%82%e5%bf%b5%e7%ae%80%e4%bb%8b&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h3 id=&#34;历史&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;历史&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%8e%86%e5%8f%b2&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;去中心化数字货币的概念以及财产登记等其他应用已经存在了几十年。 1980 年代和 1990 年代的匿名电子现金协议主要依赖于称为 Chaumian 盲签名的密码学原语，提供了一种具有高度隐私性的货币，但这些协议基本上未能获得关注，因为它们依赖于中心化中介。 1998 年，戴伟 (Wei Dai) 的 &lt;a href=&#34;http://www.weidai.com/bmoney.txt&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;b-money&lt;/a&gt; 成为第一个提出通过解决计算难题来创造货币及去中心化共识等想法的协议，但该协议缺乏关于如何实际实施去中心化共识的细节。 2005 年，Hal Finney 引入了“ &lt;a href=&#34;https://nakamotoinstitute.org/finney/rpow/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;可重复使用的工作量证明&lt;/a&gt; ”这一概念，该系统将 b-money 的想法与 Adam Back 有计算难度的哈希现金难题相结合来创建加密货币的概念，但由于依赖可信计算作为后端，又一次未能做到完美。 2009 年，中本聪将通过公钥密码学管理所有权的成熟原语与用于跟踪货币所有者的共识算法相结合，首次真正意义上实现了一种去中心化货币，被称为“工作量证明”。&lt;/p&gt;&#xA;&lt;p&gt;工作量证明机制是该领域的一项突破，因为它同时解决了两个问题。 首先，它提供了一种简单且比较有效的共识算法，让网络中的节点能够全体对比特币账本状态的一组规范更新达成一致。 其次，它提供了一种允许自由进入共识过程的机制，解决了决定谁来影响共识的政治问题，同时防止了女巫攻击。 为此，在工作量证明中，将正式的参与壁垒（例如要求在特定清单上注册成为唯一实体）替换成经济壁垒，即共识投票过程中单个节点的权重与该节点的算力成正比。 此后，还提出了另一种称为_权益证明_的方法，节点权重与其货币持有量而非计算资源成正比；针对这两种方法相对优点的讨论不在本文范围内，但应该注意，这两种方法都可以作为加密货币的支柱。&lt;/p&gt;&#xA;&lt;h3 id=&#34;比特币是一个状态转换系统&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;比特币是一个状态转换系统&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%af%94%e7%89%b9%e5%b8%81%e6%98%af%e4%b8%80%e4%b8%aa%e7%8a%b6%e6%80%81%e8%bd%ac%e6%8d%a2%e7%b3%bb%e7%bb%9f&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-eth_white_paper/1.png&#39; alt=&#34;以太坊状态转换&#34; height=&#34;450&#34; width=&#34;1910&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;从技术角度讲，诸如比特币等加密货币账本可视作一种状态转换系统，该系统有一个“状态”，由全部现存比特币的所有权状态和一个“状态转换函数”组成，状态转换函数以状态和交易为输入并输出新状态作为结果。 例如，在标准的银行系统中，状态就是一个资产负债表，一笔交易是一个从A帐户向B帐户转账$X的请求，状态转换函数将从A帐户中减去$X，向B帐户增加$X。 如果A帐户的余额在第一步中小于$X，状态转换函数就会返回错误提示。 所以，可以如此定义：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;APPLY(S,TX) -&amp;gt; S&amp;#39; or ERROR&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面提到的银行系统中，状态转换函数如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;APPLY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Alice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Bob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$50&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;send $20 from Alice to Bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Alice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Bob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$70&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;APPLY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Alice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Bob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$50&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;send $70 from Alice to Bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ERROR&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比特币中的“状态”是指所有已铸造但尚未使用的货币（技术上称为“未使用的交易输出”或 UTXO）的集合，每个 UTXO 都有面额和所有者（由一个 20 字节的地址定义，本质上是一个加密公钥 &lt;!-- raw HTML omitted --&gt;[fn1]（注释编号）&lt;!-- raw HTML omitted --&gt; ）。 一个交易包括一个或多个输入以及一个或多个输出，每个输入都包含对现有 UTXO 的引用以及所有者地址相关的私钥创建的加密签名；每个输出都包含一个要添加到状态中的新 UTXO。&lt;/p&gt;&#xA;&lt;p&gt;状态转换函数 &lt;code&gt;APPLY(S,TX) -&amp;gt; S&#39;&lt;/code&gt; 的定义大体如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对于 &lt;code&gt;TX&lt;/code&gt; 中的每个输入：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果引用的 UTXO 不在 &lt;code&gt;S&lt;/code&gt; 范围内，则返回错误。&lt;/li&gt;&#xA;&lt;li&gt;如果提供的签名与 UTXO 的所有者不符合，则返回错误。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;如果所有输入 UTXO 面值总额小于所有输出 UTXO 面值总额，则返回错误。&lt;/li&gt;&#xA;&lt;li&gt;在移除所有输入 UTXO 且添加所有输出 UTXO 后，返回 &lt;code&gt;S&lt;/code&gt; 。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;第一步的第一部分防止交易发送者花费不存在的比特币，第二部分防止交易发送者花费其他人的比特币，第二步确保价值守恒。 为了用于支付，比特币协议如下。 假设Alice想给Bob发送11.7 BTC。 首先，Alice将寻找她拥有的一组总数至少为11.7 BTC的可用UTXO。 事实上，Alice不太可能正好有11.7 BTC；假设她能得到的最小数额是6+4+2=12。 所以，她可以创建一笔有三个输入和两个输出的交易。 第一个输出为11.7 BTC，所有者是Bob的地址，第二个输出为剩下的0.3 BTC找零，所有者是Alice自己。&lt;/p&gt;&#xA;&lt;h3 id=&#34;挖矿&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;挖矿&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%8c%96%e7%9f%bf&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-eth_white_paper/2.png&#39; alt=&#34;以太坊区块&#34; height=&#34;498&#34; width=&#34;1722&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果我们拥有可信任的中心化服务机构，状态转换系统可以很容易地实现；可以简单地将上述功能准确编码，使用中心化服务器的硬盘来记录状态。 然而，我们想把比特币构建成去中心化货币系统，为了确保每个人都同意交易的顺序，我们需要将状态转换系统与一个共识系统结合起来。 比特币的去中心化共识进程要求网络中的节点不断尝试将交易打包成“区块”。 网络计划大约每十分钟产生一个区块，每个区块包含一个时间戳、一个随机数、一个对上一个区块的引用（即哈希）和上一区块生成以来发生的所有交易列表。 随着时间推移就创建出了一个持续增长的区块链，它不断地更新，从而能够代表比特币账本的最新状态。&lt;/p&gt;&#xA;&lt;p&gt;检查一个区块是否有效的算法，如以下范式所示：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;检查该区块引用的上一个区块是否存在且有效。&lt;/li&gt;&#xA;&lt;li&gt;检查该区块的时间戳是否大于上一个区块 &lt;!-- raw HTML omitted --&gt;[fn2]（注释编号）&lt;!-- raw HTML omitted --&gt; 的时间戳并且在将来 2 小时以内&lt;/li&gt;&#xA;&lt;li&gt;检查区块上的工作量证明是否有效。&lt;/li&gt;&#xA;&lt;li&gt;令前一个区块末尾的态为 &lt;code&gt;S[0]&lt;/code&gt; 。&lt;/li&gt;&#xA;&lt;li&gt;假设 &lt;code&gt;TX&lt;/code&gt; 是该区块的交易列表，其中包含 &lt;code&gt;n&lt;/code&gt; 个交易。 对于 &lt;code&gt;0...n-1&lt;/code&gt; 中的所有 &lt;code&gt;i&lt;/code&gt; ，如果有任何应用程序返回错误，退出并返回 false，请设置 &lt;code&gt;S[i+1] = APPLY(S[i],TX[i])&lt;/code&gt; 。&lt;/li&gt;&#xA;&lt;li&gt;返回 true，并将 &lt;code&gt;S[n]&lt;/code&gt; 登记为该区块末尾的状态。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;本质上，区块中的每笔交易都必须提供一个有效的状态转换，从交易执行前的规范状态转换到某个新状态。 注意，状态并未编码到区块。它纯粹只是校验节点记住的抽象概念，只能被任意区块从创世状态开始，按顺序加上每一个区块的每一笔交易，（安全地）计算出当前状态。 另外，需要注意矿工将交易收录进区块的顺序。如果一个区块中有A、B两笔交易，B花费的是A创建的UTXO，如果A在B之前，这个区块是有效的，否则，这个区块无效。&lt;/p&gt;&#xA;&lt;p&gt;“工作量证明”是出现在上表而其他系统没有的验证条件。 具体验证方法为，对每个区块进行两次SHA256哈希处理，得到一个256位的数值，该数值必须小于不断动态调整的目标数值，本文写作时目标数值大约是2 &lt;!-- raw HTML omitted --&gt;187&lt;!-- raw HTML omitted --&gt; 。 工作量证明的目的是使创建区块有算力困难，从而阻止女巫攻击者恶意重新生成区块链。 因为 SHA256 被设计为完全不可预测的伪随机函数，所以创建有效区块的唯一方法就是反复试验，反复增加随机数并查看新哈希值是否匹配。&lt;/p&gt;&#xA;&lt;p&gt;当前的目标数值是~2 &lt;!-- raw HTML omitted --&gt;187&lt;!-- raw HTML omitted --&gt; ，网络必须平均尝试 ~2 &lt;!-- raw HTML omitted --&gt;69&lt;!-- raw HTML omitted --&gt; 次才能生成有效的区块。一般而言，比特币网络每隔2016个区块重新设定目标数值，从而保证网络中的节点平均每十分钟生成一个区块。 为了对矿工的计算工作进行激励，每一个成功生成区块的矿工有权在区块中包含一笔凭空发给他们自己12.5 BTC的交易。 另外，如果交易的输入额大于输出，差额部分就作为“交易费”付给矿工。 顺便提一下，这也是比特币发行的唯一机制，创世状态中并没有比特币。&lt;/p&gt;&#xA;&lt;p&gt;为了更好地理解挖矿的目的，让我们分析比特币网络出现恶意攻击者时会发生什么。 因为比特币的密码学基础是非常安全的，所以攻击者会选择攻击没有被密码学直接保护的部分：交易顺序。 攻击者的策略非常简单：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;向商家发送 100 个比特币以换取某种产品（最好是快速交付的数字商品）&lt;/li&gt;&#xA;&lt;li&gt;等待商品交付&lt;/li&gt;&#xA;&lt;li&gt;创建另一笔交易，将这 100 个比特币发送给自己&lt;/li&gt;&#xA;&lt;li&gt;试图让网络相信他对自己的交易是先发生的。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;一旦步骤 (1) 发生，几分钟后矿工将这笔交易收录到区块中，假设是编号为 270000 的区块。 大约一小时后，此区块后面将会有五个区块，每个区块间接地指向这笔交易，从而确认这笔交易。 这时卖家收到货款，并向买家发货。因为我们假设这是数字商品，交付将瞬间完成。 现在，攻击者创建另一笔交易，将相同的100BTC发送到自己的帐户。 如果攻击者只是单纯地向全网广播这一消息，该笔交易不会被处理；矿工将运行状态转换函数 &lt;code&gt;APPLY(S,TX)&lt;/code&gt; ，发现 &lt;code&gt;TX&lt;/code&gt; 要花费已经不在状态中的UTXO。 所以，攻击者会对区块链进行分叉，将第269个区块作为父区块重新生成第270个区块，在此区块中用新交易取代旧的。 因为区块数据是不同的，这要求重新进行工作量证明。 另外，攻击者的新版270区块有不同的哈希，原来的271到275的区块不指向它，所以原链和攻击者的新链是完全分离的。 规定，在发生区块链分叉时，最长链被认为是诚实的区块链，合法的矿工将会沿着原有的275区块挖矿，只有攻击者一人在新的270区块后挖矿。 攻击者为了使其区块链最长，他需要拥有比除了他以外的全网更多的算力来追赶（即“51%攻击”）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;默克尔树&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;默克尔树&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e9%bb%98%e5%85%8b%e5%b0%94%e6%a0%91&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-eth_white_paper/3.png&#39; alt=&#34;比特币简化支付确认&#34; height=&#34;606&#34; width=&#34;988&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;左：仅提供默克尔树上的少量节点已经足够给出分支的合法证明。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;右：对默克尔树任意部分进行改变的尝试最终都会导致链上某处不一致。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;比特币一个重要的可扩展特性是：它的区块存储在多层次数据结构中。 一个区块的哈希实际上只是区块头的哈希，区块头是一段约200字节的数据，包含时间戳、随机数、上个区块的哈希和默克尔树根的哈希，而默克尔树是一个存储了该区块所有交易的数据结构。 默克尔树是一种二叉树，由一组叶节点、一组中间节点和一个根节点构成。最下面是大量包含基础数据的叶节点，每个中间节点是其两个子节点的哈希，顶部的根节点也是其两个子节点的哈希。 默克尔树的目的是允许区块数据可以零散地传送：节点可以从一个源下载区块头，从其它源下载相关树的一小部分，而依然能够确认所有的数据都是正确的。 之所以如此是因为哈希向上传播：如果一个恶意用户尝试替换一个伪造的交易到树的底部，此改动将导致树的上层节点的改动，以及更上层节点的改动，最终导致根节点的改动以及区块哈希的改动，这样协议就会将其记录为一个完全不同的区块（几乎可以肯定是带着无效的工作量证明）。&lt;/p&gt;&#xA;&lt;p&gt;默克尔树协议可以说是比特币长期持续性的基础。 比特币网络中的一个全节点——存储和处理所有区块全部数据的节点，在2014年4月需要占用15GB的磁盘空间，而且还以每个月超过1GB的速度增长。 目前，对台式计算机来说尚可接受，但是手机已经负载不了如此巨大的数据了，未来只有商业机构和爱好者才会充当完整节点。 简化支付确认协议（SPV）允许另一种节点存在，这样的节点被称为“轻节点”，它下载区块头，使用区块头确认工作量证明，然后只下载与其交易相关的默克尔树分支。 这使得轻节点只要下载整个区块链的一小部分，就可以安全地确定任何一笔比特币交易的状态和帐户的当前余额。&lt;/p&gt;&#xA;&lt;h3 id=&#34;其它的区块链应用&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;其它的区块链应用&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%85%b6%e5%ae%83%e7%9a%84%e5%8c%ba%e5%9d%97%e9%93%be%e5%ba%94%e7%94%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;将区块链思想应用到其它领域的想法早就出现了。 2005 年，Nick Szabo 提出了“ &lt;a href=&#34;https://nakamotoinstitute.org/secure-property-titles/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;利用所有者权限确保财产权&lt;/a&gt; ”这一概念，该文件描述了“复制数据库技术的新进展”将如何允许基于区块链的系统存储谁拥有哪些土地的登记表，创建了一个包括宅基地、违法占有和佐治亚州土地税等概念的复杂框架。 然而，不幸的是在那时还没有实用的复制数据库系统，所以这个协议没有被付诸实践。 不过，自2009年比特币的去中心化共识开发成功以来，大量区块链的其它应用开始快速出现。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;域名币&lt;/strong&gt; - 创建于 2010 年， &lt;a href=&#34;https://namecoin.org/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;域名币&lt;/a&gt; 描述成去中心化的名称注册数据库最为恰当。 在 Tor、比特币和比特信等去中心化协议中，需要某种方式来识别帐户，以便其他人可以与帐户交互，但在所有现有解决方案中，唯一可用的标识符是伪随机哈希，如 &lt;code&gt;1LW79wp5ZBqaHW1jL5TCiBCrhQYtHagUWy&lt;/code&gt; 。 理想情况下，人们希望能够拥有名称的帐户，比如“george”。 但是，问题在于如果一个人可以创建名为“george”的帐户，那么其他人也可以按相同流程为自己注册“george”来冒充。 唯一的解决方案是“成果优先原则”范式，即第一个注册者成功后第二个注册者将失败，这个问题非常适合比特币共识协议。 域名币是应用这种想法的最早、最成功的名称注册系统实现。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;彩色币&lt;/strong&gt; - &lt;a href=&#34;https://docs.google.com/a/buterin.com/document/d/1AnkP_cVZTCMLIzw4DvsW6M8Q2JC0lIzrTLuoWu2z1BE/edit&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;彩色币&lt;/a&gt; 的作用是充当一种协议，让人们在比特币区块链上创建自己的数字货币，或者在货币只有一个单位的这种重要但琐碎情况下，创建数字代币。 在彩色币协议中，通过公开为特定的比特币 UTXO 分配一种颜色来“发行”新货币，并且该协议以递归方式将其他 UTXO 的颜色定义为与创建它们的交易所花费的输入的颜色相同（一些特殊规则适用于混合颜色输入的情况）。 这样，用户可以维护仅包含特定颜色 UTXO 的钱包，像发送普通比特币一样发送它们，并通过区块链回溯以确定他们收到的任何 UTXO 的颜色。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;元币&lt;/strong&gt; - 元币是想要拥有一个基于比特币的协议，使用比特币交易来存储元币交易，但具有不同的状态转换函数 &lt;code&gt;APPLY&#39;&lt;/code&gt; 。 因为元币协议无法阻止无效元币交易出现在比特币区块链中，所以增加了一条规则，如果 &lt;code&gt;APPLY&#39;(S,TX)&lt;/code&gt; 返回错误，该协议默认为 &lt;code&gt;APPLY&#39;( S,TX) = S&lt;/code&gt; 。 这为创建任意加密货币协议提供了一种简单的机制，可能有无法在比特币内部实现的高级功能，但开发成本非常低，因为比特币协议已经处理了挖矿和网络的复杂性。 元币已被用于实现某些类别的金融合约、名称注册和去中心化交易所。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;因此，一般而言，建立共识协议有两种方法：建立一个独立网络或把协议建立在比特币网络上。 前一种方法在域名币这样的应用中相当成功，但是该方法的实施非常困难，每个应用都要创建独立的区块链，建立并测试所有必须的状态转换函数和网络代码。 另外，我们预测去中心化共识技术应用将会服从幂律分布，大多数的应用太小不足以保证自身的安全，我们还注意到大量的去中心化应用程序，尤其是去中心化自治组织，需要进行应用之间的交互。&lt;/p&gt;&#xA;&lt;p&gt;另一方面，基于比特币的方法存在缺点，它没有继承比特币简化确认支付 (SPV) 的特性。 比特币可以实现简化确认支付，因为比特币可以用区块链深度代表有效性；某种程度上，当一笔交易的祖先们距离现在足够远时，就可以安全地认为它们是合法状态的一部分。 与之相反，基于比特币区块链的元币协议不能强迫区块链剔除违反元币协议的交易。 因此，完全安全的元币协议的简化支付确认需要后向扫描所有的区块，直到比特币区块链的初始点，以确认某一交易是否有效。 目前，所有基于比特币的元币协议的“轻”实施都依赖可信任的服务器提供数据，这对主要目的之一是消除信任需要的加密货币而言，可能是一个相当次优的结果。&lt;/p&gt;&#xA;&lt;h3 id=&#34;脚本&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;脚本&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e8%84%9a%e6%9c%ac&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;即使不对比特币协议进行扩展，它也能在一定程度上实现“智能合约”。 比特币的UTXO并非只能被公钥拥有，也可以被用基于堆栈的编程语言所编写的更加复杂的脚本所拥有。 在这一模式下，花费这样的UTXO，必须提供满足脚本的数据。 事实上，甚至基本的公钥所有权机制也是通过脚本实现的：脚本将椭圆曲线签名作为输入，验证该交易和拥有此UTXO的地址，如果验证成功则返回1，否则返回0。 其它更复杂的脚本用于各种不同的应用情况。 例如，人们可以创建要求集齐三个私钥签名中的两个才能进行交易确认的脚本（多重签名），对公司帐户、安全储蓄帐户和某些商业代理来说，这种脚本是非常有用的。 脚本也能用来支付解决计算问题的奖励，人们甚至可以创建这样的脚本“如果你能够提供你已经发送一定数额的狗币给我的简化确认支付证明，该比特币UTXO就是你的了”，本质上，比特币系统允许不同的加密货币进行去中心化交易。&lt;/p&gt;&#xA;&lt;p&gt;然而，比特币系统的脚本语言存在一些严重的限制：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;缺乏图灵完备性&lt;/strong&gt; - 也就是说，虽然比特币脚本语言支持一个很大的计算子集，但它基本上不支持所有计算。 缺少的主要类别是循环。 这样做是为了避免交易验证期间出现无限循环；理论上，对脚本程序员来说循环是一个可以克服的障碍，因为任何循环都可以通过简单地使用 if 语句多次重复执行底层代码来模拟，但这确实会导致脚本的空间效率非常低下。 例如，实现另一种椭圆曲线签名算法可能需要 256 次重复的乘法，而每次都需要单独写在代码里。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;价值盲&lt;/strong&gt; - UTXO 脚本无法对可提取金额进行精细控制。 例如，预言机合约的一个强有力的用例是对冲合约，其中 A 和 B 存入价值 $1000 的比特币，30 天后脚本将价值 $1000 的比特币发送给 A，其余的发送给 B。这需要预言机来确定 1 个比特币的美元价值，但即便如此，与现有完全集中化的解决方案相比，这在信任和基础设施要求方面仍是一个巨大的进步。 然而，由于 UTXO 要么是全部要么是零，要实现这一目标，只能使用非常低效的破解方法，即持有许多不同面额的 UTXO (例如，面额为 2 &lt;!-- raw HTML omitted --&gt;k&lt;!-- raw HTML omitted --&gt; 的 UTXO，每个 k 值都可以达到 30) 并让甲骨文选择发送给 A 和发送给 B 的 UTXO。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缺少状态&lt;/strong&gt; - UTXO 可以是已使用或未使用；用于保存任何其他内部状态的多阶段合约或脚本是没有机会出现的。 这使得多阶段期权合约、去中心化交易报价或两阶段加密承诺协议（这是安全计算赏金所必需的）难以创建。 这也意味着 UTXO 只能用于构建简单的一次性合约，而不是去中心化组织等更复杂的“有状态”合约，使得元协议难以实现。 二进制状态加之价值盲也意味着另一个重要应用 — 提款限制 — 是不可能实现的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;区块链盲&lt;/strong&gt; - UTXO 看不到区块链的数据，例如随机数、时间戳和上一个区块的哈希。 由于该脚本语言无法通过随机性来创造可能的价值，它在博彩和其他几个类别的应用受到了严重限制。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;至此，我们已经考察了在加密货币上建立高级应用的三种方法：建立一个新的区块链、在比特币区块链上使用脚本、在比特币区块链上建立元币协议。 建立新区块链的方法可以自由地实现任意的特性，但要付出开发时间、引导工作和安全性的代价。 使用脚本的方法容易实施和标准化，但是它的功能有限。元币协议尽管非常容易实现，但是存在扩展性差的缺陷。 在以太坊系统中，我们打算建立一个替代框架，使得开发更便捷、轻客户端性能更强大，同时允许应用程序共享经济环境和区块链安全性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;以太坊&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;以太坊&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%bb%a5%e5%a4%aa%e5%9d%8a&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;以太坊的目的是创建一个用于建立去中心化应用程序的替代协议，我们认为提供一套不同的折衷方案对大量去中心化应用程序非常有用，尤其是那些强调快速开发、小型和不常用应用的安全性，以及应用间高效交互能力的程序。 以太坊通过构建本质上是最终的抽象基础层来实现这一点：一种内置图灵完备编程语言的区块链，允许任何人编写智能合约和去中心化应用程序，并在其中设立他们自由定义的所有权规则、交易方式和状态转换函数。 域名币的主体框架只需要两行代码就可以实现，诸如货币和信誉系统等其它协议只需要不到二十行代码就可以实现。 智能合约，即包含价值、只有在满足特定条件时才能解锁的加密“盒子”，也可以在平台上构建，并且因为图灵完备性、价值知晓（value-awareness）、区块链知晓（blockchain-awareness）和多状态所增加的力量，而比比特币脚本所能提供的智能合约强大得多。&lt;/p&gt;&#xA;&lt;h3 id=&#34;以太坊帐户&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;以太坊帐户&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%bb%a5%e5%a4%aa%e5%9d%8a%e5%b8%90%e6%88%b7&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;在以太坊中，状态由称为“帐户”的对象组成，而每个帐户都有一个 20 字节的地址，状态转换是指帐户之间价值和信息的直接转移。 一个以太坊帐户包含四个字段：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;nonce&lt;/strong&gt; ，用于确保每笔交易只能处理一次的计数器&lt;/li&gt;&#xA;&lt;li&gt;帐户当前的 &lt;strong&gt;以太币余额&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;帐户的 &lt;strong&gt;合约代码&lt;/strong&gt; （若有）&lt;/li&gt;&#xA;&lt;li&gt;帐户的 &lt;strong&gt;存储&lt;/strong&gt; （默认为空）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以太币是以太坊内部的主要加密燃料，用于支付交易费。 通常有两类帐户：由私钥控制的 &lt;strong&gt;外部帐户&lt;/strong&gt; 以及由其合约代码控制的 &lt;strong&gt;合约帐户&lt;/strong&gt; 。 外部帐户没有代码，持有者可以通过创建和签署交易从外部帐户发送消息；在合约帐户中，每次合约帐户收到消息时，其代码都会激活，允许该帐户读取和写入内部存储，继而发送其他消息或创建合约。&lt;/p&gt;&#xA;&lt;p&gt;注意，以太坊中的“合约”不应被视为要“履行”或“遵守”的东西；相反，合约更像是存在于以太坊执行环境中的“自治代理”。当被交易或消息“触发”时，合约总是执行特定的代码段，并直接控制自已的以太币余额和键/值存储，以跟踪永久变量。&lt;/p&gt;&#xA;&lt;h3 id=&#34;消息和交易&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;消息和交易&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%b6%88%e6%81%af%e5%92%8c%e4%ba%a4%e6%98%93&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;在以太坊中，术语“交易”用来指代已签名的数据包，数据包存储着将要从外部帐户发送的消息。 交易包含：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息接收者&lt;/li&gt;&#xA;&lt;li&gt;用于识别发送者身份的签名&lt;/li&gt;&#xA;&lt;li&gt;从发送者转账到接收者的以太币金额&lt;/li&gt;&#xA;&lt;li&gt;一个可选数据字段&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;STARTGAS&lt;/code&gt; 值，表示允许交易运行的最大计算步骤数&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;GASPRICE&lt;/code&gt; 值，表示发送者每个计算步骤支付的费用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;前三个是任何加密货币都有的标准字段。 默认情况下，数据字段没有函数，但虚拟机有一个操作码，合约可以使用该操作码访问数据；以这样的用例为例：如果一个合约作为区块链上的域名注册服务，那么它可能希望将传送给它的数据解释为包含两个“字段”，第一个字段是要注册的域名，第二个字段将域名注册到 IP 地址。 合约将从消息数据中读取这些值，并将其适当地存储。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;STARTGAS&lt;/code&gt; 及 &lt;code&gt;GASPRICE&lt;/code&gt; 字段对于以太坊的反拒绝服务模型至关重要。 为了防止代码中出现无意或恶意的无限循环或其他计算浪费，要求每笔交易对代码可以执行的计算步骤设置一个限制。 计算的基本单位是燃料；通常，一个计算步骤消耗 1 份燃料，但某些操作会消耗更多燃料，因为它们在计算上更加昂贵或者增加了必须存储到状态中的数据量。 交易数据中的每个字节还需支付的费用为 5 份燃料。 收费系统的意图是要求攻击者相应支付他们消耗的每一种资源，包括计算、带宽和存储；因此，任何导致网络消耗更多这些资源的交易，都必须支付大致与增加量成比例的燃料费用。&lt;/p&gt;&#xA;&lt;h3 id=&#34;消息&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;消息&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%b6%88%e6%81%af&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;合约能够向其他合约发送“消息”。 消息是从未序列化的虚拟对象，只存在于以太坊执行环境中。 消息包含：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消息发送者（隐含的）&lt;/li&gt;&#xA;&lt;li&gt;消息接收者&lt;/li&gt;&#xA;&lt;li&gt;随消息一起转账的以太币金额&lt;/li&gt;&#xA;&lt;li&gt;一个可选数据字段&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;STARTGAS&lt;/code&gt; 值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本质上消息类似于交易，只是消息是由合约而非外部参与者产生的。 当前正在运行代码的合约执行 &lt;code&gt;CALL&lt;/code&gt; 操作码时会产生一条消息，该操作码就是用于产生并执行消息。 像交易一样，信息导致接收者帐户运行其代码。 因此，合约之间可以建立关系，方式完全与外部参与者之间建立关系相同。&lt;/p&gt;&#xA;&lt;p&gt;请注意，为交易或合约分配的燃料配额适用于该交易和所有子执行消耗的总燃料量。 例如，如果外部参与者 A 向 B 发送一笔配额为 1000 份燃料的交易，B 在向 C 发送消息需要消耗 600 份燃料，而 C 在内部执行需要消耗 300 份燃料才能返回结果，那么 B 再发送 100 份燃料就会消耗完燃料。&lt;/p&gt;&#xA;&lt;h3 id=&#34;以太坊状态转换函数&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;以太坊状态转换函数&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%bb%a5%e5%a4%aa%e5%9d%8a%e7%8a%b6%e6%80%81%e8%bd%ac%e6%8d%a2%e5%87%bd%e6%95%b0&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-eth_white_paper/4.png&#39; alt=&#34;以太币状态转换&#34; height=&#34;866&#34; width=&#34;1854&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以太坊状态转换函数 &lt;code&gt;APPLY(S,TX) -&amp;gt; S&#39;&lt;/code&gt; 可如下定义：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;检查交易格式是否正确（即具有正确数量的值）、签名是否有效以及 Nonce 值是否与发送者帐户中的 Nonce 值匹配。 若否，则返回错误。&lt;/li&gt;&#xA;&lt;li&gt;通过 &lt;code&gt;STARTGAS * GASPRICE&lt;/code&gt; 计算出交易费，并从签名中确定发送地址。 从发送者的帐户余额中减去费用，并增加发送者的 nonce 值。 如果帐户余额不足，则返回错误。&lt;/li&gt;&#xA;&lt;li&gt;初始化 &lt;code&gt;GAS = STARTGAS&lt;/code&gt; ，并根据交易中的字节数量为每个字节扣除相应数量的燃料。&lt;/li&gt;&#xA;&lt;li&gt;将交易数值从发送者帐户转移至接收帐户。 如果接收帐户尚不存在，则创建此帐户。 如果接收帐户是合约，运行该合约的代码，直到代码运行结束或燃料耗尽。&lt;/li&gt;&#xA;&lt;li&gt;如果由于发送者资金不足或者代码运行耗尽了燃料，而导致转账失败，则回滚除支付费用之外的所有状态变化，并将费用支付给矿工帐户。&lt;/li&gt;&#xA;&lt;li&gt;否则，将所有剩余燃料的费用退还发送者，并把为所消耗燃料而支付的费用发送给矿工。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;例如，假设合约的代码如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if !self.storage[calldataload(0)]:&#xA;  self.storage[calldataload(0)] = calldataload(32)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，合约代码实际上是用低级以太坊虚拟机代码编写的；为了清晰起见，此示例是用我们的一种高级语言 Serpent 编写的，它可以编译为以太坊虚拟机代码。 假设合约的存储一开始是空的，发送了一个价值为 10 个以太币的交易，消耗 2000 份燃料，燃料价格为 0.001 个以太币，并且数据包含 64 个字节，字节 0-31 代表数字 &lt;code&gt;2&lt;/code&gt; ，字节 32-63 代表字符串 &lt;code&gt;CHARLIE&lt;/code&gt; 。 在这种情况下，状态转换函数的执行过程如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;检查交易是否有效、格式是否正确。&lt;/li&gt;&#xA;&lt;li&gt;检查交易发送者是否至少有 2000 * 0.001 = 2 个以太币。 若有，则从发送者帐户中扣除 2 个以太币。&lt;/li&gt;&#xA;&lt;li&gt;初始化燃料 = 2000 份，假设交易长度为 170 个字节，每字节费用 5 份燃料，减去 850 份燃料，剩下 1150 份燃料。&lt;/li&gt;&#xA;&lt;li&gt;从发送者帐户再减去 10 个以太币并增加到合约帐户。&lt;/li&gt;&#xA;&lt;li&gt;运行代码。 在本例中，运行比较简单：代码检查是否使用合约的索引 &lt;code&gt;2&lt;/code&gt; 处的存储，若未使用，则通知；若使用，代码将索引 &lt;code&gt;2&lt;/code&gt; 处的存储设置为值 &lt;code&gt;CHARLIE&lt;/code&gt; 。 假设该运行花费了 187 份燃料，所以余下的燃料数量是 1150 - 187 = 963 份燃料。&lt;/li&gt;&#xA;&lt;li&gt;向发送者帐户增加 963 * 0.001 = 0.963 个以太币，同时返回产生的状态。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;如果交易的接收一端没有合约，那么总交易费就等于提供的 &lt;code&gt;GASPRICE&lt;/code&gt; 乘以交易的字节长度，并且和随交易发送的数据无关。&lt;/p&gt;&#xA;&lt;p&gt;注意，消息在回滚方面与交易相同：如果消息执行耗尽燃料，那么该消息的执行以及该执行触发的所有其他执行都会回滚，但父执行不需要回滚。 这意味着合约调用另一份合约是“安全的”，就好像 A 使用 G 份燃料调用 B，那么可以保证 A 的执行最多损耗 G 份燃料。 最后请注意，有一个创建合约的操作码 &lt;code&gt;CREATE&lt;/code&gt; ；它的执行机制通常类似于 &lt;code&gt;CALL&lt;/code&gt; ，不同之处在于执行的输出决定了新创建合约的代码。&lt;/p&gt;&#xA;&lt;h3 id=&#34;代码执行&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;代码执行&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%bb%a3%e7%a0%81%e6%89%a7%e8%a1%8c&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;以太坊合约中的代码用一种基于堆栈的低级字节码语言编写，被称为“以太坊虚拟机代码”或“EVM 代码”。 该代码由一系列字节组成，每个字节代表一种操作。 通常，代码执行是一个无限循环，即重复执行当前程序计数器（从零开始）处的操作，然后将程序计数器增加一，直到代码执行完毕或出现错误，或者检测到 &lt;code&gt;STOP&lt;/code&gt; 或 &lt;code&gt;RETURN&lt;/code&gt; 指令。 操作可以访问三种数据存储空间：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;堆栈&lt;/strong&gt; ，一种后进先出容器，值可以在其中入栈和出栈&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存&lt;/strong&gt; ，一种可无限扩展的字节数组&lt;/li&gt;&#xA;&lt;li&gt;合约的长期 &lt;strong&gt;存储&lt;/strong&gt; ，一个键/值存储。 与堆栈和内存会在计算结束后重置不同，存储将长期持续存在。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;代码可以访问传入消息的值、发送者信息和数据，可以访问区块头数据，而且代码还可以返回数据字节数组作为输出。&lt;/p&gt;&#xA;&lt;p&gt;以太坊虚拟机码的正式执行模型简单得令人吃惊。 当以太坊虚拟机运行时，其完整计算状态可以由元组 &lt;code&gt;(block_state, transaction, message, code, memory, stack, pc, gas)&lt;/code&gt; 来定义，其中 &lt;code&gt;block_state&lt;/code&gt; 是包含所有帐户的全局状态并包括余额和存储。 在每一轮执行开始时，可以通过调用 &lt;code&gt;code&lt;/code&gt; 的第 &lt;code&gt;pc&lt;/code&gt; 个字节（或者如果 &lt;code&gt;pc &amp;gt;= len(code)&lt;/code&gt; ，则调用 0）来找到当前指令，并且每条指令在元组影响方式方面都有自己的定义。 例如， &lt;code&gt;ADD&lt;/code&gt; 将两个项目出栈并将它们的和入栈，将 &lt;code&gt;gas&lt;/code&gt; 减少 1 并将 &lt;code&gt;pc&lt;/code&gt; 增加 1， &lt;code&gt;SSTORE&lt;/code&gt; 将顶部的两个项目出栈并将第二个项目插入到合约存储中第一个项目指定的索引处。 尽管有很多通过 JIT 编译来优化以太坊虚拟机执行的方法，但只需几百行代码就可以完成以太坊的基本实现。&lt;/p&gt;&#xA;&lt;h3 id=&#34;区块链和挖矿&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;区块链和挖矿&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%8c%ba%e5%9d%97%e9%93%be%e5%92%8c%e6%8c%96%e7%9f%bf&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-eth_white_paper/5.png&#39; alt=&#34;以太坊应用框图&#34; height=&#34;343&#34; width=&#34;1920&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以太坊区块链在许多方面与比特币区块链相似，但确实存在一些差异。 以太坊和比特币在区块链架构方面的主要区别在于，与比特币不同，以太坊区块包含交易列表和最新状态的副本。 此外，其他两个值、区块编号和难度也存储在区块中。 以太坊中的基本区块验证算法如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;检查被引用的前一个区块是否存在并有效。&lt;/li&gt;&#xA;&lt;li&gt;检查区块的时间戳是否大于被引用的前一个区块的时间戳，并且在将来 15 分钟以内。&lt;/li&gt;&#xA;&lt;li&gt;检查区块编号、难度、交易根、叔根和燃料限制（各种以太坊特定的低级概念）是否有效。&lt;/li&gt;&#xA;&lt;li&gt;检查区块上的工作量证明是否有效。&lt;/li&gt;&#xA;&lt;li&gt;令前一个区块末尾的态为 &lt;code&gt;S[0]&lt;/code&gt; 。&lt;/li&gt;&#xA;&lt;li&gt;令区块的交易列表为 &lt;code&gt;TX&lt;/code&gt; ，并包含 &lt;code&gt;n&lt;/code&gt; 笔交易。 对于 &lt;code&gt;0...n-1&lt;/code&gt; 中的所有 &lt;code&gt;i&lt;/code&gt; ，设置 &lt;code&gt;S[i+1] = APPLY(S[i],TX[i])&lt;/code&gt; 。 如果任何应用程序返回错误，或者直到此时区块中消耗的总燃料量超过 &lt;code&gt;GASLIMIT&lt;/code&gt; ，则返回错误。&lt;/li&gt;&#xA;&lt;li&gt;令 &lt;code&gt;S_FINAL&lt;/code&gt; 为 &lt;code&gt;S[n]&lt;/code&gt; ，但添加支付给矿工的区块奖励。&lt;/li&gt;&#xA;&lt;li&gt;检查状态 &lt;code&gt;S_FINAL&lt;/code&gt; 的默克尔树根是否等于区块头中提供的最终状态根。 如果等于，则该区块有效；否则该区块无效。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这种方法乍一看效率似乎极低，因为它需要存储每个区块的全部状态，但实际上效率应该与比特币相当。 原因是状态存储在树结构中，而且在添加每个区块后只需要更改树的一小部分。 因此一般来说，在两个相邻区块之间，树的绝大部分应该是相同的，因此数据可以用指针（即子树的哈希）存储一次和引用两次。 一种称为“帕特里夏树”的特殊类型的树用于实现此目的，它包括对默克尔树概念的修改，允许高效地插入和删除节点，而不仅仅是更改。 此外，由于所有状态信息都存在于最后一个区块内，因此无需存储整个区块链历史，如果可以应用于比特币，使用这种策略计算可以节省 5-20 倍空间。&lt;/p&gt;&#xA;&lt;p&gt;一个常见的问题是合约代码在物理硬件的“哪里”执行。 该问题有一个简单的答案：合约代码的执行过程是状态转换函数定义的一部分，而该函数是区块验证算法的一部分，因此如果将交易添加到区块 &lt;code&gt;B&lt;/code&gt; 中，由该交易产生的代码执行将在现在和将来由所有节点执行，由此下载并验证区块 &lt;code&gt;B&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;应用&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%ba%94%e7%94%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;通常，以太坊上有三种类型的应用。 第一类是金融应用，为用户提供更有效的方式来使用资金管理和签订合约。 包括子货币、金融衍生品、对冲合约、储蓄钱包、遗嘱，甚至最终包括某些类别的完整雇佣合约。 第二类是半金融应用，它们涉及金钱，但很大一部分功能也与资金无关；一个恰当的示例是针对解决计算难题的自动执行的赏金。 最后还有一些应用与金融毫不想关，例如在线投票和去中心化治理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;代币系统&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;代币系统&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%bb%a3%e5%b8%81%e7%b3%bb%e7%bb%9f&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;区块链上的代币系统有许多应用，从代表美元或黄金等资产的子货币到公司股票等等，单个代币可以代表智能资产、不可伪造的安全优惠券，甚至可代表作为激励积分系统并与传统价值完全没有联系的代币系统。 代币系统在以太坊中非常容易实现，让人吃惊。 要理解的重点是，从根本上讲，所有货币或代币系统都是具有这样一种操作的数据库：从 A 中减去 X 个单位并将 X 个单位添加给 B，条件是 (1) A 在交易之前至少有 X 个单位并且 (2) 交易由 A 批准。实现代币系统所需要做的就是将此逻辑实现到合约中。&lt;/p&gt;&#xA;&lt;p&gt;使用 Serpent 语言实现代币系统的基本代码如下所示：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def send(to, value):&#xA;  if self.storage[msg.sender] &amp;gt;= value:&#xA;    self.storage[msg.sender] = self.storage[msg.sender] - value&#xA;    self.storage[to] = self.storage[to] + value&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此代码本质上是本文档前面部分详细描述的“银行系统”状态转换函数的字面实现。 需要额外添加几行代码来规定在最初以及其他一些特殊情况下分配货币单位的初始步骤，理想情况下，应该添加一个函数让其他合约查询地址的余额。 但这就足够了。 理论上，基于以太坊的代币系统在作为子货币时可能具有另一个重要特征，该特征是基于比特币的链上元货币所缺乏的，那就是直接以该货币支付交易费的能力。 实现这一点的方式是：合约会保持一定数量的以太币余额，用来向发送者退还用于支付费用的以太币；合约也会通过收取费用来收集内部货币，并在持续不断的拍卖中转售货币，以此补充以太币余额。 因此，用户需要用以太币“激活”他们的帐户，但一旦帐户中有以太币，就可以重复使用，因为合约每次都会向帐户退还资金。&lt;/p&gt;&#xA;&lt;h3 id=&#34;金融衍生品和价值稳定的货币&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;金融衍生品和价值稳定的货币&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e9%87%91%e8%9e%8d%e8%a1%8d%e7%94%9f%e5%93%81%e5%92%8c%e4%bb%b7%e5%80%bc%e7%a8%b3%e5%ae%9a%e7%9a%84%e8%b4%a7%e5%b8%81&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;金融衍生品是“智能合约”最常见的应用，也是通过代码实现的最简单的应用之一。 实现金融合约的主要挑战在于，其中大多数合约都需要引用外部价格自动收报机；例如，一个非常理想的应用是对冲以太币（或其他加密货币）相对于美元波动的智能合约，但对冲需要合约知道以太币/美元的价值。 要实现这一点，最简单的方法是借助由特定方（例如纳斯达克）维护的“数据馈送”合约，这种合约的设计使得特定方能够根据需要更新合约并提供一个接口，允许其他合约向该合约发送消息并返回包含价格的响应。&lt;/p&gt;&#xA;&lt;p&gt;鉴于这一关键因素，对冲合约将如下所示：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;等待 A 方输入 1000 个以太币。&lt;/li&gt;&#xA;&lt;li&gt;等待 B 方输入 1000 个以太币。&lt;/li&gt;&#xA;&lt;li&gt;在存储中记录 1000 个以太币的美元价值（通过查询数据馈送合约计算得出），假设价值是 $x。&lt;/li&gt;&#xA;&lt;li&gt;30 天后，允许 A 或 B“重新激活”该合约，以便将价值 $x 的以太币（通过再次查询数据馈送合约获取新价格并且计算得出）发送给 A，剩余以太币发送给 B。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这种合约在加密货币交易中潜力巨大。 加密货币的主要问题之一是它的波动性。尽管许多用户和商家可能希望获得处理加密资产的安全性和便利性，但他们中许多人不希望面临在一天内资金价值损失 23% 的景象。 迄今为止，最常见的解决方案是发行人支持的资产；其想法是发行人创建一种子货币，他们有权发行和撤销这种子货币单位，并且发行人可以向给他们（离线）提供一个单位指定基础资产（例如黄金、美元）的任何人提供一个单位的货币。 然后，发行人承诺向返还一个单位加密资产的任何人提供一个单位基础资产。 这种机制使得任何非加密资产“升级”为加密资产，前提是发行人是可信的。&lt;/p&gt;&#xA;&lt;p&gt;但实际上，发行人并不总是值得信赖，在某些情况下，银行基础设施过于薄弱或过于不友好，以至于无法提供此类服务。 金融衍生品提供了一种替代方案。 在这种方案中，不是由单个发行人提供资金来支持资产，而是由一个去中心化的投机者市场承担了这一角色，他们押注加密参考资产（例如以太币）的价格会上涨。 与发行人不同，投机者无法在交易中违约，因为对冲合约托管他们的资金。 请注意，这种方法不是完全去中心化的，因为仍然需要一个可信来源提供价格自动收报机，但可以说在降低基础设施要求（与成为发行者不同，发布价格馈送不需要许可证并且可能被归类为自由言论）以及减少欺诈的可能性方面，这仍是一次巨大的改进。&lt;/p&gt;&#xA;&lt;h3 id=&#34;身份和信誉系统&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;身份和信誉系统&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e8%ba%ab%e4%bb%bd%e5%92%8c%e4%bf%a1%e8%aa%89%e7%b3%bb%e7%bb%9f&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;最早的替代加密货币 &lt;a href=&#34;http://namecoin.org/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;域名币&lt;/a&gt; 尝试使用类似比特币的区块链提供一种名称注册系统，通过该系统，用户可以在公共数据库中注册他们的姓名和其他数据。 主要用例是 &lt;a href=&#34;https://wikipedia.org/wiki/Domain_Name_System&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;DNS&lt;/a&gt; 系统，它将诸如“bitcoin.org”等域名（在域名币的情况下，“bitcoin.bit”）映射到一个 IP 地址。 其它用例包括电子邮件身份验证系统和可能更为先进的信誉系统。 下面是一个基础合约，它在以太坊中提供与域名币类似的名称注册系统：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def register(name, value):&#xA;  if !self.storage[name]:&#xA;    self.storage[name] = value&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;合约非常简单；合约就是以太坊网络中的一个数据库，可以向其中添加但不能修改或移除。 任何人都可以把名称注册为一个值，该注册将永久保存。 更复杂的名称注册合约还包含一个“函数子句”以及一种机制，前者允许其他合约查询它，后者允许名称的“所有者”（即第一个注册者）更改数据或转让所有权。 甚至可以在该合约上添加信誉和信任网络功能。&lt;/p&gt;&#xA;&lt;h3 id=&#34;去中心化文件存储&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;去中心化文件存储&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%8e%bb%e4%b8%ad%e5%bf%83%e5%8c%96%e6%96%87%e4%bb%b6%e5%ad%98%e5%82%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;过去几年，大批受欢迎的在线文件存储初创公司不断涌现，其中最著名的是 Dropbox。Dropbox 想让用户可以上传硬盘备份、提供备份存储服务并允许用户访问备份，而用户需按月付费。 然而，在这一点上，文件存储市场有时效率相对较低。在粗略了解各种现有解决方案后会发现，主流文件存储的每月价格比整个硬盘驱动器的成本还要高，特别是在被称为“恐怖谷”的 20-200 GB 级别，既没有免费额度也没有企业级折扣。 以太坊合约让去中心化文件存储生态系统得以发展，个人用户可以在该系统中将自己的硬盘租出去以获得少量收益，而未使用的空间可用来进一步降低文件存储的成本。&lt;/p&gt;&#xA;&lt;p&gt;该系统的基础性构件就是我们所谓的“去中心化 Dropbox 合约”。 该合约的工作原理如下。 首先，用户将需要存储的数据拆分成几个区块并对每个区块加密以保护隐私，然后以此构建一个默克尔树。 然后创建一个含以下规则的合约，对于每 N 个区块，合约将从默克尔树中选择一个随机索引（使用能够被合约代码访问的上一个区块的哈希作为随机性来源），然后给予第一个实体 X 个以太币，以提供具有简化支付确认（例如证明树中特定索引处区块的所有权）的交易。 当用户想重新下载他们的文件时，可以使用微支付通道协议（例如每 32 KB 支付 1 个 szabo）收回文件；最节省费用的方法是支付者不到最后不发布交易，而是每 32 KB 之后，用一个更划算的具有相同 nonce 的交易取代原来的交易。&lt;/p&gt;&#xA;&lt;p&gt;该协议的一个重要特点是，虽然似乎用户相信许多随机节点不会丢失文件，但可以通过以下方法将这种风险降低到接近于零：通过私钥共享将文件拆分成许多部分，并通过监控合约确定每一部分仍在某个节点中。 如果合约仍在支付款项，则提供了一个加密证明，证明有人仍在存储该文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;去中心化自治组织&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;去中心化自治组织&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%8e%bb%e4%b8%ad%e5%bf%83%e5%8c%96%e8%87%aa%e6%b2%bb%e7%bb%84%e7%bb%87&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;通常意义上“去中心化自治组织”是指拥有一定数量成员或股东的虚拟实体，他们大概拥有 67% 的大多数股权，有权使用实体的资金并修改其代码。 成员集体决定组织的资金分配方式。 去中心化自治组织的资金分配方式可以是奖金、薪资或者更奇特的机制等等，比如用内部货币去奖励工作。 这在本质上复制了传统公司或者非营利组织的合法手段，但仅使用加密区块链技术进行了加强。 目前为止，许多关于去中心化自治组织的讨论都围绕着去中心化自治公司的“资本家”模式，其中有可获得红利的股东和可交易的股份；作为替代方案，有一种可能被称为“去中心化自治社区”的实体将使所有成员在决策时拥有同等权利，并在增减成员时要求 67% 的现有成员多数同意。 由于每个人只能拥有一个成员资格，所以需要群体来集体执行。&lt;/p&gt;&#xA;&lt;p&gt;下面概括了如何用代码实现去中心化自治组织。 最简单的设计就是一段自动修改的代码，如果三分之二的成员同意更改，该代码就更改。 理论上代码是不可更改的，然而通过把代码片段放入不同的合约并将合约调用的地址存储在可更改的存储中，用户可以轻易解决这一问题，使代码事实上变得可修改。 在这种去中心化自治组织合约的简单实现中，有三种交易类型，可通过交易中提供的数据行区分：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;[0,i,K,V]&lt;/code&gt; 在索引 &lt;code&gt;i&lt;/code&gt; 处注册提案，以便将存储索引 &lt;code&gt;K&lt;/code&gt; 的地址更改为值 &lt;code&gt;V&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[1,i]&lt;/code&gt; 注册一张赞成提案 &lt;code&gt;i&lt;/code&gt; 的投票&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[2,i]&lt;/code&gt; 如果投票有足够票数，则确认提案 &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;合约为每一种交易都提供有子句。 它将维护所有开放存储更改的记录以及投票支持者的列表。 合约还包括所有成员的列表。 当任何存储更改获得三分之二成员投票赞成时，一个确认交易将执行这项更改。 更复杂的框架可能还有针对发送交易、增减成员等功能的内置投票功能，甚至可以提供 &lt;a href=&#34;https://wikipedia.org/wiki/Liquid_democracy&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;委任式民主&lt;/a&gt; 投票委托（即任何人都可以委托另外一个人代表自己投票，而且这种委托关系是可以传递的，如果 A 委托了 B，然后 B 委托了 C，那么 C 将决定 A 的投票）。 这种设计将使去中心化自治组织作为一个去中心化社区有机地成长，允许人们最终将筛选成员的任务委派给专家，但与“现有系统”不同，随着时间的推移，当个别社区成员改变他们的阵营时，专家可以很容易地加入或退出。&lt;/p&gt;&#xA;&lt;p&gt;另一个模型是去中心化公司，其中任何帐户可以拥有零份或多份股份，决策需要持有三分之二多数股份。 完整框架将包括资产管理功能，即能够出价购买或出售股份并且能够接受报价（最好是合约里有订单匹配机制）。 委托还提供委任制民主形式，普及了“董事会”的概念。&lt;/p&gt;&#xA;&lt;h3 id=&#34;更多应用&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;更多应用&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%9b%b4%e5%a4%9a%e5%ba%94%e7%94%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1. 储蓄钱包&lt;/strong&gt; 。 假设 Alice 想安全地保管她的资金，但她担心自己的私钥丢失或被破解。 她把以太币放到和银行 Bob 签订的一个合约里，如下所示：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Alice 每天最多可以单独提取 1% 的资金。&lt;/li&gt;&#xA;&lt;li&gt;Bob 每天最多可以单独提取 1% 的资金，但 Alice 可以用她的密钥创建一个交易取消 Bob 的提取权限。&lt;/li&gt;&#xA;&lt;li&gt;Alice 和 Bob 一起可以任意提取资金。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;通常，每天 1% 的额度对于 Alice 足够了，如果 Alice 想提取更多资金，她可以联系 Bob 寻求帮助。 如果 Alice 的密钥被破解，她可以立即找到 Bob，帮她将资金转移到一个新合约里。 如果 Alice 丢失了密钥，Bob 最终会取出资金。 如果最终发现 Bob 是恶意的，她可以取消他的提取权限。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. 作物保险&lt;/strong&gt; 。 用户可以轻松地制订金融衍生品合约，但使用的是天气而不是任何价格指数的数据馈送。 如果爱荷华州的一位农民购买了一项金融衍生品，该产品基于爱荷华的降雨情况进行反向赔付，那么如果遇到干旱，该农民将自动收到赔付资金，而且如果降雨充沛，他会很开心，因为他的作物收成会很好。 通常，这种保险可以扩展到自然灾害保险。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;3. 去中心化数据馈送&lt;/strong&gt; 。 对于金融差价合约，实际上有可能通过一种名为“ &lt;a href=&#34;http://blog.ethereum.org/2014/03/28/schellingcoin-a-minimal-trust-universal-data-feed/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;谢林币&lt;/a&gt; ”的协议将数据馈送去中心化。 谢林币的基本工作原理如下。N 个相关方都向系统输入给定数据的值（以太币/美元价格），对这些值进行排序，在第 25 和第 75 百分位之间的每个人都会得到一个代币作为奖励。 每个人都有动力提供其他人都会提供的答案，而唯一能让众多参与者实际达成一致的值是显而易见的：真相。 这样就创建了一种去中心化的协议，它理论上可以提供任何数量的值，包括以太币/美元的价格、柏林的温度、甚至某个硬计算的结果。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;4. 智能多重签名托管&lt;/strong&gt; 。 比特币允许多重签名交易合约，例如，提供了给定五个密钥中的三个便可以使用资金。 以太坊允许更精细的控制；例如，提供五个密钥中的四个可以使用任意数额的资金，提供五个密钥中的三个可以每天最多使用 10% 的资金，提供五个密钥中的两个可以每天最多使用 0.5% 的资金。 此外，以太坊的多重签名是异步的 — 双方可以在不同时间在区块链上注册他们的签名，最后一个签名将自动发送交易。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;5. 云计算&lt;/strong&gt; 。 以太坊虚拟机技术还可以用来创建一个可验证的计算环境，让用户可以要求他人执行计算，然后有选择地索要证明，证实计算在某些随机选定的检查点处正确完成。 这就可以创建一个云计算市场，任何用户都可以用他们的台式机、笔记本电脑或专用服务器来参与，并且抽查与保证金双管齐下确保系统是值得信赖的（即节点不能通过欺骗获利）。 但是，这样的系统可能并不适合所有任务；例如，需要进行大量进程间通信的任务无法在大型节点云上轻易实现。 然而，其他任务则更容易实现并行；例如 SETI@home、folding@home 和遗传算法等项目可以方便地在这类平台上实现。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;6. 点对点赌博&lt;/strong&gt; 。 任意数量的点对点赌博协议都可以在以太坊区块链上实现，例如 Frank Stajano 和 Richard Clayton 的 &lt;a href=&#34;http://www.cl.cam.ac.uk/~fms27/papers/2008-StajanoCla-cyberdice.pdf&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;Cyberdice&lt;/a&gt; 。 最简单的赌博协议实际上只是一种关于下一个区块哈希的差价合约，并且可以在其基础上创建更高级的协议，创建接近零费用且无法作弊的赌博服务。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;7. 预测市场&lt;/strong&gt; 。 如果有预言机或谢林币，预测市场也很容易实现，预测市场与谢林币一起有可能被证明是 &lt;a href=&#34;http://hanson.gmu.edu/futarchy.html&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;futarchy&lt;/a&gt; 的第一个主流应用，作为去中心化组织的治理协议。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;8. 链上去中心化市场&lt;/strong&gt; ，基于身份和信誉系统。&lt;/p&gt;&#xA;&lt;h2 id=&#34;杂项和关注&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;杂项和关注&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%9d%82%e9%a1%b9%e5%92%8c%e5%85%b3%e6%b3%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h3 id=&#34;改进版-ghost-协议的实现&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;改进版 GHOST 协议的实现&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%94%b9%e8%bf%9b%e7%89%88-ghost-%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%ae%9e%e7%8e%b0&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;“贪婪最重可观察子树”(GHOST) 协议是由 Yonatan Sompolinsky 和 Aviv Zohar 在 &lt;a href=&#34;https://eprint.iacr.org/2013/881.pdf&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;2013 年 12 月&lt;/a&gt; 首次提出的一项创新。 提出 GHOST 的动机是，具有快速确认时间的区块链目前由于过时率高而安全性降低 — 因为区块需要一定的时间才能通过网络传播，如果矿工 A 开采了一个区块，然后矿工 B 碰巧在矿工 A 的区块传播到 B 之前开采了另一个区块，那么矿工 B 的区块最终会被作废，不会增加网络安全。 此外，还有一个中心化问题：如果矿工 A 是一个拥有 30% 算力的矿池，而 B 拥有 10% 算力，那么 A 将面临 70% 的时间生产陈腐区块的风险（因为在其他 30% 的时间 A 产生了最后一个区块，所以会立即获得挖矿数据），而 B 将面临 90% 的时间生产陈腐区块的风险。 因此，如果区块间隔短到足以使过时率较高，则 A 将仅仅凭借其规模而显着提高效率。 结合这两种影响，快速产生区块的区块链很可能造就一个拥有足够高比例网络算力的矿池，从而对挖矿过程拥有事实上的控制。&lt;/p&gt;&#xA;&lt;p&gt;正如 Sompolinsky 和 Zohar 所描述的，GHOST 通过在计算哪条链“最长”时包含陈腐区块来解决第一个问题 - 网络安全降低；也就是说，在计算哪个区块具有最大的总工作量证明支持它时，不仅区块的父块和更远的祖先，而且该区块祖先（在以太坊行话中称为“叔块”）的陈腐子代也都被添加到计算中。 为了解决第二个问题 - 中心化偏差，我们跳出了 Sompolinsky 和 Zohar 描述的协议范畴，并且还为陈腐区块提供区块奖励：陈腐区块获得其基础奖励的 87.5%，而包含陈腐区块的侄块获得剩余的 12.5%。 不过，交易费不奖励给叔块。&lt;/p&gt;&#xA;&lt;p&gt;以太坊实现了一个简化版的 GHOST 协议，它仅仅深入七个层级。 具体而言，它的定义如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个区块必须指定一个父块，并且必须指定零个或多个叔块&lt;/li&gt;&#xA;&lt;li&gt;包含在区块 B 中的叔块必须具有以下属性：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;它必须是区块 B 的第 k 代祖先的直系子代，其中 &lt;code&gt;2 &amp;lt;= k &amp;lt;= 7&lt;/code&gt; 。&lt;/li&gt;&#xA;&lt;li&gt;它不能是 B 的祖先&lt;/li&gt;&#xA;&lt;li&gt;叔块必须是有效的区块头，但不需要是之前验证过的甚至是有效的区块&lt;/li&gt;&#xA;&lt;li&gt;叔块必须不同于前面区块中包含的所有叔块，并且不同于同一区块中包含的所有其他叔块（非双重包含）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;对于区块 B 中的每个叔块 U，区块 B 的矿工获得额外 3.125% 的铸币奖励，而叔块 U 的矿工获得 93.75% 的标准铸币奖励。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这种限制版的 GHOST 协议，最多只能包含 7 代叔块，采用它有两个原因。 首先，无限制 GHOST 协议让计算给定区块的哪些叔块有效时过于复杂。 其次，无限制 GHOST 协议采用了以太坊中使用的补偿，取消了促使矿工在主链而不是公共攻击者的链上挖矿的激励措施。&lt;/p&gt;&#xA;&lt;h3 id=&#34;费用&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;费用&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e8%b4%b9%e7%94%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;由于发布到区块链中的每笔交易都会给网络带来下载和验证成本，因此需要一些监管机制（通常涉及交易费）以防滥用。 比特币中使用的默认方法是收取完全自愿性质的费用，依靠矿工充当守门人并设置动态最低费用。 这种方法在比特币社区中非常受欢迎，特别是因为它是“基于市场的”，允许由矿工和交易发送者之间的供需决定价格。 然而，这种思路的问题在于，交易处理并不符合市场规律。尽管将交易处理解释为矿工向发送者提供的服务直观上很有吸引力，但实际上矿工收录的每笔交易都需要由网络中的每个节点处理，因此绝大部分交易处理成本由第三方承担，而不是由决定是否收录交易的矿工承担。 因此，公地悲剧的问题很可能发生。&lt;/p&gt;&#xA;&lt;p&gt;然而结果却是，基于市场机制中的这个缺陷，在给出一个不准确的特定简化假设时，会神奇地自我抵消。 论证如下。 假设：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;交易导致 &lt;code&gt;k&lt;/code&gt; 个操作，将提供奖励 &lt;code&gt;kR&lt;/code&gt; 给收录它的任何矿工，其中 &lt;code&gt;R&lt;/code&gt; 由发送者设置， &lt;code&gt;k&lt;/code&gt; 和 &lt;code&gt;R&lt;/code&gt; 事先（大体上）对矿工可见。&lt;/li&gt;&#xA;&lt;li&gt;操作在任何节点的处理成本均为 &lt;code&gt;C&lt;/code&gt; （即所有节点效率相同）&lt;/li&gt;&#xA;&lt;li&gt;有 &lt;code&gt;N&lt;/code&gt; 个挖矿节点，每个节点的处理能力完全相同（即为总处理能力的 &lt;code&gt;1/N&lt;/code&gt; ）&lt;/li&gt;&#xA;&lt;li&gt;没有不挖矿的完整节点。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;如果预期奖励大于成本，矿工将愿意处理交易。 因此，预期奖励是 &lt;code&gt;kR/N&lt;/code&gt; ，因为矿工有 &lt;code&gt;1/N&lt;/code&gt; 几率处理下一个区块，而矿工的处理成本仅仅是 &lt;code&gt; kC&lt;/code&gt; 。 所以，当 &lt;code&gt;kR/N &amp;gt; kC&lt;/code&gt; 或者 &lt;code&gt;R &amp;gt; NC&lt;/code&gt; 时，矿工将会收录交易。 请注意， &lt;code&gt;R&lt;/code&gt; 是发送者提供的每个操作的费用，因此是发送者从交易中获得的收益的下限， &lt;code&gt;NC&lt;/code&gt; 是整个网络共同处理一个操作的成本。 因此，矿工有动力仅收录那些总实际收益超过成本的交易。&lt;/p&gt;&#xA;&lt;p&gt;然而，现实中这些假设会存在几个重要偏差：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;与其他验证节点相比，矿工处理交易的成本确实更高，因为额外的验证时间会延迟区块传播，因而增加区块变陈腐的几率。&lt;/li&gt;&#xA;&lt;li&gt;确实存在不挖矿的完整节点。&lt;/li&gt;&#xA;&lt;li&gt;实际中挖矿能力的分配最终可能极端不平等。&lt;/li&gt;&#xA;&lt;li&gt;热衷于破坏网络的投机者、政敌和疯子确实存在，他们可以巧妙地设置合约，使得他们的成本远低于其他验证节点支付的成本。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;(1) 让矿工趋向于收录更少的交易，并且 (2) 增加 &lt;code&gt;NC&lt;/code&gt; ；因此，这两种作用会相互抵消 一部分 。 &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;如何抵消？ &lt;!-- raw HTML omitted --&gt;opens in a new tab&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; (3) 和 (4) 是主要问题，为了解决它们，我们简单地制订了一个 浮动上限：没有区块能够包含比 &lt;code&gt;BLK_LIMIT_FACTOR&lt;/code&gt; 乘以长期指数移动平均值更多的操作数。 具体如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;blk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oplimit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;blk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oplimit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;EMAFACTOR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;opcount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BLK_LIMIT_FACTOR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;EMA_FACTOR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;BLK_LIMIT_FACTOR&lt;/code&gt; 和 &lt;code&gt;EMA_FACTOR&lt;/code&gt; 是常量，暂时设置为 65536 和 1.5，但可能会在进一步分析后更改。&lt;/p&gt;&#xA;&lt;p&gt;还有一个因素会抑制比特币中的大区块大小：大区块将需要更长时间来传播，因此变陈腐的概率更高。 在以太坊中，燃料消耗量高的区块也可能需要更长的传播时间，因为它们的物理大小更大，而且因为它们需要更长时间来处理交易状态转换以进行验证。 这种延迟抑制因素在比特币中是一个重要的考虑因素，但在以太坊中由于 GHOST 协议而较少考虑；因此，依靠受监管的区块限制可提供更稳定的基线。&lt;/p&gt;&#xA;&lt;h3 id=&#34;计算和图灵完备&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;计算和图灵完备&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e8%ae%a1%e7%ae%97%e5%92%8c%e5%9b%be%e7%81%b5%e5%ae%8c%e5%a4%87&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;重要的一点是，以太坊虚拟机是图灵完备的；这意味着以太坊虚拟机代码可以对任何设想可执行的计算进行编码，包括无限循环。 以太坊虚拟机代码以两种方式实现循环。 首先，使用一个 &lt;code&gt;JUMP&lt;/code&gt; 指令，允许程序跳回至代码中的前一个位置，还使用一个 &lt;code&gt;JUMPI&lt;/code&gt; 指令进行条件跳转，允许诸如 &lt;code&gt;while x &amp;lt; 27: x = x * 2&lt;/code&gt; 之类的语句。 其次，合约可以调用其他合约，有可能通过递归进行循环。 这很自然地导致了一个问题：恶意用户能够通过迫使矿工和完整节点进入无限循环而不得不关机吗？ 这个问题的出现源于计算机科学中的一个难题，称为停机问题：在一般情况下，没有办法知道一个特定的程序是否会停止运行。&lt;/p&gt;&#xA;&lt;p&gt;正如状态转换部分所述，我们的解决方案要求交易设置一个允许执行的最大计算步骤数，如果超过执行时间，计算就会被回滚，但仍要支付费用。 消息的工作原理相同。 为显示我们解决方案背后的动机，请看下面的示例：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;攻击者创建一个运行无限循环的合约，然后向矿工发送激活该循环的交易。 矿工将处理该交易，运行无限循环直到燃料耗尽。 即使执行耗尽了燃料并中途停止，交易仍然有效，矿工仍然向攻击者索取每个计算步骤的费用。&lt;/li&gt;&#xA;&lt;li&gt;攻击者创建一个非常长的无限循环，目的是迫使矿工持续计算很长时间，以至于计算结束时，将有更多区块产生出来，这样矿工就不可能通过收录该交易来索取费用。 然而，攻击者需要为 &lt;code&gt;STARTGAS&lt;/code&gt; 提交一个值，限制执行可以进行的计算步骤数，因此矿工将提前知道该计算将进行相当多的步骤数。&lt;/li&gt;&#xA;&lt;li&gt;攻击者看到一个合约，其中的代码形式为 &lt;code&gt;send(A,contract.storage[A]); contract.storage[A] = 0&lt;/code&gt; ，然后发送一个交易，但燃料只够运行第一步而不足以运行第二步（即进行提款但不让余额减少）。 合约作者无需担心防卫此类攻击，因为如果执行中途停止，更改会被回滚。&lt;/li&gt;&#xA;&lt;li&gt;金融合约使用九个专有数据馈送的中位数，以便最大限度降低风险。 攻击者接管其中一个数据馈送，该数据馈送设计为可通过去中心化自治组织部分描述的变量-地址-调用机制修改，并将其转换为运行无限循环，从而强制任何从金融合约索取资金的尝试都因燃料耗尽而中止。 然而，金融合约可以为消息设置一个燃料限制，防止这个问题发生。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;图灵完备的替代方案是图灵不完备，其中 &lt;code&gt;JUMP&lt;/code&gt; 和 &lt;code&gt;JUMPI&lt;/code&gt; 不存在，并且在任何给定时间每个合约只允许有一个副本存在于调用堆栈内。 在这样的系统里，上述收费系统和关于我们解决方案效果的不确定性可能都是不需要的，因为执行一个合约的成本将被它的大小决定。 此外，图灵不完备甚至不是一个很大的限制；在我们内部构想的所有合约示例中，到目前为止只有一个需要循环，甚至那个循环也可以通过将一行代码重复 26 次来消除。 考虑到图灵完备带来的严重影响和有限的益处，为什么不简单地使用一种图灵不完备语言呢？ 然而，在现实中，图灵不完备还远远不能有效地解决问题。 要想知道原因，请思考以下合约：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C0: call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C1: call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C2: call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C49: call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C50&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C50&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C50: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;run one step of a program and record the change in storage&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，向 A 发送一笔交易。这样，在 51 笔交易中，我们有一个合约需要进行多达 2 &lt;!-- raw HTML omitted --&gt;50&lt;!-- raw HTML omitted --&gt; 个计算步骤。 矿工可以尝试提前检测这种逻辑炸弹，方法是为每个合约维护一个值，指定合约可以进行的最大计算步骤数，然后对递归调用其他合约的合约进行计算，但是这需要矿工禁止创建其他合约的合约（因为上面 26 个合约的创建和执行可以很容易地汇集到一个单独合约内）。 另一个问题是，消息的地址字段是一个变量，所以在一般情况下，甚至不可能提前知道某个合约将调用哪些其他合约。 于是，最终我们有了一个惊人的结论：图灵完备的管理惊人地容易，而在缺乏同样的控制时图灵不完备的管理惊人地困难，那为什么不直接让协议图灵完备呢？&lt;/p&gt;&#xA;&lt;h3 id=&#34;货币和发行&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;货币和发行&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e8%b4%a7%e5%b8%81%e5%92%8c%e5%8f%91%e8%a1%8c&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;以太坊网络包括自己的内置货币以太币，以太币扮演双重角色：提供一个主要流动资金层，实现各种数字资产之间的高效交易；更重要的是，提供一种支付交易费的机制。 为了方便起见并避免将来出现争议（参考比特币当前的 mBTC、uBTC、satoshi 争论），不同面值的名称将提前设置如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1: wei&lt;/li&gt;&#xA;&lt;li&gt;10 &lt;!-- raw HTML omitted --&gt;12&lt;!-- raw HTML omitted --&gt; ：Szabo&lt;/li&gt;&#xA;&lt;li&gt;10 &lt;!-- raw HTML omitted --&gt;15&lt;!-- raw HTML omitted --&gt; ：finney&lt;/li&gt;&#xA;&lt;li&gt;10 &lt;!-- raw HTML omitted --&gt;18&lt;!-- raw HTML omitted --&gt; ：ETH&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这应该被视为“美元”和“美分”或“BTC”和“satoshi”概念的扩展版本。 在不久的将来，我们期望“ETH”用于普通交易，“finney”用于微型交易，“szabo”和“wei”可以在围绕费用和协议实现的技术讨论中使用；其余的面额可能会在以后变得有用，但目前不应包含在客户端中。&lt;/p&gt;&#xA;&lt;p&gt;发行模型如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以太币将以货币销售的形式发行，价格为一个比特币可购买 1000-2000 个以太币，这种机制旨在为以太坊组织筹资和支付开发费用，且已被其他平台（如 Mastercoin 和 NXT）成功应用。 早期的购买者将从较大的折扣中获益。 发售所得的比特币将全部用来支付开发者的薪资和奖金，并用来投资以太坊和加密货币生态系统中的各种营利和非营利项目。&lt;/li&gt;&#xA;&lt;li&gt;0.099倍的发售总量（60102216 个以太币）将分配给以太坊组织，以补偿早期贡献者，并用以太币计价的方式支付创世块诞生前的开销。&lt;/li&gt;&#xA;&lt;li&gt;0.099 倍的发售总量将作为长期储备金保留。&lt;/li&gt;&#xA;&lt;li&gt;发售后，将永久性地每年为矿工分配 0.26 倍的发售总量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;分组&lt;/th&gt;&#xA;          &lt;th&gt;启动时&lt;/th&gt;&#xA;          &lt;th&gt;一年后&lt;/th&gt;&#xA;          &lt;th&gt;5 年后&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;货币单位&lt;/td&gt;&#xA;          &lt;td&gt;1.198X&lt;/td&gt;&#xA;          &lt;td&gt;1.458X&lt;/td&gt;&#xA;          &lt;td&gt;2.498X&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;购买者&lt;/td&gt;&#xA;          &lt;td&gt;83.5%&lt;/td&gt;&#xA;          &lt;td&gt;68.6%&lt;/td&gt;&#xA;          &lt;td&gt;40.0%&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;已支用的预售准备金&lt;/td&gt;&#xA;          &lt;td&gt;8.26%&lt;/td&gt;&#xA;          &lt;td&gt;6.79%&lt;/td&gt;&#xA;          &lt;td&gt;3.96%&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;已使用的售后准备金&lt;/td&gt;&#xA;          &lt;td&gt;8.26%&lt;/td&gt;&#xA;          &lt;td&gt;6.79%&lt;/td&gt;&#xA;          &lt;td&gt;3.96%&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;矿工&lt;/td&gt;&#xA;          &lt;td&gt;0%&lt;/td&gt;&#xA;          &lt;td&gt;17.8%&lt;/td&gt;&#xA;          &lt;td&gt;52.0%&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;长期供应增长率百分比&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;长期供应增长率（百分比）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e9%95%bf%e6%9c%9f%e4%be%9b%e5%ba%94%e5%a2%9e%e9%95%bf%e7%8e%87%e7%99%be%e5%88%86%e6%af%94&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-eth_white_paper/6.png&#39; alt=&#34;以太坊通货膨胀&#34; height=&#34;540&#34; width=&#34;1030&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;尽管采用了线性发行方式，然而和比特币一样，以太币的长期供应增长率也趋于零。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;上述模型提供了两个主要选项：(1) 捐赠池的存在和规模，以及 (2) 永久增长的线性供应的存在，而比特币采用了限制供应的方法。 捐赠池存在的理由如下。 如果捐赠池不存在，并且线性发行量减少到总发售量的 0.217 倍以实现相同的通货膨胀率，那么以太币总量将减少 16.5％，而每个单位的价值将增加 19.8％。 因此为了均衡，将会多发售 19.8% 的以太币，所以每个单位的价值将再次与以前完全一样。 之后，该组织还将拥有 1.198 倍的比特币，可以考虑将其分成两部分：原有的比特币和增加的 0.198 倍比特币。 因此，这种情况_完全等同于_捐赠，但有一个重要区别：该组织仅持有比特币，因而没有动力支持以太币单位的价值。&lt;/p&gt;&#xA;&lt;p&gt;永久性线性供应增长模型降低了有些人认为比特币财富过度集中的风险，并为生活在当前和未来的人提供了获取货币单位的公平机会，同时又保留了让人获取并持有以太币的强效激励措施，因为长期来看，用百分比表示的“供应增长率”将趋于零。 我们还推测，由于加密货币总是会因为不小心、死亡等原因而丢失，而加密货币的损失可以被模拟为每年总供应量的百分比，因此流通中的货币总供应量实际上最终会稳定在一个等于每年发行量除以损失率的数值上（例如，在损失率为 1% 时，一旦供应量达到 26 倍，那么每年将有 0.26 倍被开采，0.26 倍丢失，形成一个平衡点）。&lt;/p&gt;&#xA;&lt;p&gt;注意，未来以太坊可能过渡到权益证明模型以确保安全，将每年发行量降低到 0 至 0.05 倍之间。 如果以太坊组织失去资助或出于任何其他原因而消失，我们将开放一个“社区合约”：任何人都有权创建未来的以太坊候选版本，唯一的条件是太币数量必须最多为 &lt;code&gt;60102216 * (1.198 + 0.26 * n)&lt;/code&gt; 个，其中 &lt;code&gt;n&lt;/code&gt; 是创世块产生后的年数。 创建者可以自由地通过众筹或其他方式，分配权益证明驱动的供应增加与最大允许供应增加之间的部分或全部差额，以支付开发费用。 不符合社区合约的候选版本升级可能被合理地分叉为兼容版本。&lt;/p&gt;&#xA;&lt;h3 id=&#34;挖矿中心化&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;挖矿中心化&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%8c%96%e7%9f%bf%e4%b8%ad%e5%bf%83%e5%8c%96&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;比特币挖矿算法的原理是，让矿工一次又一次地对区块头稍作修改的版本进行数百万次 SHA256 计算，直到最终某个节点所产生版本的哈希小于目标值（目前大约为 2 &lt;!-- raw HTML omitted --&gt;192&lt;!-- raw HTML omitted --&gt; ）。 然而，这种挖矿算法容易遭受两种形式的中心化攻击。 第一种，挖矿生态系统已经被 ASIC（专用集成电路）所支配，这些计算机芯片专门为特定的比特币挖矿任务而设计，因此效率提高了数千倍。 这意味着比特币挖矿不再是一种高度去中心化和平等的事业，需要巨额资本才能有效参与。 第二种，大部分比特币矿工事实上不在本地完成区块验证；而是依赖中心化矿池提供区块头。 这个问题可以说更糟：截至撰写本文时，排名前三的矿池间接控制了比特币网络中大约 50% 的处理能力，尽管当矿池或联盟试图进行 51％ 攻击时，矿工可以转换到其他矿池这一事实缓解了该问题。&lt;/p&gt;&#xA;&lt;p&gt;以太坊现在的目的是使用一种挖掘算法，要求矿工从状态中获取随机数据，从区块链的最后 N 个区块中计算一些随机选择的交易，并返回结果的哈希值。 这有两个重要好处。 首先，以太坊合约可以包含任何类型的计算，因此以太坊 ASIC 本质上是用于一般计算的 ASIC，即更好的 CPU。 其次，挖矿需要访问整个区块链，这迫使矿工存储整个区块链并至少能够验证每笔交易。 这样就消除了对中心化矿池的需求；虽然矿池仍然可以起到平衡奖励分配随机性的合法作用，但没有中心化控制的点对点矿池同样也可以很好地发挥此功能。&lt;/p&gt;&#xA;&lt;p&gt;该模型未经测试，在将合约执行作为挖矿算法使用时，在避免某些巧妙优化的过程中可能会遇到困难。 然而，这种算法有一个值得注意的特点，任何人都可以通过将专用于抑制某些 ASIC 的大量合约引入区块链中，在“井里下毒”。 由于存在经济激励，ASIC 制造商会使用这种方法互相攻击。 因此，我们正在开发的解决方案最终是一种适应性人为经济解决方案，而不是纯粹的技术解决方案。&lt;/p&gt;&#xA;&lt;h3 id=&#34;可扩展性&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;可扩展性&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%8f%af%e6%89%a9%e5%b1%95%e6%80%a7&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;可扩展性问题是以太坊常被关注的一个方面。 像比特币一样，以太坊也有缺陷，即网络中的每个节点都需要处理每笔交易。 使用比特币，当前区块链的大小约为 15 GB，每小时增长约 1 MB。 如果比特币网络像 Visa 一样每秒处理 2000 笔交易，它将每三秒增长 1 MB（每小时 1 GB，每年 8 TB）。 以太坊可能也会经历相似甚至更糟的增长模式，因为以太坊区块链之上还有很多应用，不像比特币区块链上只有货币，但以太坊完整节点只需存储状态而不是完整的区块链历史，这一事实让情况得到了改善。&lt;/p&gt;&#xA;&lt;p&gt;大区块链的问题是中心化风险。 如果区块链大小增加到 100 TB，可能的情况是只有极少数大型企业能运行完整节点，而所有普通用户将使用轻 SPV 节点。 在这种情况下，可能会出现这样的担忧：完整节点合伙欺诈牟利（例如更改区块奖励，给他们自己比特币等）。 轻节点无法立即检测到这一点。 当然，可能至少存在一个诚实的完整节点，几个小时之后有关诈骗的信息会通过 Reddit 这样的渠道泄露，但这时已为时过晚：将由普通用户相互组织协作将指定区块列入黑名单，这种大规模的、很可能不切实际的协作在规模上无异于发动一次成功的 51% 攻击。 就比特币而言，目前这是一个问题，但 &lt;a href=&#34;https://web.archive.org/web/20140623061815/http://sourceforge.net/p/bitcoin/mailman/message/31709140/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;Peter Todd 建议&lt;/a&gt; 对区块链进行修改，以缓解这一问题。&lt;/p&gt;&#xA;&lt;p&gt;在短期内，以太坊将使用两种其他策略来应对这个问题。 首先，因为基于区块链的挖矿算法，至少每个矿工都会被强制成为一个完整节点，为完整节点的数量创建了一个下限。 其次，更重要的是，处理完每笔交易后，我们会把一个中间状态树根收录到区块链中。 即使区块验证是中心化的，只要存在一个诚实的验证节点，就可以通过验证协议规避中心化问题。 如果矿工发布了无效区块，该区块必定是格式错误，或者是状态 &lt;code&gt;S[n]&lt;/code&gt; 不正确。 由于已知 &lt;code&gt;S[0]&lt;/code&gt; 是正确的，因此必然存在第一个不正确的状态 &lt;code&gt;S[i]&lt;/code&gt; ，但状态 &lt;code&gt;S[i-1]&lt;/code&gt; 是正确的。 验证节点将提供索引 &lt;code&gt;i&lt;/code&gt; 以及“无效证明”，该证明包括处理 &lt;code&gt;APPLY(S[i-1],TX[i]) -&amp;gt; S[i]&lt;/code&gt; 所需的帕特里夏树节点的子集。 节点将能够使用这些节点来运行该部分计算，并查看生成的 &lt;code&gt;S[i]&lt;/code&gt; 与提供的 &lt;code&gt;S[i]&lt;/code&gt; 是否不匹配。&lt;/p&gt;&#xA;&lt;p&gt;另一种更复杂的攻击涉及恶意矿工发布不完整的区块，因此甚至不存在完整信息，致使无法确定区块是否有效。 解决方案是质询-应答协议：验证节点对目标交易索引发起“质疑”，接受到质疑信息的轻节点会对相应的区块取消信任，直到另外的节点（无论是矿工还是另一个验证者）提供一个帕特里夏树节点子集作为有效性证明。&lt;/p&gt;&#xA;&lt;h2 id=&#34;结论&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;结论&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;以太坊协议最初被设想为加密货币的升级版本，通过高度通用的编程语言提供高级功能，如区块链托管、提款限制、金融合约、博彩市场等。 以太坊协议不会直接“支持”任何应用，但图灵完备编程语言的存在意味着，理论上可以为任何交易类型或应用创建任意合约。 然而，关于以太坊更有趣的方面是，以太坊协议远远超出了货币的范畴。 围绕去中心化文件存储、去中心化计算和去中心化预测市场的协议以及许多其他这类概念，有可能大大提高计算行业的效率，并首次通过添加经济层来大力促进其他点对点协议的发展。 最后，还有大量与金钱完全无关的应用程序。&lt;/p&gt;&#xA;&lt;p&gt;以太坊协议实现的任意状态转换函数的概念提供了一个具有独特潜力的平台；而不是一种专门针对数据存储、赌博或金融领域内一系列特定应用的封闭式单用途协议，以太坊在设计上是开放式的，我们相信在今后几年中它非常适合作为大量金融和非金融协议的基础层。&lt;/p&gt;&#xA;&lt;h3 id=&#34;注释&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;注释&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%b3%a8%e9%87%8a&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;ol&gt;&#xA;&lt;li&gt;有经验的读者可能会注意到，事实上比特币地址是椭圆曲线公钥的哈希，而非公钥本身。 然而事实上从密码学术语角度把公钥哈希称为公钥完全合理。 这是因为比特币密码学可以视为一种定制的数字签名算法。在数字签名算法中，公钥由 ECC（椭圆曲线加密算法）公钥的哈希组成，签名由连接了 ECC 签名的 ECC 公钥组成。而验证算法涉及用 ECC 公钥哈希（作为公钥提供）来检查签名中的 ECC 公钥，然后用 ECC 公钥来验证 ECC 签名。&lt;/li&gt;&#xA;&lt;li&gt;技术上来说，前 11 个区块的中位数。&lt;/li&gt;&#xA;&lt;li&gt;在内部，2 和 &amp;ldquo;CHARLIE&amp;rdquo; 都是数字 &lt;!-- raw HTML omitted --&gt;[fn3]（注释编号）&lt;!-- raw HTML omitted --&gt; ，后者采用大端序基数 256 表示。 数字可以至少为 0，最大为 2 &lt;!-- raw HTML omitted --&gt;256&lt;!-- raw HTML omitted --&gt; -1。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://bitcoinmagazine.com/8640/an-exploration-of-intrinsic-value-what-it-is-why-bitcoin-doesnt-have-it-and-why-bitcoin-does-have-it/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;内在价值&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.bitcoin.it/wiki/Smart_Property&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;智能资产&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.bitcoin.it/wiki/Contracts&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;智能合约&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.weidai.com/bmoney.txt&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;B-money&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nakamotoinstitute.org/finney/rpow/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;可重复使用的工作量证明&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nakamotoinstitute.org/secure-property-titles/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;利用所有者权限确保财产权&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://bitcoin.org/bitcoin.pdf&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;比特币白皮书&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://namecoin.org/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;域名币&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wikipedia.org/wiki/Zooko%27s_triangle&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;佐科三角&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.google.com/a/buterin.com/document/d/1AnkP_cVZTCMLIzw4DvsW6M8Q2JC0lIzrTLuoWu2z1BE/edit&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;彩色币白皮书&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/mastercoin-MSC/spec&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;万事达币白皮书&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://bitcoinmagazine.com/7050/bootstrapping-a-decentralized-autonomous-corporation-part-i/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;去中心化自治公司，比特币杂志&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.bitcoin.it/wiki/Scalability#Simplified_payment_verification&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;简化支付确认&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wikipedia.org/wiki/Merkle_tree&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;默克尔树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wikipedia.org/wiki/Patricia_tree&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;帕特里夏树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://eprint.iacr.org/2013/881.pdf&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;GHOST 协议&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://garzikrants.blogspot.ca/2013/01/storj-and-bitcoin-autonomous-agents.html&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;StorJ 和自治代理，Jeff Garzik&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MVyv4t0OKe4&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;Mike Hearn 在图灵节上谈论智能资产&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;以太坊递归长度前缀编码 (RLP)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-Patricia-Tree&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;以太坊默克尔帕特里夏树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20140623061815/http://sourceforge.net/p/bitcoin/mailman/message/31709140/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;Peter Todd 论默克尔求和树&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;em&gt;有关本白皮书的历史，请参阅 &lt;a href=&#34;https://github.com/ethereum/wiki/blob/old-before-deleting-all-files-go-to-wiki-wiki-instead/old-whitepaper-for-historical-reference.md&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;此维基文章&lt;/a&gt; 。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;和众多社区驱动的开源软件项目一样，以太坊自启动以来一直不断发展。 若想了解以太坊的最新进展以及如何更改以太坊协议，我们推荐你阅读 &lt;a href=&#34;https://ethereum.org/zh/learn/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;本指南&lt;/a&gt; 。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;页面最后更新：2025年2月12日&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>论文阅读：《Blockchain privacy and regulatory compliance:Towards a practical equilibrium》</title>
      <link>https://nesl42.github.io/posts/202507-blockchain_privacy_and_regulatory_compliance/</link>
      <pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://nesl42.github.io/posts/202507-blockchain_privacy_and_regulatory_compliance/</guid>
      <category domain="https://nesl42.github.io/categories/technology/">Technology</category>
      <description>&lt;h2 id=&#34;论文阅读blockchain-privacy-and-regulatory-compliance-towards-a-practical-equilibrium&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;论文阅读：《Blockchain privacy and regulatory compliance: Towards a practical equilibrium》&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e8%ae%ba%e6%96%87%e9%98%85%e8%af%bbblockchain-privacy-and-regulatory-compliance-towards-a-practical-equilibrium&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h2 id=&#34;0-摘要&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;0. 摘要&lt;/span&gt;&#xA;  &lt;a href=&#34;#0-%e6%91%98%e8%a6%81&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;我们研究了一种名为“隐私池”（Privacy Pools）的新型智能合约隐私增强协议。该协议引入了一种机制，允许用户在不公开完整交易记录的前提下，选择性披露交易的某些属性。其核心在于让用户发布零知识证明，以验证其资金（未）来源于已知的（非法）合法渠道，这通过证明资金属于特定关联集合来实现——这些集合专为展示符合监管框架或社会共识而设计。我们阐述了该机制如何在合规与非合规提款间建立分离均衡，并详细分析了其技术原理、激励机制及更广泛的影响，揭示此类协议如何实现既保护隐私又符合监管要求的区块链交易。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-introduction&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1. Introduction&lt;/span&gt;&#xA;  &lt;a href=&#34;#1-introduction&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;公有区块链在设计上具有透明性。其核心理念是任何人都应能自主验证交易，而无需依赖中心化的第三方机构。然而从隐私角度看，记录所有地址交易的公开数据集存在显著问题。当用户向某个地址转移资产或与智能合约交互时，该交易将永久留存于区块链上。每个链上操作都会形成永久公开记录，使得第三方能够分析用户的财务往来和行为模式。&lt;/p&gt;&#xA;&lt;p&gt;这些隐私隐患催生了增强隐私协议的出现。&lt;strong&gt;此类协议允许用户通过A地址存入资金，后续通过B地址提取。尽管存取记录仍公开可见，但具体存取行为间的关联性已被隐藏。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tornado Cash&lt;/strong&gt;是最著名的隐私增强协议之一。它在解决上述问题的同时，也吸引了不法分子使用。链上数据显示，黑客组织曾利用该协议转移非法所得资金。当证据表明朝鲜黑客组织也使用该协议后，美国财政部海外资产控制办公室(OFAC)将其智能合约地址列入特别指定国民名单(SDN清单)。&lt;/p&gt;&#xA;&lt;p&gt;Tornado Cash的核心缺陷在于：诚实用户缺乏有效手段与协议内的非法活动划清界限。其提供的合规工具虽允许用户证明取款来源，但需依赖中心化中介并导致信息不对称，因此实际使用率极低。&lt;/p&gt;&#xA;&lt;p&gt;本文提出该方案的扩展机制，使用户能公开证明其取款资金可能来源的宽泛范围。支持两种证明模式：&lt;strong&gt;成员证明（&amp;ldquo;证明取款来自特定存款集合&amp;rdquo;）&lt;strong&gt;或&lt;/strong&gt;排除证明（&amp;ldquo;证明取款与特定存款无关&amp;rdquo;）&lt;/strong&gt;。该概念由Privacy Pools率先提出，本文将探讨如何运用其构建模块实现诚实用户与恶意用户的行为分离。&lt;/p&gt;&#xA;&lt;p&gt;需说明的是，Privacy Pools通过扩展用户操作集提供更多选择。必要时用户仍可向特定对手方提供详细证明。但在多数场景下，成员证明或排除证明已足够。且相较于双边披露机制，公开这些证明具有显著优势。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-技术背景&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2. 技术背景&lt;/span&gt;&#xA;  &lt;a href=&#34;#2-%e6%8a%80%e6%9c%af%e8%83%8c%e6%99%af&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;本节将简要介绍Privacy Pools类协议的技术构件与基本原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;21-zk-snarks出现前的区块链隐私方案&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.1 ZK-SNARKs出现前的区块链隐私方案&lt;/span&gt;&#xA;  &lt;a href=&#34;#21-zk-snarks%e5%87%ba%e7%8e%b0%e5%89%8d%e7%9a%84%e5%8c%ba%e5%9d%97%e9%93%be%e9%9a%90%e7%a7%81%e6%96%b9%e6%a1%88&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;早期区块链支持者认为，尽管交易透明，但通过地址伪匿名性（用户无需透露线下身份，仅通过数字&amp;quot;地址&amp;quot;标识）仍可保障隐私。中本聪在比特币白皮书中明确主张：&amp;ldquo;通过公钥匿名化切断信息流，公众仅能观测资金流向而无法关联具体身份&amp;rdquo;。但事实证明，面对现代聚类分析工具，这种隐私保护程度远远不足。非金融应用（如在Ethereum name service等去中心化域名服务注册名称）往往需要用户链上公开更多个人信息，进一步加剧隐私泄露风险。&lt;/p&gt;&#xA;&lt;p&gt;为提升公有链隐私性，业界逐步引入更强大的技术方案。首个被广泛采用的非平凡隐私解决方案是CoinJoin[9]，其通过多用户在同一交易中混合币种实现输入输出对应关系的模糊化。理论上用户参与多轮混合可隐藏资产来源，但Monero采用的环签名方案更进一步，无需链下交互即可实现小额混合。随着技术演进，单次混合参与者数量增加扩大了匿名集（即可能成为交易来源的历史交易范围），但这类小规模重复混合仍存在数据泄露风险。&lt;/p&gt;&#xA;&lt;p&gt;密码学隐私技术的下一阶段突破是通用零知识证明的引入。Zerocash率先实现该创新，后被Zcash等区块链及Tornado Cash等智能合约系统采用。这类系统使交易的匿名集可扩展至所有历史交易，此类通用零知识证明技术通常被称为&lt;code&gt;ZK-SNARKs&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;22-zk-snarks技术&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.2 ZK-SNARKs技术&lt;/span&gt;&#xA;  &lt;a href=&#34;#22-zk-snarks%e6%8a%80%e6%9c%af&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ZK-SNARKs&lt;/code&gt;允许证明者在不泄露私有数据的前提下，验证关于公私数据组合的数学命题，其具备两大核心特性：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;零知识性：除证明命题成立外，不泄露任何私有数据&lt;/li&gt;&#xA;&lt;li&gt;简洁性：证明体积小且验证速度快，即使底层计算非常复杂&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在区块链领域，&lt;code&gt;ZK-SNARKs&lt;/code&gt;因这两大特性备受关注。虽然系统公共参数的初始可信设置（trusted setup）需要消耗大量时间和资源，但该过程仅需执行一次。证明过程的简洁性对&lt;code&gt;ZK-rollups&lt;/code&gt;等扩展性方案至关重要，而本文讨论的隐私用例更侧重零知识特性。&lt;/p&gt;&#xA;&lt;p&gt;ZK-SNARKs证明的&lt;code&gt;命题&lt;/code&gt;通常表示为&lt;code&gt;电路&lt;/code&gt;程序，数学上可抽象为函数 $f(x, w) \rightarrow {\text{True}, \text{False}}$ 。其中$𝑥$为公开输入，$𝑤$ 为私有输入，$𝑓(.)$为待验证函数。&lt;code&gt;ZK-SNARKs&lt;/code&gt;的本质是：对于证明者与验证者共知的$𝑥$，证明者能提供使$𝑓(𝑥,𝑤)=\text{True}$ 的私有参数$𝑤$。&lt;/p&gt;&#xA;&lt;h2 id=&#34;23-应用案例zcash-与-tornado-cash类系统中的zk-snarks&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.3 应用案例：Zcash 与 Tornado Cash类系统中的ZK-SNARKs&lt;/span&gt;&#xA;  &lt;a href=&#34;#23-%e5%ba%94%e7%94%a8%e6%a1%88%e4%be%8bzcash-%e4%b8%8e-tornado-cash%e7%b1%bb%e7%b3%bb%e7%bb%9f%e4%b8%ad%e7%9a%84zk-snarks&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;尽管Zcash各版本及其衍生系统（如Tornado Cash）存在细微差异，但其底层逻辑高度相似。本节将描述这些协议的基本运作原理。&lt;/p&gt;&#xA;&lt;p&gt;每个&amp;quot;代币&amp;quot;(coin)由持有者保管的私密参数 $𝑠$ 构成，该参数可为任何仅所有者知晓的数据。通过 $𝑠$ 可衍生两个关键值：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;公开的&amp;quot;代币ID&amp;quot;：$L = \mathrm{hash}(s + 1)$&lt;/li&gt;&#xA;&lt;li&gt;作废标识符：$U = \mathrm{hash}(s + 2)$&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;其中 $\mathrm{hash}$ 代表 SHA256 等密码学哈希函数。已知$s$可计算&lt;strong&gt;代币ID&lt;/strong&gt;与作废符，但哈希函数的伪随机性确保在缺乏𝑠的情况下，外界无法关联特定作废符与代币ID的对应关系。&lt;/p&gt;&#xA;&lt;p&gt;区块链会记录所有已&amp;quot;创建&amp;quot;的代币ID和已&amp;quot;花费&amp;quot;的作废标识符。这两个集合都是持续增长的（除非协议要求代币必须在时限内花费）。&lt;/p&gt;&#xA;&lt;p&gt;代币ID集合存储在名为默克尔树（&lt;strong&gt;Merkle Tree&lt;/strong&gt;）的数据结构中：若树包含 $𝑁$ 个条目，则每对相邻条目会被哈希（产生$\lceil N/2 \rceil$个哈希值），这些哈希值再两两哈希（产生$\lceil N/4 \rceil$个哈希值），如此递归直至所有数据最终汇聚为单个&amp;quot;根哈希&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;一组代币ID存储在一个名为**默克尔树（Merkle Tree）**的数据结构中：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若树包含 $𝑁$ 个数据项，则首先对&lt;strong&gt;相邻两项进行哈希计算&lt;/strong&gt;，生成$\lceil N/2 \rceil$个哈希值；&lt;/li&gt;&#xA;&lt;li&gt;接着对这些哈希值&lt;strong&gt;再次两两哈希&lt;/strong&gt;，生成$\lceil N/4 \rceil$个哈希值；&lt;/li&gt;&#xA;&lt;li&gt;重复此过程，直到最终生成一个唯一的**“根哈希”（root hash）**。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;给定树中的某个值和根哈希，我们可以提供一条&lt;strong&gt;默克尔分支（Merkle Branch）&lt;/strong&gt;：即从该值到根哈希的路径上，每一层级哈希时所需的**“兄弟节点值”**。这条分支非常有用，因为它仅需少量数据（约$\log_2 N$个哈希值），即可证明某个值确实存在于树中。下图展示了一个高度为4的默克尔树示例。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-blockchain_privacy_and_regulatory_compliance/image-20250712230003749.png&#39; alt=&#34;image-20250712230003749&#34; height=&#34;451&#34; width=&#34;1026&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;图中高亮了树中某个值对应的&lt;strong&gt;默克尔分支（Merkle Branch）&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;橙色&lt;/strong&gt;：待证明的叶子节点 𝐿（即需要验证的数据项）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;底部一行&lt;/strong&gt;：代表整个数据集（所有叶子节点）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;绿色&lt;/strong&gt;：根哈希 𝑅（整棵树的唯一摘要）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;蓝色&lt;/strong&gt;：从叶子 𝐿 到根 𝑅 的路径。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;紫色&lt;/strong&gt;：路径上每一层级的&lt;strong&gt;兄弟节点（sister nodes）&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;路径本身&lt;strong&gt;无需直接提供&lt;/strong&gt;，因为只需从叶子 𝐿 开始，&lt;strong&gt;逐层与兄弟节点哈希计算&lt;/strong&gt;，即可推导出根哈希 𝑅。验证时，仅需提供这些&lt;strong&gt;兄弟节点（紫色部分）&lt;/strong&gt;，通过计算即可确认 𝐿 是否在树中。&lt;/p&gt;&#xA;&lt;p&gt;当用户向他人发送代币时，需提供：(i) &lt;strong&gt;待花费的作废标识符（nullifier）𝑈&lt;/strong&gt;；(ii) &lt;strong&gt;新生成的代币ID 𝐿′&lt;/strong&gt;（由接收方提供）；(iii) &lt;strong&gt;一个ZK-SNARK证明&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;该&lt;strong&gt;ZK-SNARK&lt;/strong&gt;包含以下&lt;strong&gt;私有输入&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户的私密值 &lt;strong&gt;$𝑠$&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;代币ID树中的一条&lt;strong&gt;默克尔分支&lt;/strong&gt;，用于证明代币ID &lt;strong&gt;$𝐿 = \text{hash}(𝑠 + 1)$&lt;/strong&gt; 曾经被创建过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以及以下&lt;strong&gt;公开输入&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;$𝑈$&lt;/strong&gt;（待花费代币的作废标识符）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;$𝑅$&lt;/strong&gt;（默克尔证明所验证的根哈希）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;ZK-SNARK证明以下两个性质&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;$𝑈 = \text{hash}(𝑠 + 2)$&lt;/strong&gt;（确保作废标识符正确生成）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;默克尔分支有效&lt;/strong&gt;（证明代币 $𝐿$ 确实存在于树中）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在&lt;code&gt;ZK-SNARK&lt;/code&gt;之外，协议还会验证：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;𝑅&lt;/strong&gt; 是当前或历史版本的代币ID树的根哈希&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;𝑈&lt;/strong&gt; 未被标记为已花费&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;若交易有效，系统会将 &lt;strong&gt;𝑈&lt;/strong&gt; 加入&lt;strong&gt;已花费作废标识符集合&lt;/strong&gt;，并将 &lt;strong&gt;𝐿′ 添加到代币ID列表&lt;/strong&gt;中（见图2）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;作废机制（𝑈）的作用&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;防止同一代币被重复花费。&lt;/li&gt;&#xA;&lt;li&gt;除此之外，&lt;strong&gt;不泄露任何其他信息&lt;/strong&gt;。外界仅能观察到交易的发生，但无法推断交易双方的身份或代币的流转历史。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-blockchain_privacy_and_regulatory_compliance/image-20250712232323160.png&#39; alt=&#34;image-20250712232323160&#34; height=&#34;1028&#34; width=&#34;1034&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;对上述模式存在两种例外情况：存款（deposit）与提款（withdrawal）&lt;/strong&gt;&#xA;在存款操作中，系统会直接生成新的代币ID（coin ID），而无需使任何既有代币失效。存款行为本质上&lt;strong&gt;不具备隐私保护性&lt;/strong&gt;，因为特定代币ID（𝐿）与其生成所依赖的外部事件（例如Tornado Cash中的ETH充值、Zcash中的ZEC新币挖矿）之间的关联是公开可查的。换言之，存款行为会暴露其与历史交易链路的关联性。&lt;/p&gt;&#xA;&lt;p&gt;而在提款操作中，系统仅消耗作废标识符（nullifier）而不生成新代币ID。这种机制可以切断提款操作与对应存款之间的关联，进而消除与历史交易链路的联系。但需注意的是，提款操作仍可能与&lt;strong&gt;后续发生的交易&lt;/strong&gt;产生关联[2]。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tornado Cash的版本演进&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;初代版本&lt;/strong&gt;：仅支持存款/提款基础功能，&lt;strong&gt;未实现内部转账&lt;/strong&gt;机制&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;实验版本（Alpha阶段）&lt;/strong&gt;：&#xA;✓ 新增支持&lt;strong&gt;隐私化内部转账&lt;/strong&gt;​&#xA;✓ 引入&lt;strong&gt;任意面额代币&lt;/strong&gt;处理能力&#xA;✓ 集成&amp;quot;拆分&amp;quot;（splitting）与&amp;quot;合并&amp;quot;（merging）操作协议&#xA;（这些功能是处理可变面额交易的必备基础架构）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我们将在后续章节详细探讨如何将基础隐私转账系统与隐私资金池（Privacy Pools）扩展至支持任意面额交易的实施方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;24-隐私池中的zk-snark技术&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;2.4 隐私池中的ZK-SNARK技术&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#24-%e9%9a%90%e7%a7%81%e6%b1%a0%e4%b8%ad%e7%9a%84zk-snark%e6%8a%80%e6%9c%af&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;隐私池的核心思想在于：用户不仅需要零知识证明（zero-knowledge proof）其提款与某个历史存款相关联，还需证明该交易隶属于一个更具约束性的&lt;strong&gt;关联集合（association set）&lt;/strong&gt;。这个关联集合可以是所有历史存款的全集子集、仅包含用户自身存款的集合，或是介于二者之间的任意组合。用户通过提供该集合的默克尔根（Merkle root）作为公开输入来指定具体集合。&lt;/p&gt;&#xA;&lt;p&gt;为简化流程，我们并不直接证明关联集合确实是历史存款的子集，而是要求用户对两条默克尔分支（Merkle branch）进行零知识证明，且两条分支均使用相同的代币ID作为叶子节点：(i) 指向总币ID集合根𝑅的默克尔分支；(ii) 指向用户提供的关联集合根𝑅𝐴的默克尔分支。下图展示了这一机制：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-blockchain_privacy_and_regulatory_compliance/image-20250712233728987.png&#39; alt=&#34;image-20250712233728987&#34; height=&#34;267&#34; width=&#34;1118&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;设计意图在于，完整的关联集合将通过链上或其他渠道公开。这正是核心创新所在：我们既不强制用户精确披露提款来源的具体存款（这过于严格），也不允许其仅提供防双花证明（这过于宽松），而是让用户自主指定资金可能来源的集合范围——该范围可宽可窄，完全取决于用户意愿。我们期望形成一个生态系统，帮助用户便捷地创建符合其偏好的关联集合。本文后续内容将围绕这一基础机制，阐述其上层基础设施及衍生影响。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-实践考量与应用场景&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3. 实践考量与应用场景&lt;/span&gt;&#xA;  &lt;a href=&#34;#3-%e5%ae%9e%e8%b7%b5%e8%80%83%e9%87%8f%e4%b8%8e%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;在完成技术性介绍后，我们现在转向应用层面，探讨隐私增强协议（privacy-enhancing protocols）如何在实际场景中发挥作用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;31-关联集合association-sets的用例&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3.1 关联集合（association sets）的用例&lt;/span&gt;&#xA;  &lt;a href=&#34;#31-%e5%85%b3%e8%81%94%e9%9b%86%e5%90%88association-sets%e7%9a%84%e7%94%a8%e4%be%8b&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;为了说明该方案在执法场景中的价值，我们举一个简单例子。假设有五名用户：Alice、Bob、Carl、David 和 Eve。前四位是诚实守法的用户，但仍希望保护隐私；而 Eve 是一名窃贼。这一信息为公众所知——尽管公众可能不知道 Eve 的真实身份，但有充分证据表明，发送至标记为“Eve”的地址的代币是赃款。这种情形在实践中很常见：例如，流入 Tornado Cash（一种隐私混币协议）的大部分非法资金均来自 DeFi（去中心化金融）协议漏洞攻击，此类事件在公开区块链上可被追踪。&lt;/p&gt;&#xA;&lt;p&gt;当这五名用户发起提款时，他们需选择指定的关联集合（association set）。其关联集合必须包含自己的初始存款地址，但可自由选择是否包含其他地址。我们首先分析 Alice、Bob、Carl 和 David 的动机：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;隐私最大化&lt;/strong&gt;：促使他们扩大关联集合的规模；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;降低风险&lt;/strong&gt;：为避免商户或交易所将其代币视为可疑资产，他们会选择&lt;strong&gt;不将 Eve 纳入关联集合&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;因此，四人的选择很明确：关联集合均为 {Alice, Bob, Carl, David}。&lt;/p&gt;&#xA;&lt;p&gt;而 Eve 同样希望最大化关联集合，但由于无法排除自己的存款地址，她被迫将关联集合设为全部五个地址。图4展示了参与者的关联集合选择结果。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-blockchain_privacy_and_regulatory_compliance/image-20250712234254049.png&#39; alt=&#34;image-20250712234254049&#34; height=&#34;356&#34; width=&#34;542&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;每行中的灰色区域代表相应用户的关联集合（association set）。&lt;/p&gt;&#xA;&lt;p&gt;在我们简化的示例中，假设 Alice、Bob、Carl 和 David 的关联集合均包含其他所有“清白”存款地址，同时排除来自已知非法来源的存款5。而 Eve 无法生成一个将其提款与自身存款地址解绑的证明（proof）。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;尽管 Eve 本人未主动泄露信息，但通过简单的排除法即可明确推断：&lt;strong&gt;提款 #5 只能来自 Eve&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;32-关联集合的构建&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3.2 关联集合的构建&lt;/span&gt;&#xA;  &lt;a href=&#34;#32-%e5%85%b3%e8%81%94%e9%9b%86%e5%90%88%e7%9a%84%e6%9e%84%e5%bb%ba&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;上一节阐述了在类似隐私池（Privacy Pools）的协议中使用关联集合的一种可能方式，以及诚实参与者如何与不良行为者划清界限。需注意，该系统并不依赖Alice、Bob、Carl和David的利他行为——他们有明确的动机去证明自己与不良行为的无关性。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-blockchain_privacy_and_regulatory_compliance/image-20250712234718453.png&#39; alt=&#34;image-20250712234718453&#34; height=&#34;501&#34; width=&#34;550&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;现在，让我们更深入地探讨关联集合的构建方法。总体而言，生成关联集合主要有两大策略（如图5所示）：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;包含策略（Inclusion/Membership）&lt;/strong&gt;：&#xA;通过特定证据筛选出一组被认定为低风险的存款（deposits），并构建仅包含这些存款的关联集合。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;排除策略（Exclusion）&lt;/strong&gt;：&#xA;通过特定证据识别一组高风险存款，并构建排除这些存款之外的关联集合。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;实际应用中，用户不会手动挑选存款来构建关联集合，而是订阅中介服务商——我们称之为&lt;strong&gt;关联集合提供方（Association Set Providers, ASPs）&lt;/strong&gt;。这些提供方会生成具有特定属性的关联集合。某些情况下，ASPs可完全通过链上（on-chain）自动化生成，无需人工（或AI）干预；其他情况下，ASPs可能自主生成关联集合，并将其发布在链上或其他平台。&lt;/p&gt;&#xA;&lt;p&gt;我们强烈建议至少将关联集合的默克尔根（Merkle root）发布在链上。此举可防止恶意ASPs对用户实施特定类型的攻击（例如：通过向不同用户提供不同关联集合来试图去匿名化）。完整的集合数据应通过API提供，或理想情况下存储在低成本去中心化存储系统（如IPFS）中。&lt;/p&gt;&#xA;&lt;p&gt;用户能够下载完整关联集合至关重要，因为这允许他们在本地生成集合成员证明（proofs of membership），而无需向ASPs透露任何额外信息（包括提款对应的具体存款）。&lt;/p&gt;&#xA;&lt;p&gt;以下是ASPs在实际运营中可能采用的几种构建方案：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;延迟添加+排除不良行为者&lt;/strong&gt;：&#xA;所有存款在固定期限（如7天）后自动加入关联集合；但若系统检测到某笔存款与已知不良行为（如大规模盗窃或政府制裁名单中的地址）相关联，则永久排除。实践中可通过社区维护的黑名单或现有交易筛查服务商实现。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;每人每月$N限额&lt;/strong&gt;：&#xA;加入关联集合的存款需满足：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;金额低于固定上限&lt;/li&gt;&#xA;&lt;li&gt;存款人需零知识证明（zero-knowledge-proof）其持有&lt;strong&gt;人格验证凭证（proof-of-personhood token）&lt;/strong&gt;（如政府背书的国民ID系统或社交媒体账号验证等轻量机制）&#xA;为防止女巫攻击（Sybil attacks），系统采用带月份参数的作废机制（nullifier mechanism），确保每个身份每月仅能提交一笔存款。此设计试图体现现行反洗钱（AML）规则的精神——低于特定阈值的小额交易可享有更高隐私权限。注：该方案可完全通过智能合约实现，无需人工监督。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;可信社区成员每月$N限额&lt;/strong&gt;：&#xA;与方案2类似但更严格：用户必须证明自己是&lt;strong&gt;高信任度社区（high-trust community）​&lt;/strong&gt;的成员，该社区承诺为成员提供相互隐私保障。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;基于AI的实时评分&lt;/strong&gt;：&#xA;AI驱动的ASP系统可实时评估每笔存款的风险分数，并输出包含低于特定风险阈值存款的关联集合。ASPs还可能根据多级风险阈值生成多个集合。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;4-技术细节详解&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;&lt;strong&gt;4. 技术细节详解&lt;/strong&gt;&lt;/span&gt;&#xA;  &lt;a href=&#34;#4-%e6%8a%80%e6%9c%af%e7%bb%86%e8%8a%82%e8%af%a6%e8%a7%a3&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;本节将分析提案如何支持&lt;strong&gt;任意面额（arbitrary denominations）​&lt;/strong&gt;，并讨论&lt;strong&gt;重复验证（re-proofing）​&lt;/strong&gt;、&lt;strong&gt;双向直接验证（bilateral direct proofs）​&lt;/strong&gt;和&lt;strong&gt;序列验证（sequential proofs）​&lt;/strong&gt;等特殊情况。&lt;/p&gt;&#xA;&lt;h2 id=&#34;41-支持任意面额&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.1 支持任意面额&lt;/span&gt;&#xA;  &lt;a href=&#34;#41-%e6%94%af%e6%8c%81%e4%bb%bb%e6%84%8f%e9%9d%a2%e9%a2%9d&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;前文所述的简化隐私币系统仅支持&lt;strong&gt;同面额转账&lt;/strong&gt;。而&lt;strong&gt;Zcash&lt;/strong&gt;通过&lt;strong&gt;未花费交易输出模型（UTXO, Unspent Transaction Output）&lt;strong&gt;实现任意面额支持：每笔交易可包含多个输入（需为每个输入公开&lt;/strong&gt;作废标识符/nullifier&lt;/strong&gt;）和多个输出（需为每个输出公开&lt;strong&gt;币ID/coin ID&lt;/strong&gt;）。每个新生成的币ID必须附带加密的面额值。除验证作废标识符有效性外，交易还需额外证明&lt;strong&gt;新生成币的面额总和不超过所花费币的面额总和&lt;/strong&gt;（见图6）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-blockchain_privacy_and_regulatory_compliance/image-20250712235015708.png&#39; alt=&#34;image-20250712235015708&#34; height=&#34;410&#34; width=&#34;552&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;图6.&lt;/strong&gt; &lt;strong&gt;零知识简洁非交互式论证（ZK-SNARK）&lt;/strong&gt; 需额外证明以下声明：加密面额对应的数值满足 &lt;strong&gt;输出端数值总和 ≤ 输入端数值总和&lt;/strong&gt;。根据具体实现方案，可能还需显式证明所有新生成币的面额均为非负数。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;此设计可通过以下方式扩展以支持存取款：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将存款视为&lt;strong&gt;未加密的输入&lt;/strong&gt;，取款视为&lt;strong&gt;未加密的输出&lt;/strong&gt;；&lt;/li&gt;&#xA;&lt;li&gt;或限制设计以简化分析（例如仅允许&lt;strong&gt;部分取款/partial withdrawals&lt;/strong&gt;）：交易包含1个加密输入和2个输出（1个未加密的取款输出 + 1个加密的&amp;quot;找零&amp;quot;输出，剩余资金可后续使用）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;隐私池privacy-pools的适配挑战&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;隐私池（Privacy Pools）的适配挑战&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e9%9a%90%e7%a7%81%e6%b1%a0privacy-pools%e7%9a%84%e9%80%82%e9%85%8d%e6%8c%91%e6%88%98&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;直接套用现有设计会导致**交易图谱（transaction graph）&lt;strong&gt;不符合预期：例如用户存入10个币后分四次取出（1+2+3+4），理想情况是所有取款都应关联原始10币存款，但实际结果如图7所示——第二次取款关联的是第一次取款后生成的9币找零输出，依此类推。这会导致&lt;/strong&gt;关联集（association set）**需不断验证中间存款，引发实践问题。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-blockchain_privacy_and_regulatory_compliance/image-20250712235350278.png&#39; alt=&#34;image-20250712235350278&#34; height=&#34;190&#34; width=&#34;1108&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;解决方案&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;解决方案&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;若要使所有取款都能声明原始10币存款为来源，需同时满足：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;确保部分取款之间无公开关联；&lt;/li&gt;&#xA;&lt;li&gt;允许每笔部分取款将存款纳入其关联集。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;对于仅支持部分取款（非复杂多输入/输出交易）的场景，可通过&lt;strong&gt;信息承诺传播&lt;/strong&gt;实现：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;要求交易包含承诺值 &lt;code&gt;hash(coinID + hash(r))&lt;/code&gt;（添加随机数r保证盲性）；&lt;/li&gt;&#xA;&lt;li&gt;通过&lt;strong&gt;零知识证明/ZK-SNARK&lt;/strong&gt;验证：若父交易为取款，则承诺值与父交易一致；若为存款，则承诺值关联原始存款的coin ID。&lt;/li&gt;&#xA;&lt;li&gt;最终链上每笔交易都会包含对原始存款coin ID的承诺，并证明该值包含在提供的关联集中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;防余额求和攻击balance-summing-attacks&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;防余额求和攻击（balance-summing attacks）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e9%98%b2%e4%bd%99%e9%a2%9d%e6%b1%82%e5%92%8c%e6%94%bb%e5%87%bbbalance-summing-attacks&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&lt;p&gt;例如存入10币后分次取出7.2859和2.7141，攻击者可能通过金额关联交易。为此可支持&lt;strong&gt;币合并（coin merging）&lt;/strong&gt;：将零散币与下次存款合并处理。此时需：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;交易承诺一组coin ID；&lt;/li&gt;&#xA;&lt;li&gt;多输入交易承诺其所有父交易的并集；&lt;/li&gt;&#xA;&lt;li&gt;取款时证明所有承诺的coin ID均在其关联集中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;42-特殊情况&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.2. 特殊情况&lt;/span&gt;&#xA;  &lt;a href=&#34;#42-%e7%89%b9%e6%ae%8a%e6%83%85%e5%86%b5&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h3 id=&#34;421-重复验证re-proofing&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.2.1. 重复验证（Re-proofing）&lt;/span&gt;&#xA;  &lt;a href=&#34;#421-%e9%87%8d%e5%a4%8d%e9%aa%8c%e8%af%81re-proofing&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;在类似隐私池（Privacy Pools）的协议中，用户需要凭借秘密存款信息 $𝑠$ 才能提取存款。该秘密信息随后还可用于构建关联集成员资格证明（association set membership proofs）。假设以下场景：Alice 提取了她的资金，创建并发布了一个关联集成员资格证明。之后，当她想在要求提供不同关联集证明的商户处消费时，只要仍持有该秘密信息，就能针对商户的关联集生成新的证明。同理，Alice 也可针对初始关联集的更新版本生成新证明。保留秘密信息能赋予 Alice 更大灵活性，但若该信息遭泄露，则可能增加其隐私暴露的风险。&lt;/p&gt;&#xA;&lt;p&gt;另一种场景出现在针对特定事件的调查中。假设某些涉及链上代币的不良行为发生，初步调查显示这些代币可能来自一组特定输入源——这可能是因为相关代币源自某个小型社区的提款关联集，或是链上证据与其他证据共同揭示了事件幕后者的部分信息。此时，关联集其他成员或需通过生成排除性证明（exclusion proofs）以自证清白，从而揭露真实责任人的身份。反之，若某事件存在争议但获得大量无关人士支持，这些支持者可能拒绝提供此类证明。&lt;/p&gt;&#xA;&lt;h3 id=&#34;422-双边直接证明bilateral-direct-proofs&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.2.2 双边直接证明（Bilateral direct proofs）&lt;/span&gt;&#xA;  &lt;a href=&#34;#422-%e5%8f%8c%e8%be%b9%e7%9b%b4%e6%8e%a5%e8%af%81%e6%98%8ebilateral-direct-proofs&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;在某些场景下，用户可能需要向另一方披露其提款资金的确切来源。例如，当Alice希望将提取的资金存入银行时，银行可能要求提供资金完整来源信息。对此，Alice可以创建一个仅包含其存款的关联集，并针对该集合生成证明。此类证明预计属于特例，且仅在双边共享时提供部分隐私保护。&lt;strong&gt;需注意的是，共享此类证明需基于强信任假设——即接收方不会进一步传播该证明。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;另一种更高级的方案是：Alice通过零知识证明（zero-knowledge proof）声明以下三个命题中至少有一个为真：(i) &amp;ldquo;该提款属于当前关联集&amp;rdquo;；(ii) &amp;ldquo;我是银行方&amp;rdquo;；(iii) &amp;ldquo;根据特定时间戳服务（可以是服务器或区块链记录），本证明的生成时间已超过10秒&amp;rdquo;。只有实时接收证明的银行方（iii）在确认自身未生成该证明（ii）时，才会采信该证明。若证明落入第三方手中，接收者将难以验证其真实性。这种机制可消除绝大多数因隐私泄露导致的对手方风险（counter-party risk）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;423-顺序证明sequential-proofs&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.2.3 顺序证明（Sequential proofs）&lt;/span&gt;&#xA;  &lt;a href=&#34;#423-%e9%a1%ba%e5%ba%8f%e8%af%81%e6%98%8esequential-proofs&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;让我们设想一个长期未来的场景：类似隐私池（Privacy Pools）的系统不再偶尔使用，而是应用于绝大多数交易中。这正是Zcash等隐私优先（privacy-first）系统所追求的理想状态。这种场景会带来一些新的复杂性，而这些复杂性在隐私池偶尔使用的场景中并不存在。&lt;/p&gt;&#xA;&lt;p&gt;为适应这种场景，协议需进行如下修改：除存款（deposit）和取款（withdrawal）交易类型外，协议还需支持一种内部发送（internal send）操作——该操作会消耗现有的代币ID（coin ID），并生成一个归属于他人的新代币ID。从协议分析角度看，这等同于发送方将资金提取至接收方地址后，接收方立即重新存款，但通过将步骤数量与链上证明（on-chain proofs）从两次缩减为一次，显著提升了效率。&lt;/p&gt;&#xA;&lt;p&gt;假设Alice向Bob发送代币：即她执行一次内部发送操作，（可能部分）消耗属于Alice的代币ID，并根据Bob提供的参数创建新代币ID。若Bob想立即将该代币转给Carl进行消费，同时希望这笔消费交易也保持隐私性，此时就会面临我们的核心挑战：纳入延迟（inclusion delays）。在前文提出的多数配置方案中，关联集提供方（ASPs）不会立即将Bob的新代币加入其关联集（association set），因为他们需要警惕资金源头可能并非Alice，而是刚从Alice钱包窃取资金的攻击者。纳入延迟的设计正是为了让Alice有时间报告异常，或为第三方提供检测时间。&lt;/p&gt;&#xA;&lt;p&gt;另一个类似用例是：当&amp;quot;Alice&amp;quot;变为DeFi协议时，Bob希望从该协议提取资金后立即以隐私支付方式转给Carl。此场景虽减少了一个人类参与者，但结构上高度相似。&lt;/p&gt;&#xA;&lt;p&gt;在高速流转的经济体中，同一笔资金可能每周甚至更频繁地多次流转，此时纳入延迟将构成严峻挑战。一个可能的解决方案是：当用户钱包中所有代币均未&amp;quot;成熟&amp;quot;（即未被纳入相关关联集）时，用户只能通过非隐私保护交易（non-privacy-preserving transaction）进行转账。但我们提出了信息泄露更少的替代方案：&lt;/p&gt;&#xA;&lt;p&gt;当Bob向Carl支付时，Bob会直接向Carl提供用于生成该笔支付的默克尔分支（Merkle branch）和密钥（secret）。这使得Carl能像Bob一样确认：来自Alice的支付记录存在于该代币的历史中。若后续发现大量与不良行为者（bad actors）关联的代币被存入并快速流通，Carl可证明其代币的最终来源与不良行为者无关。&lt;/p&gt;&#xA;&lt;p&gt;当Carl将代币转给David时，他会传递来自Bob的默克尔分支与密钥，并追加自己的信息。假设David随后将代币转给Emma时，Alice的存款已被纳入关联集，此时David无需再提供Alice的默克尔分支或密钥——他只需代表Alice生成关联集成员证明（association set membership proof）即可。同理，当Bob的支付被纳入关联集后，其默克尔分支与密钥也将失效。该机制的核心在于确保每个用户仅获取必要的最小信息量，即可对所接收资金建立信任。图8展示了这一案例。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/202507-blockchain_privacy_and_regulatory_compliance/image-20250713000029168.png&#39; alt=&#34;image-20250713000029168&#34; height=&#34;352&#34; width=&#34;1108&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;图8. 当David向Emma发送交易时，他需要提供来自自身、Carl和Bob的默克尔分支（Merkle branch）与密钥（secret），但无需提供Alice的部分——因为Alice向Bob的支付此时已被纳入关联集（association set）。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;实际场景中，一个代币可能具有多重&amp;quot;来源&amp;quot;：例如Bob作为咖啡供应商，分别收到Alice的5枚、Ashley的4枚和Anne的7枚代币，当日需向Carl支付15枚代币作为晚餐费用；而David可能从Carl处收到15枚代币，又从Chris处收到25枚，最终需向交易所Emma存入30枚代币。对于此类复杂情况，我们遵循同一原则：已被纳入关联集的陈旧历史可被忽略，而新近历史需继续向前传递。&lt;/p&gt;&#xA;&lt;h2 id=&#34;5-讨论&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;5. 讨论&lt;/span&gt;&#xA;  &lt;a href=&#34;#5-%e8%ae%a8%e8%ae%ba&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;类似隐私池（Privacy Pools）的系统允许用户在保护金融交易数据隐私的同时，保留证明其与已知非法活动无关的能力。我们预计诚实用户将受到以下两个因素的共同激励而参与此类方案：(i) 对隐私的需求；(ii) 避免被怀疑的意愿。&lt;/p&gt;&#xA;&lt;h2 id=&#34;51-社会共识与关联集合association-sets&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;5.1. 社会共识与关联集合（Association Sets）&lt;/span&gt;&#xA;  &lt;a href=&#34;#51-%e7%a4%be%e4%bc%9a%e5%85%b1%e8%af%86%e4%b8%8e%e5%85%b3%e8%81%94%e9%9b%86%e5%90%88association-sets&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;若社会对资金&amp;quot;合法&amp;quot;（good）与&amp;quot;非法&amp;quot;（bad）存在完全共识，该系统将形成简单的分离均衡（separating equilibrium）。所有持有&amp;quot;合法&amp;quot;资产的用户都有强烈动机且能够证明自己属于仅包含&amp;quot;合法&amp;quot;资金的关联集合。而恶意行为者则无法提供此类证明——他们仍可将&amp;quot;非法&amp;quot;资金存入池中，但无法从中获益。任何人都能轻易识别这些资金来自隐私增强协议（privacy-enhancing protocol），并发现其提款引用了包含可疑来源资金的关联集合。更重要的是，&amp;ldquo;非法&amp;quot;资金不会污染&amp;quot;合法&amp;quot;资金：当合法存款被提款时，所有者只需从关联集合中排除所有已知&amp;quot;非法&amp;quot;存款即可。&lt;/p&gt;&#xA;&lt;p&gt;当缺乏全球共识，且资金性质判定取决于社会观念或司法管辖区时，关联集合可能显著不同。假设存在两个采用不同规则的司法管辖区，𝐴和𝐵均可使用相同的隐私增强协议，并根据各自辖区要求生成合规证明。双方都能在其关联集合内实现隐私保护，并排除不符合本辖区要求的提款。必要时，用户还可针对两个关联集合的交集生成成员证明（membership proof），从而可信地表明其提款对应的存款同时符合双方法规要求。&lt;/p&gt;&#xA;&lt;p&gt;因此，该提案具有高度灵活性，应被视为中立基础设施。一方面，它具有抗审查性（censorship-resistant），允许用户自主选择关联集合并在其社群内保持隐私；另一方面，外部监管方可要求提供符合其特定关联集合的证明。这意味着即使隐私增强协议内存在恶意行为者社群，只要关联集合的构建准确反映信息，他们也无法掩盖存款的可疑来源。&lt;/p&gt;&#xA;&lt;h2 id=&#34;52-关联集合的特性&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;5.2. 关联集合的特性&lt;/span&gt;&#xA;  &lt;a href=&#34;#52-%e5%85%b3%e8%81%94%e9%9b%86%e5%90%88%e7%9a%84%e7%89%b9%e6%80%a7&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;关联集合需具备特定属性才能有效运作：首先必须保证准确性（accurate），使用户确信提款后的资金可安全使用；其次应保持稳定性（stable），即属性不会随时间轻易变化，从而减少针对新集合的重复证明需求；最后，为实现实质性隐私，必须确保集合足够庞大且包含多样化存款。然而这些特性存在内在矛盾：规模大且多样化的集合虽能提供更好隐私性，但准确性与稳定性较低；而较小集合更易维护，却会削弱隐私保护效果。&lt;/p&gt;&#xA;&lt;h2 id=&#34;53-实践考量与竞争关系&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;5.3 实践考量与竞争关系&lt;/span&gt;&#xA;  &lt;a href=&#34;#53-%e5%ae%9e%e8%b7%b5%e8%80%83%e9%87%8f%e4%b8%8e%e7%ab%9e%e4%ba%89%e5%85%b3%e7%b3%bb&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;接受加密资产（crypto assets）的受监管实体必须确保其适用的法律法规允许接收此类资金。目前，这些实体大多依赖所谓的交易筛查工具（transaction screening tools）——通过分析区块链来识别潜在可疑活动、与非法地址（illicit addresses）的关联或其他违规交易的软件或服务。筛查工具通常通过风险评分（risk score）来量化每笔交易的风险程度，该评分基于资金流向地址及其交易历史记录（transaction history）生成。&lt;/p&gt;&#xA;&lt;p&gt;隐私增强协议（privacy-enhancing protocols）在这方面可能构成挑战。这类协议会切断存款（deposits）与提款（withdrawals）之间的可见关联。因此，当存在隐私增强协议时，风险评分必须结合零知识证明（proofs），并根据关联集合（association set）进行判定。&lt;/p&gt;&#xA;&lt;p&gt;现有的交易筛查工具和服务主要由兼具区块链分析与法律专业知识的公司提供。理想情况下，这些公司（及其他所有方）应能获取全部成员证明（membership proofs）及其对应关联集合，从而对所有交易生成精准风险评分。为此我们建议：除与特定交易对手方（counterparty）共享的单一成员证明（size one proofs）外，所有证明都应存储在区块链或公开可访问的证明库（proof repository）中——基于明显原因，此类单一证明不应公开。&lt;/p&gt;&#xA;&lt;p&gt;将证明存储于链上（on-chain）虽会增加交易成本，但能降低协调难度、维护公平竞争环境，并避免筛查工具提供商因掌握非公开证明而获得准垄断地位（quasi-monopoly）。&lt;/p&gt;&#xA;&lt;p&gt;隐私池（Privacy Pools）的架构具有高度灵活性。通过创建特定关联集合，该协议可适配多样化应用场景，例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;商业银行联盟（consortium of commercial banks）可创建仅包含其客户存款的关联集合。这能确保任何基于该集合生成的提款证明均经过成员银行的客户身份核验（KYC）与反洗钱（AML）程序，同时不暴露具体客户归属；&lt;/li&gt;&#xA;&lt;li&gt;当金融中介（financial intermediary）需记录资金确切来源时，可要求用户提供仅包含其自身存款的关联集合证明。该证明通过双方私下交换（exchanged bilaterally），使中介能像用户从未使用隐私池一样追踪资金流向。此方案虽需用户信任中介不泄露证明，但能在满足监管要求的同时避免向公众公开信息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;54-设计选择与替代方案design-choices-and-alternatives&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;5.4 设计选择与替代方案（Design choices and alternatives）&lt;/span&gt;&#xA;  &lt;a href=&#34;#54-%e8%ae%be%e8%ae%a1%e9%80%89%e6%8b%a9%e4%b8%8e%e6%9b%bf%e4%bb%a3%e6%96%b9%e6%a1%88design-choices-and-alternatives&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;基于关联集合（association sets）、零知识证明（ZK-proofs）和自愿披露（voluntary disclosure）的架构具有高度灵活性。虽然这种设计能确保提案可适配不同司法管辖区，但必须审慎对待具体实施方案。我们特别反对两种潜在调整方案，因其信任要求存在缺陷，并可能催生准垄断（quasi-monopolistic）市场结构。&lt;/p&gt;&#xA;&lt;p&gt;下文将简要探讨这两种替代方案：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;中心化访问权限（Centralized access）&lt;/strong&gt;：允许执法机构、加密风险评分服务商（crypto risk scoring providers）等特定主体查看用户交易关联，同时对其他主体保持隐匿。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;系统级准入白名单（System-wide entry allowlisting）&lt;/strong&gt;：隐私系统可限制用户向资金池存款的权限，要么要求提供额外证明，要么设置存款等待期供中心化风险评分系统（centralized risk scoring system）行使否决权。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这两种方案的共性在于赋予特定实体特权，进而引发复杂的治理问题：谁有权获取信息？谁掌握权限管理权？&lt;/p&gt;&#xA;&lt;p&gt;私营企业并非理想选择——任何特权都可能导致寡头垄断（oligopolistic）市场结构，少数掌握数据权限的企业将垄断服务市场，扼杀竞争。&lt;/p&gt;&#xA;&lt;p&gt;若将权力赋予公共机构（public institutions），尤其在国际语境下，则会衍生大量治理与政治难题。即便当前某个完全可信的机构持有后门密钥（backdoor key），既不滥用权力谋取政治利益，也不受其他施压实体影响，但认为这种状态会永恒不变则过于天真。组织架构、成员构成、国家政权及内部政治结构都会随时间演变。外部压力可能涌现，而特权的存在会激励恶意行为者渗透并操控该组织的治理体系。&lt;/p&gt;&#xA;&lt;p&gt;更严重的是，组织内外的攻击行为或中心化实体代表的失误都可能引发深远后果。我们认为应当避免制造这类中心化单点故障（central point of failure）。&lt;/p&gt;&#xA;&lt;p&gt;当然，我们承认不同交易规模与场景可能需要差异化的证明组合。例如大额交易用户可能需在链上提交基础排他证明（basic exclusion proof），同时向交易对手方披露更详尽的资金来源信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;55-后续研究方向further-research-potential&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;5.5 后续研究方向（Further research potential）&lt;/span&gt;&#xA;  &lt;a href=&#34;#55-%e5%90%8e%e7%bb%ad%e7%a0%94%e7%a9%b6%e6%96%b9%e5%90%91further-research-potential&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;尽管本研究概述了基于ZK-SNARK的隐私增强协议（privacy-enhancing protocols）在监管环境中的应用前景，仍有多个领域值得深入探索：&lt;/p&gt;&#xA;&lt;p&gt;首先需明确，这些协议提供的隐私保护效果受多重因素影响。关联集合规模不足、根值（root choices）选择不当或用户操作失误，都可能使攻击者成功关联存取款交易。其他用户的行为也可能损害你的隐私——极端情况下，若资金池中所有成员都提交规模为1的成员证明（membership proof），其存取款间的直接关联将暴露无遗，剩余的唯一存取款交易对也会被间接曝光。更微妙的情形中，攻击者可通过组合各类成员证明的约束条件，以高概率推断存取款关联。当这些证明数据与交易元数据（transactional metadata）结合时，协议的隐私属性将受到严重威胁。此外，恶意匿名服务提供商（ASP）可能通过精心构造关联集合来最大化信息提取效率，或通过混入已知取款路径的存款来虚增匿名性感知。这些问题都需进一步研究以评估实际隐私保障效果。&lt;/p&gt;&#xA;&lt;p&gt;同样值得深入研究分离均衡（separating equilibrium）的特性：建模分析良性与恶意行为者在特定假设下的行为模式，以及前者的公开证明如何影响后者的隐私。&lt;/p&gt;&#xA;&lt;p&gt;最后，法律学者可深入研究具体披露要求。本文提案具有高度适应性（highly adaptable），法学专家的见解能帮助定制协议及周边生态，确保其符合不同司法管辖区的合规要求。&lt;/p&gt;&#xA;&lt;h2 id=&#34;6-结论conclusion&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;6. 结论（Conclusion）&lt;/span&gt;&#xA;  &lt;a href=&#34;#6-%e7%bb%93%e8%ae%baconclusion&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;传统观点常将隐私保护与监管合规视为不可调和的矛盾。本文论证：若隐私增强协议（privacy-enhancing protocol）允许用户证明其资金合法来源的特定属性，二者便可实现共存。例如，用户既能证明资金与非法来源存款无关，又能通过零知识证明（ZK-proofs）表明资金属于某个合规存款集合，而无需泄露更多信息。&lt;/p&gt;&#xA;&lt;p&gt;这种机制可形成&lt;strong&gt;分离均衡（separating equilibrium）&lt;/strong&gt;——诚实用户有强烈动机证明自己属于合规关联集合（compliant association set），同时在该集合内享受隐私保护；而欺诈者则无法提供此类证明。这使得诚实用户能与不受监管认可的第三方存款划清界限，避免在受监管环境中遭遇资金使用限制。我们认为该提案具有高度灵活性，可适配多样化的监管要求。&lt;/p&gt;&#xA;&lt;p&gt;本文旨在为金融隐私与监管共存的未来提供建设性思考。我们期望推动跨领域对话，将讨论导向更积极务实的方向。要实现这一目标，需要从业者、跨学科学者、政策制定者与监管机构通力合作，共同完善提案细节，最终构建出既符合监管要求又保障隐私的基础设施。&lt;/p&gt;&#xA;&lt;h2 id=&#34;利益冲突声明declaration-of-competing-interest&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;利益冲突声明（Declaration of competing interest）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%88%a9%e7%9b%8a%e5%86%b2%e7%aa%81%e5%a3%b0%e6%98%8edeclaration-of-competing-interest&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;作者声明以下可能构成潜在利益冲突的财务/个人关系：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本文分析了类Privacy Pools架构，而Ameen Soleimani系Privacy Pools开发者&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;致谢acknowledgement&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;致谢（Acknowledgement）&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e8%87%b4%e8%b0%a2acknowledgement&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;特别感谢Mitchell Goldberg、Katrin Schuler和Dario Thürkauf提供的宝贵意见，Emma Littlejohn的文稿校对，以及Dario Thürkauf在图形设计方面的支持。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>回看kfk预言，选了一些我感兴趣的</title>
      <link>https://nesl42.github.io/posts/202506-kfk/</link>
      <pubDate>Tue, 17 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://nesl42.github.io/posts/202506-kfk/</guid>
      <category domain="https://nesl42.github.io/categories/%E4%BA%BA%E9%97%B4%E4%B8%96/">人间世</category>
      <description>&lt;p&gt;回看kfk预言，选了一些我感兴趣的&lt;/p&gt;&#xA;&lt;p&gt;问题5：100块可以买到什么呀&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：2060年的货币没有“块”&lt;/p&gt;&#xA;&lt;p&gt;问题7：地球各方面状态怎么样？人类找出清洁环保替代能源了吗？大家过得开不开心？更焦虑了还是更幸福了？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：更焦虑。因为饥荒、地农、战争非常频繁。不少人怀念2000-2030年之间的美好时光。&lt;/p&gt;&#xA;&lt;p&gt;问题14：人类可以去火星旅行吗？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：不能。但是卫星可以抵达并环绕四周，有一家美国的巨型公司开发了可以体验火星见闻的&lt;a href=&#34;https://zhida.zhihu.com/search?content_id=239374950&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e6%99%ba%e8%83%bd%e8%a7%86%e8%a7%92%e5%b7%a5%e7%a8%8b&amp;amp;zhida_source=entity&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;智能视角工程&lt;/a&gt;，有点类似你们现在使用的虚拟现实体验，但智能视角工程更为身临其境。&lt;/p&gt;&#xA;&lt;p&gt;问题16：房产会泡沬吗？&lt;/p&gt;&#xA;&lt;p&gt;我出生的时侯，房子不是贵重物品。老人们聊天说过从前房子很贵，但我很难想象。&lt;/p&gt;&#xA;&lt;p&gt;问题28：你为什么要用繁体字？我们简体字不能用了吗？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：那是因为我一直使用繁体字，已经习惯了。我也可以使用英文。&lt;/p&gt;&#xA;&lt;p&gt;问题30：移动通讯技术的进步改变了什么？以后会有6G 7G 8G这样吗？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：7G之后，就不再以G命名。因为已经到了另外一个阶段，时间是2048年以后。&lt;/p&gt;&#xA;&lt;p&gt;问题31：所以处在当下时空的我们，怎样才能来一次时光旅行呢？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：没有办法。但是你可以微观地通过改变你的生活节奏，来体验时间的不同。时间只是一个相对的概念。&lt;/p&gt;&#xA;&lt;p&gt;问题35：以后最新兴的行业是什么？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：2030年以后，会是人工智能与跨行业者的结合，就是精通人工智能开发与编程的各个行业。另外游戏从业2035年进入了另外一个阶段。&lt;/p&gt;&#xA;&lt;p&gt;问题38：是否存在全息旅行和全息游戏？就是说身临其境虚拟世界，视觉嗅觉味觉全方位的体验？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：2035年开始出现第一款这样的游戏，在中国。&lt;/p&gt;&#xA;&lt;p&gt;问题40：在未来哪些省份比较宜居？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：2030年以后的云南，2048年以后的贵州。&lt;/p&gt;&#xA;&lt;p&gt;问题42：机器人贵吗？可以制作得跟真人一样吗？或者定制成我们想要的样子？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：2035年起，机器人广泛应用于交互游戏。2038年强人工智能量化生产。定制需要取得复杂的授权与法律条文，在采购机器人中少数人会这么做。大部分应用于家庭整理、学习、娱乐安全。&lt;/p&gt;&#xA;&lt;p&gt;问题44：什么时候机器人可以广泛应用像手机一样。&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：2038年以后。&lt;/p&gt;&#xA;&lt;p&gt;问题45：全球第一大品牌，还是苹果吗？如果不是，在什么领域？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：苹果在我小时候就衰败了。房屋打印公司、交互游戏公司、光学虚拟真实眼镜公司，是40-50年代的三大巨头。&lt;/p&gt;&#xA;&lt;p&gt;问题46：人类克服了癌症了吗？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：癌症大体克服，但超级细菌无法克服，50年代给人类造成严重灾难。&lt;/p&gt;&#xA;&lt;p&gt;问题50：2.你所在的时代，最常见的犯罪行为是什么？&lt;/p&gt;&#xA;&lt;p&gt;3.高考制度还在吗？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：&lt;/p&gt;&#xA;&lt;p&gt;2.最常见的犯罪行为是数字货币窃取与诈骗。社会信用并没有在全球范围里中心化，在有些国家和地区反而是去中心化了。&lt;/p&gt;&#xA;&lt;p&gt;3.基础编程在30年代会纳入初中高中的基础教育。高考继续存在，但从2038年起不再是选拔手段。&lt;/p&gt;&#xA;&lt;p&gt;问题51：人们那个时候可以活多久呢？有没有一种让人开心的药？那个时候的人们是不是很孤独？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：人在精神深处有一个更深的官能是与时空之外的宇宙紧密联合的。这个是人类第二次进步，但发生在战争之后。&lt;/p&gt;&#xA;&lt;p&gt;问题52：区块链在哪些方面普及使用了？以后的货币体系是基于比特币一样的体系么？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：最广泛应用区块链的是一些邪恶国家。全球大国仍然尽量避免货币体系去中心化。&lt;/p&gt;&#xA;&lt;p&gt;问题56：今年到2060年，有外星人到访吗？人类会发展出超能力吗？你们那个年代还看电影吗？那个年代的超级英雄有什么超能力？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：不会发现外星人，但会发现从前没有发现的生命特征，从地下、海洋之下出现。比起电影，我们更喜欢交互游戏（战争之前）。战争之后我们开始进入另外一个阶段。&lt;/p&gt;&#xA;&lt;p&gt;语言的障碍会在2035年之后完全清除。&lt;/p&gt;&#xA;&lt;p&gt;问题61：你所在的年代，人们如何看待自己生活的年代，让人觉得这个社会在上扬发展还是下行后退？你们时代有哪些对未来可以预见性的判断？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：好问题。我们是人类历史以来，空前注重发展内在文明的时代。因为很多东西在战争之后，如同幕布被揭开。对于真实宇宙的知识达到鼎盛。人类因为苦难而转向真实意义，就我个人认为是进步。未来我们会进入另外一个全新的阶段，最终达到一种万有归一的阶段。&lt;/p&gt;&#xA;&lt;p&gt;问题66：机器人会发生暴动吗？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：在我所处的时代并未发生机器人自主攻击人类的现象。但LAWS的组织一直坚持危机的存在。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;（这点他的回答我认为是说AI还是没有达到真正可以迭代的智能水平）&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;问题69：那个时候网络的墙还存在吗？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：WiFi卫星全球普及后，墙就不存在了。在我少年的记忆里就没有墙了。&lt;/p&gt;&#xA;&lt;p&gt;问题73：1.日本福岛核辐射这些年带来了什么影响？&lt;/p&gt;&#xA;&lt;p&gt;2.做过近视眼手术的人2060年还好吗？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：&lt;/p&gt;&#xA;&lt;p&gt;1.日本会有更大的地震，不得不迁都。&lt;/p&gt;&#xA;&lt;p&gt;2.30年代智能眼镜植入眼球，改变了生活。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;（关于第二点，可以结合前一段时间Neuralink来看）&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;问题78：精神病是怎么回事？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：50年代以后人们发现精神只是一个器具，容易受到各个律的影响。这是一大发现。&lt;/p&gt;&#xA;&lt;p&gt;问题80：告诉我现在的行情适合炒股吗？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：在我的青年时代，全球股市在一个小时里全部失去意义。&lt;/p&gt;&#xA;&lt;p&gt;问题85：最流行的全息游戏叫什么？是什么类型的？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：简称&lt;a href=&#34;https://zhida.zhihu.com/search?content_id=239374950&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=OS&amp;amp;zhida_source=entity&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;OS&lt;/a&gt;，怀旧主题。&lt;/p&gt;&#xA;&lt;p&gt;问题87：第三次世界大战打了吗？&lt;/p&gt;&#xA;&lt;p&gt;卡夫卡：打过了。&lt;/p&gt;&#xA;&lt;p&gt;问题91：现在学小语种还有意义吗？&lt;/p&gt;&#xA;&lt;p&gt;KFK：希腊文或者希伯来文比较有意义。&lt;/p&gt;&#xA;&lt;p&gt;问题95：全称叫什么？哪个公司生产的？EA还在吗？暴雪发展如何？难道程序员不知道OS代表operating system吗？是哪个PM通过的这个名字？PM在哪个时候还需要考证上岗吗？&lt;/p&gt;&#xA;&lt;p&gt;KFK：中国的巨头游戏公司开发的。EA暴雪都转型做交互游戏。&lt;/p&gt;&#xA;&lt;p&gt;问题96：你的穿越也是&lt;a href=&#34;https://zhida.zhihu.com/search?content_id=239374950&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e5%b9%b3%e8%a1%8c%e5%ae%87%e5%ae%99&amp;amp;zhida_source=entity&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;平行宇宙&lt;/a&gt;那一理论的吗？如果你说不会造成改变未来，未来有平行宇宙吗？&lt;/p&gt;&#xA;&lt;p&gt;KFK：并没有平行宇宙。只有时间观察者。&lt;/p&gt;&#xA;&lt;p&gt;问题209：语言通过什么方式变的无障碍的？&lt;/p&gt;&#xA;&lt;p&gt;KFK：物联同步感知。&lt;/p&gt;&#xA;&lt;p&gt;问题210：你可以回答一下你那边&lt;a href=&#34;https://zhida.zhihu.com/search?content_id=239502806&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e6%af%94%e7%89%b9%e5%b8%81&amp;amp;zhida_source=entity&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;比特币&lt;/a&gt;多少钱一枚？&lt;/p&gt;&#xA;&lt;p&gt;KFK：不再存在。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;啊？对于这个我还是比较震惊的&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;问题211：请问，如果可以给2019年的中青年三个最重要的建议，是什么呢？&lt;/p&gt;&#xA;&lt;p&gt;KFK：停下现在如同驴子转磨的生活方式，停下来思考一下，思想自己到人生走一遭的目的。&lt;/p&gt;&#xA;&lt;p&gt;问题215：请问可以说一下量子力学推翻物理的一些相关内容吗？很感兴趣。&lt;/p&gt;&#xA;&lt;p&gt;KFK：观察者即创造者。&lt;/p&gt;&#xA;&lt;p&gt;问题216：KFK留给2019年众生的密码。&lt;/p&gt;&#xA;&lt;p&gt;KFK：240130034805&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;一种说法是三个时间：2401，3003，4805&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;问题230：以后公务员还跟现在一样稳定吗？&lt;/p&gt;&#xA;&lt;p&gt;KFK：2048年以后不再有公务员。&lt;/p&gt;&#xA;&lt;p&gt;问题236：我快想不出问题了，但是我不放弃！我想知道未来金钱的意义还是很大吗？拜金主义是否更加严重？贫富差距是否会越来越大？&lt;/p&gt;&#xA;&lt;p&gt;KFK：一个小时内，全球金融系统崩溃后，人们将不再拜金。转向对内在文明的追求。&lt;/p&gt;&#xA;&lt;p&gt;问题241：这么多年建立起来的金融系统，怎么可能在一个小时内崩溃？&lt;/p&gt;&#xA;&lt;p&gt;KFK：崩溃前，当时的人也不相信，说了与你一模一样的话。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;个人很好奇这个具体是怎么做到的&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;问题253：为什么现在出名的未来人基本都是来自日本？是欧美国家不掌握穿梭时空的技术吗？&lt;/p&gt;&#xA;&lt;p&gt;KFK：距离入口比较近。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;？？？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;问题265：给我们一些忠告？&lt;/p&gt;&#xA;&lt;p&gt;KFK：如果能在2019年就学会把专注力从物质转入精神信仰，到2048年2060年的时候，就不会那么痛苦。&lt;/p&gt;&#xA;&lt;p&gt;问题267：你带钱了吗？&lt;/p&gt;&#xA;&lt;p&gt;KFK：没有。因为在2060年，纸是奢侈品切财富都将数字化。能够在这世界使用纸张，我感到很幸福&lt;/p&gt;&#xA;&lt;p&gt;问题272：大清药丸了吗？&lt;/p&gt;&#xA;&lt;p&gt;KFK：我透过数据分析后，才理解你这句话属于2019年才能明白的古语，我这里的数据结论是2048年。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;问：有读心术吗？&lt;/p&gt;&#xA;&lt;p&gt;KFK：2060 以后，人心赤露，无需解读。&lt;/p&gt;&#xA;&lt;p&gt;问：手机成为历史？那楼主你们在未来替代手机功能的是什么呢？&lt;/p&gt;&#xA;&lt;p&gt;KFK：最早称之为物联，后来是芯片植入。&lt;/p&gt;&#xA;&lt;p&gt;问：请问那个时候是不是世界全民博士水平了呀？&lt;/p&gt;&#xA;&lt;p&gt;KFK：博士在 30 年代的中国不再让人尊敬。&lt;/p&gt;</description>
    </item>
    <item>
      <title>梦</title>
      <link>https://nesl42.github.io/posts/2025-6-%E6%A2%A6/</link>
      <pubDate>Sun, 08 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://nesl42.github.io/posts/2025-6-%E6%A2%A6/</guid>
      <category domain="https://nesl42.github.io/categories/%E4%BA%BA%E9%97%B4%E4%B8%96/">人间世</category>
      <description>&lt;p&gt;意识像是从冻得发硬的深海底猛地挣脱，撞破了那层包裹着梦境的、粘稠而昏暗的水面。眼皮被突如其来的光线刺得生疼。&lt;/p&gt;&#xA;&lt;p&gt;窗棂之外，是一望无际的、冰凉如铁的黎明前的青灰，是巨大的苍穹向人间倾泻的、无情的凉薄。&lt;/p&gt;&#xA;&lt;p&gt;那些能在晨光里交换一个心照不宣的眼神、能毫无间隙地将肩膀撞在一起甚至撞得生疼、能将彼此清亮或沙哑的笑声毫无芥蒂地揉进同一团空气、热烈得能灼伤冰冷空间的姓名与面庞，早已被光阴的浩荡长河无情冲散，各自漂流到了沉默而遥远的天涯。曾经鲜活滚烫的“你们”，如今只是一些隔着时间长河冰冷凝望的、清晰却再也无法触摸的旧日映像。像摆在了玻璃展柜深处的标本，轮廓清晰，色彩暗淡，触手只余冰凉。&lt;/p&gt;&#xA;&lt;p&gt;唯独梦中那阵轰然卷起的、毫无保留的哄堂大笑，如同封印在记忆晶石里的高能光团，从未有半分衰减！它湿漉漉的，热烘烘的，带着某种毛茸茸的、直抵心脏最柔软处的熟悉触感。&lt;/p&gt;&#xA;&lt;p&gt;仿佛一只羽翼绚烂、不知时光为何物的莽撞鸟儿，骤然撕裂沉闷的时空帷幕，从那个遥远的、喧嚣嘈杂的高三门口，奋力振翅，拖着长长的、由昔日光影编织的尾羽，精准无比地飞越了万水千山与漫长年月，稳稳地、温顺地，栖息在了此刻这颗因空旷而略显冷寂的心口最深处。&lt;/p&gt;&#xA;&lt;p&gt;它收起翅膀。温热的脚爪轻轻抓住心房颤动的纤维。一动不动。&lt;/p&gt;&#xA;&lt;p&gt;当年那个被lpz一个锐利眼风便轻易洞穿、被dxj一个无声浅笑便彻底瓦解了的小小骗局。那份无需言语、如同精密钟表齿轮般自然咬合的深厚默契。那阵瞬间爆发、挤占了一方狭窄空间、连带着阳光和灰尘都一同摇晃喧腾起来的、纯粹得如同蒸馏水般的开怀大笑——所有这些微不足道的旧日光点，被无形的时间之手小心翼翼地收集，以无比温柔的力量压缩、塑形、抛光，最终凝结成一颗晶莹剔透、流转着暖金光晕的……&lt;/p&gt;&#xA;&lt;p&gt;琥珀。&lt;/p&gt;&#xA;&lt;p&gt;琥珀中凝固的欢笑，依旧清澈见底，光芒四射。&lt;/p&gt;&#xA;&lt;p&gt;人早已失散在宇宙膨胀般无边无际的时空里，渺如尘埃，永不再逢。&lt;/p&gt;&#xA;&lt;p&gt;只有笑声，唯有这纯净如初的笑声，却仿佛无视了热力学定律的存在，固执地、一遍又一遍地，从那颗小小琥珀的核心深处震荡、共鸣、逸散开来……如同不灭的星辰在真空中传递的古老辉光。&lt;/p&gt;&#xA;&lt;p&gt;它在我记忆的荒漠上空低徊、盘旋。&lt;/p&gt;&#xA;&lt;p&gt;一声，又一声。&lt;/p&gt;&#xA;&lt;p&gt;如此清晰，如此近切。&lt;/p&gt;&#xA;&lt;p&gt;带着梦境的温度与现实的冰凉。&lt;/p&gt;&#xA;&lt;p&gt;仿佛昨日……从未真正离去。&lt;/p&gt;&#xA;&lt;p&gt;却又远隔……整整一个星系。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>论文阅读：HookChain</title>
      <link>https://nesl42.github.io/posts/2025-6-hookchain/</link>
      <pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://nesl42.github.io/posts/2025-6-hookchain/</guid>
      <category domain="https://nesl42.github.io/categories/technology/">Technology</category>
      <description>&lt;h2 id=&#34;todo&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;TODO&lt;/span&gt;&#xA;  &lt;a href=&#34;#todo&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;ol&gt;&#xA;&lt;li&gt;行文风格需要改&lt;/li&gt;&#xA;&lt;li&gt;标题序号需要改&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;0摘要&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;0.摘要&lt;/span&gt;&#xA;  &lt;a href=&#34;#0%e6%91%98%e8%a6%81&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;通过精确结合 IAT Hooking 技术、动态 SSN 解析和间接系统调用，HookChain 以一种仅作用于 Ntdll.dll 的 EDR 的警惕之眼不可见的方式重定向 Windows&lt;/p&gt;&#xA;&lt;h2 id=&#34;1介绍&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;1.介绍&lt;/span&gt;&#xA;  &lt;a href=&#34;#1%e4%bb%8b%e7%bb%8d&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;在本研究中，着重阐述 HookChain 为先进的安全规避技术带来的全新视角，即通过巧妙绕过用户模式下 EDR 实施的监控机制，尤其是在 Ntdll.dll 库中的相关机制。对于大多数 EDR 而言，该库是遥测数据收集的关键节点，处于访问操作系统内核（环 0）前的最后一道防线。&lt;/p&gt;&#xA;&lt;p&gt;通过一种复杂的方法，该方法将 IAT 挂钩（一种通过操纵导入表进行函数调用拦截的方式）与系统服务号（SSN）的动态解析以及间接系统调用（间接系统调用）相结合，HookChain 能够重定向所有主要 Windows 子系统的执行流，例如 kernel32.dll、kernelbase.dll 和 user32.dll。这意味着，一旦部署，HookChain 可确保在应用程序环境内的所有 API 调用都能透明地执行，完全避免被端点检测与响应（EDR）工具检测到。&lt;/p&gt;&#xA;&lt;p&gt;不同之处在于，这种技术的执行无需对要执行的应用程序或恶意软件的源代码进行任何修改，在本研究的制定和发布之时，确保能完全避开大多数终端检测与响应（EDR）系统安装的 Ntdll.dll 监控机制。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.&lt;/span&gt;&#xA;  &lt;a href=&#34;#2&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h2 id=&#34;22-system-service-dispatching&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.2 System Service Dispatching&lt;/span&gt;&#xA;  &lt;a href=&#34;#22-system-service-dispatching&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;x64中，ntdll.dll 直接调用syscall：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;0:002&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ntdll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NtReadFile&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;ntdll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NtReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258d090&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;c8bd1&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;rcx&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258d093&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;b806000000&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258d0a2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f05&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;syscall&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258d0a4&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;c3&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且进入内核之后，系统调用号和三环是一样的：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;lkd&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;uf&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ZwReadFile&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;nt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ZwReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e7f9e00&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;488&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;bc4&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;rsp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e7f9e03&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;fa&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;cli&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e7f9e04&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4883&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ec10&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;rsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e7f9e08&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;rax&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e7f9e09&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;pushfq&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e7f9e0a&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;a10&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e7f9e0c&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;488&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;d052d880000&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;lea&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;nt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;KiServiceLinkage&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e802640&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e7f9e13&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;rax&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e7f9e14&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;b806000000&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e7f9e19&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;e9e2710100&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;KiServiceInternal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;fffff806&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;e811000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后就是进入Ntoskrnl中的KiServiceInternal，执行NtReadFile的实际实现&lt;/p&gt;&#xA;&lt;h2 id=&#34;23-image-loader&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.3 Image Loader&lt;/span&gt;&#xA;  &lt;a href=&#34;#23-image-loader&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;Image Loader是一段用户模式驻留代码，位于 Ntdll.dll 中，而非内核库中。通过这种方式，可以确保 Ntdll.dll 始终存在于正在运行的进程中（Ntdll.dll 始终会被加载）。&lt;/p&gt;&#xA;&lt;p&gt;在应用程序的初始化和加载过程中，**导入地址表（IAT）**会填充应用程序引用的每个函数的当前地址。此过程执行以下步骤：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;加载可执行文件（PE）导入表中引用的每个动态链接库（DLL）。&lt;/li&gt;&#xA;&lt;li&gt;检查相关DLL是否已加载到进程内存中：若未加载，则从磁盘读取该DLL并将其映射到内存。&lt;/li&gt;&#xA;&lt;li&gt;将DLL映射到内存后，对该DLL重复此过程，以导入其使用的依赖项。&lt;/li&gt;&#xA;&lt;li&gt;每个DLL加载完成后，系统会处理导入地址表（IAT），查找需要导入的特定函数。通常，此过程通过函数名执行，但也可能通过索引编号完成。对于每个导入的函数名，加载程序会检查被导入DLL的导出表，并尝试定位目标函数。若未找到目标函数，则会终止此操作。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/2025-6-hookchain/image.png&#39; alt=&#34;alt text&#34; height=&#34;509&#34; width=&#34;1053&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;24-hook&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.4 HOOK&lt;/span&gt;&#xA;  &lt;a href=&#34;#24-hook&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h3 id=&#34;241-jmp-or-call&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.4.1 JMP or CALL&lt;/span&gt;&#xA;  &lt;a href=&#34;#241-jmp-or-call&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;这种策略通常用于更改ntdll.dll 内原生函数调用的代码&lt;/p&gt;&#xA;&lt;p&gt;比如，原本的NtCreateProces是这样：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;0:002&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ntdll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NtCreateProcess&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;ntdll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NtCreateProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e700&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;c8bd1&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;rcx&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e703&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;b8ba000000&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;BAh&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e712&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f05&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;syscall&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e714&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;c3&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e715&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;cd2e&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Eh&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e717&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;c3&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果存在EDR，可以看到第一条指令变为JMP或者CALL：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;0:004&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ntdll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NtCreateProcess&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;ntdll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NtCreateProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;bee700&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;e9f81b1600&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;d502fd&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;bee705&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;cc&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;bee706&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;cc&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;bee707&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;cc&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;bee712&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f05&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;syscall&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;bee714&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;c3&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且跳转指令（JMP）的目标地址未与任何已知模块（DLL）关联，因此这是在运行时注入的代码:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;0:004&amp;gt;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;d502fd&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;Usage:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;unknown&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;d50000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;End&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;d53000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;Region&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;00000000&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00003000&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;.000&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;kB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;State:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;00001000&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MEM_COMMIT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;Protect:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;00000020&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PAGE_EXECUTE_READ&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;Type:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;00020000&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MEM_PRIVATE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;Allocation&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;fff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;d50000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;Allocation&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Protect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;00000002&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;PAGE_READONLY&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;Content&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;d03&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;242-iat-hook&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.4.2 IAT HOOK&lt;/span&gt;&#xA;  &lt;a href=&#34;#242-iat-hook&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/2025-6-hookchain/image-1.png&#39; alt=&#34;alt text&#34; height=&#34;493&#34; width=&#34;933&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上图7展示了应用程序的原始执行流程。当应用程序需要进行外部函数调用（引用另一个DLL中的函数）时，它会在导入地址表（IAT）中查找目标函数的地址，然后对该地址执行CALL指令。&lt;/p&gt;&#xA;&lt;p&gt;另一方面，从图8中可以观察到，导入地址表（IAT）中的函数地址已被替换为任意地址（拦截函数），该地址可选择性地执行原始函数。&lt;/p&gt;&#xA;&lt;p&gt;在由终端检测与响应系统（EDR）执行此拦截的场景中，导入地址表（IAT）中存在的地址将是EDR函数的地址，该函数将执行遥测处理、检查、日志记录以及EDR规划的其他任务。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/2025-6-hookchain/image-2.png&#39; alt=&#34;alt text&#34; height=&#34;779&#34; width=&#34;1120&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;25-已知的pass方法&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.5 已知的pass方法&lt;/span&gt;&#xA;  &lt;a href=&#34;#25-%e5%b7%b2%e7%9f%a5%e7%9a%84pass%e6%96%b9%e6%b3%95&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;关于绕过EDR所实施的HOOK技术，目前已有若干公开披露的可行方法，但通常可归纳为以下几类：&lt;br&gt;&#xA;• 重新映射Ntdll.dll以获取原始代码，或覆盖先前映射内存区域中的函数代码。&lt;br&gt;&#xA;• 直接系统调用（direct syscalls）。&lt;/p&gt;&#xA;&lt;p&gt;当前市场上的大部分EDR在用户模式下，均通过使用JMP技术拦截Ntdll.dll中的函数调用来集中设置监控点。因此，迄今为止公开报道的用户模式钩子绕过技术，均围绕Ntdll.dll展开。&lt;/p&gt;&#xA;&lt;h3 id=&#34;251-ntdlldll-重映射&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.5.1 Ntdll.dll 重映射&lt;/span&gt;&#xA;  &lt;a href=&#34;#251-ntdlldll-%e9%87%8d%e6%98%a0%e5%b0%84&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;该技术有很多中变体，通常是读取磁盘dll的内容，然后覆盖被HOOK的函数的相关区域。&lt;/p&gt;&#xA;&lt;p&gt;另一种方法是，在挂起模式下创建一个进程，然后读取这个进程中的Ntdll.dll，由于这个时候进程加载还没有完成，EDR还没有收到注入其Hook dll的回调 ，进程中的ntdll副本完好，没有被hook&lt;/p&gt;&#xA;&lt;h3 id=&#34;252-直接系统调用&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.5.2 直接系统调用&lt;/span&gt;&#xA;  &lt;a href=&#34;#252-%e7%9b%b4%e6%8e%a5%e7%b3%bb%e7%bb%9f%e8%b0%83%e7%94%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;这个具体原理就不说了，没啥说的。&lt;/p&gt;&#xA;&lt;p&gt;优点是可以绕过r3的hook，但还是能被EDR识别出来，比如进程执行的总时间，执行连，就是dll的调用顺序。&lt;/p&gt;&#xA;&lt;p&gt;除了可能被识别出来，还有缺点是：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;需要手动映射每个SSN，而且每个版本的SSN可能不一样&lt;/li&gt;&#xA;&lt;li&gt;需要付出大量编程工作，将使用Windows子系统DLL的目标代码移植为仅通过直接系统调用（Syscall）使用原生函数。&lt;/li&gt;&#xA;&lt;li&gt;现有代码的可移植性较低。因为需要调整应用程序的源代码，使其仅使用如Nt&amp;hellip;和Zw&amp;hellip;等原生调用。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;253-间接系统调用&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.5.3 间接系统调用&lt;/span&gt;&#xA;  &lt;a href=&#34;#253-%e9%97%b4%e6%8e%a5%e7%b3%bb%e7%bb%9f%e8%b0%83%e7%94%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;上述技术的一种广泛使用的变体是间接系统调用（Indirect Syscall），其原理是修改函数，使其不直接执行SYSCALL指令，而是跳转到Ntdll.dll内存中包含Syscall指令的地址。&lt;/p&gt;&#xA;&lt;p&gt;比如可以这样：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;0:002&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ntdll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NtCreateProcess&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;ntdll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NtCreateProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e700&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;c8bd1&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;rcx&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e703&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;b8ba000000&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;BAh&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e712&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;f05&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;syscall&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e714&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;c3&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e715&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;cd2e&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Eh&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e717&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;c3&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以修改函数的副本，设置EAX之后，执行一条jmp，跳到syscall的地方：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;NtAllocateVirtualMemory&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;PROC&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;rcx&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SSN&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;JMP&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;00007&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ffe&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;b258e712&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;NtAllocateVirtualMemory&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ENDP&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个微小的改动带来了显著的效果，因为从执行链遥测的角度来看，系统调用指令的调用将不再直接来自应用程序的代码，而是来自Ntdll.dll。&lt;/p&gt;&#xA;&lt;h3 id=&#34;254-动态解析ssn&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.5.4 动态解析SSN&lt;/span&gt;&#xA;  &lt;a href=&#34;#254-%e5%8a%a8%e6%80%81%e8%a7%a3%e6%9e%90ssn&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;2020年12月，@modexpblog在其博客中发表了一篇题为《红队绕过用户模式钩子与系统调用直接调用》的文章。文中详细介绍了如何实现系统调用号（SSN）与其关联函数的动态关联，从而使绕过技术更加可靠，因为它无需在应用程序中内置针对每个Windows版本的固定SSN列表。该技术采用以下流程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用线程环境块（TEB）和进程环境块（PEB）表定位Ntdll.dll的基地址。&lt;/li&gt;&#xA;&lt;li&gt;枚举所有以“Zw”开头的函数。在用户模式下，Nt&amp;hellip;和Zw&amp;hellip;函数指向同一地址，因此在此场景中使用Zw或Nt实际并无区别。&lt;/li&gt;&#xA;&lt;li&gt;将前一步枚举到的函数的相对虚拟地址（RVA）和名称存储在数组中。在该算法的实现中，作者使用了一种EDR规避技术：不将函数名作为比较键保存和使用，而是通过一种专有算法对ROR（循环右移）进行算术运算来计算哈希值，并将其作为比较键。&lt;/li&gt;&#xA;&lt;li&gt;按函数地址对数组进行排序。&lt;/li&gt;&#xA;&lt;li&gt;将SSN定义为数组的索引值。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/2025-6-hookchain/image-3.png&#39; alt=&#34;alt text&#34; height=&#34;584&#34; width=&#34;1279&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;254-动态解析ssn---光环之门-halos-gate&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;2.5.4 动态解析SSN - 光环之门 Halo’s Gate&lt;/span&gt;&#xA;  &lt;a href=&#34;#254-%e5%8a%a8%e6%80%81%e8%a7%a3%e6%9e%90ssn---%e5%85%89%e7%8e%af%e4%b9%8b%e9%97%a8-halos-gate&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;过去几年还发布了其他动态分辨率技术，例如 2020 年 6 月发布的地狱之门 [10] 和 Sektor7 的 Reenz0h 于 2021 年 4 月发布的光环之门 [11]。&lt;/p&gt;&#xA;&lt;p&gt;通常来说，“Halo之门”执行以下流程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在Ntdll.dll中定位目标函数的当前地址。&lt;/li&gt;&#xA;&lt;li&gt;读取该函数的字节（当前为32字节），并检查这些字节是否与汇编指令（mov r10, rcx; mov eax, SSN）匹配。&lt;/li&gt;&#xA;&lt;li&gt;如果字节不匹配，则说明该函数正被监控（即已设置钩子），但邻近的函数（前后）可能未设置钩子。&lt;/li&gt;&#xA;&lt;li&gt;在邻近函数（上下方）中搜索未设置钩子的函数，并计算找到的函数与当前函数的距离，从而获取当前函数的系统调用号（SSN）编码。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;如下图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/2025-6-hookchain/image-4.png&#39; alt=&#34;alt text&#34; height=&#34;656&#34; width=&#34;1373&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;示例代码片段：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Quick and dirty fix in case the function has been hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;n&#34;&gt;WORD&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;// check if syscall, in this case we are too far&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x0f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x05&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;// check if ret, in this case we are also probably too far&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;// First opcodes should be :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;//    MOV R10, RCX&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;//    MOV RCX, &amp;lt;syscall&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x4c&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x8b&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xd1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xb8&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;n&#34;&gt;BYTE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;n&#34;&gt;BYTE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PBYTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pFunctionAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;n&#34;&gt;pVxTableEntry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wSystemCall&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-初步分析&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3. 初步分析&lt;/span&gt;&#xA;  &lt;a href=&#34;#3-%e5%88%9d%e6%ad%a5%e5%88%86%e6%9e%90&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h2 id=&#34;31-分析目标&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3.1 分析目标&lt;/span&gt;&#xA;  &lt;a href=&#34;#31-%e5%88%86%e6%9e%90%e7%9b%ae%e6%a0%87&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;本分析着重对 HookChain 技术进行初步的可行性、有效性及范围验证。针对市场上各种终端检测与响应（EDR）解决方案开展了枚举，详情如下。&lt;/p&gt;&#xA;&lt;h2 id=&#34;32-测试方法和局限性&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3.2 测试方法和局限性&lt;/span&gt;&#xA;  &lt;a href=&#34;#32-%e6%b5%8b%e8%af%95%e6%96%b9%e6%b3%95%e5%92%8c%e5%b1%80%e9%99%90%e6%80%a7&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;为使此枚举在所有平台上具有线性且可靠，采用了以下前提条件：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;所有测试使用唯一且相同的代码。&lt;/li&gt;&#xA;&lt;li&gt;应用程序用 C 语言开发，并在 64 位 Windows 环境中使用 GCC 进行编译。&lt;/li&gt;&#xA;&lt;li&gt;在枚举过程中不进行更改和 / 或重新编译。在所有测试环境中提供完全相同的可移植可执行文件（EXE）用于执行。所有方案都执行相同的 EXE，因此所有解决方案的行为和哈希值都相同。&lt;/li&gt;&#xA;&lt;li&gt;应用程序在开发过程中未对这些解决方案采取任何绕过或规避措施。&lt;/li&gt;&#xA;&lt;li&gt;在任何版本的 Windows 系统上以非特权用户身份运行应用程序，即无需本地管理员权限。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;33-分析要点&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3.3 分析要点&lt;/span&gt;&#xA;  &lt;a href=&#34;#33-%e5%88%86%e6%9e%90%e8%a6%81%e7%82%b9&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;本次分析所开发的artifact（可执行程序）会在应用程序的两个不同点执行钩子存在性验证：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Ntdll.dll的函数；&lt;/li&gt;&#xA;&lt;li&gt;导入地址表（IAT）HOOK。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;331-ntdll-hook&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3.3.1 Ntdll Hook&lt;/span&gt;&#xA;  &lt;a href=&#34;#331-ntdll-hook&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;为了验证是否有NTdll Hook&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;列出所有名称以 Zw 或 Nt 开头的函数&lt;/li&gt;&#xA;&lt;li&gt;检查函数代码中是否存在 JMP 指令；&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;332-iat-hook&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3.3.2 IAT Hook&lt;/span&gt;&#xA;  &lt;a href=&#34;#332-iat-hook&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;为了验证进程中加载的动态链接库（DLL）的导入地址表（IAT）中是否存在钩子（Hooks），执行了以下步骤：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;列出进程中加载的所有动态链接库；&lt;/li&gt;&#xA;&lt;li&gt;检查所有已加载 DLL 的导入地址表（IAT）中是否有对 Ntdll.dll 的导入引用，以及是否使用了名称以 Zw 或 Nt 开头的函数&lt;/li&gt;&#xA;&lt;li&gt;检查导入地址表（IAT）中存在的地址是否与 Ntdll 中函数的实际地址不同&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;34-结果&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3.4 结果&lt;/span&gt;&#xA;  &lt;a href=&#34;#34-%e7%bb%93%e6%9e%9c&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;可以在https://github.com/helviojunior/hookchain/tree/main/enum/results_enum这里到找部分EDR的结果&lt;/p&gt;&#xA;&lt;p&gt;这是一个示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[+] Listing ntdll Nt/Zw functions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtCreateThreadEx is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtCreateUserProcess is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtDuplicateObject is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtFreeVirtualMemory is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtLoadDriver is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtMapUserPhysicalPages is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtMapViewOfSection is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtOpenProcess is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtQuerySystemInformation is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtQuerySystemInformationEx is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtQuerySystemTime is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtQueueApcThread is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtQueueApcThreadEx is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtQueueApcThreadEx2 is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtReadVirtualMemory is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtResumeThread is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtSetContextThread is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtSetInformationProcess is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtSetInformationThread is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtTerminateProcess is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtUnmapViewOfSection is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NtWriteVirtualMemory is hooked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Mapped 478 functions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[+] Listing loaded modules&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\Users\M4v3r1ck\Desktop\hookchain_finder64.exe is loaded at 0x00007ff770d10000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\SYSTEM32\ntd1l.dll is loaded at 0x0000015158f10000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\System32\kern3l32.dll is loaded at 0x0000015159110000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\SYSTEM32\ntdll.dll is loaded at 0x00007ff9e1290000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\System32\KERNEL32.DLL is loaded at 0x00007ff9e0250000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\System32\KERNELBASE.dll is loaded at 0x00007ff9de950000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\Program Files\SentinelOne\Sentinel Agent 23.3.3.264\InProcessClient64.dll is loaded at 0x00007ff9de4d0000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\System32\ADVAPI32.dll is loaded at 0x00007ff9e0780000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\System32\msvcrt.dll is loaded at 0x00007ff9df9a0000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\System32\sechost.dll is loaded at 0x00007ff9e0530000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\System32\RPCRT4.dll is loaded at 0x00007ff9df2d0000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\System32\bcrypt.dll is loaded at 0x00007ff9decc0000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\SYSTEM32\FLTLIB.DLL is loaded at 0x00007ff9de460000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\WINDOWS\System32\ucrtbase.dll is loaded at 0x00007ff9defb0000.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[+] Listing hooked modules&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checking ntdll.dll at KERNEL32.DLL IAT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtEnumerateKey is hooked to 0x00007ff9e132d610&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function *NtTerminateProcess is hooked to 0x00007ff9e132d550&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtMapUserPhysicalPagesScatter is hooked to 0x00007ff9e132d030&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtDeleteValueKey is hooked to 0x00007ff9e132eaa0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetValueKey is hooked to 0x00007ff9e132dbc0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryInstallUILanguage is hooked to 0x00007ff9e132f9e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryLicenseValue is hooked to 0x00007ff9e132fa40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function *NtMapViewOfSection is hooked to 0x00007ff9e132d4d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtCreateSection is hooked to 0x00007ff9e132d910&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function *NtUnmapViewOfSection is hooked to 0x00007ff9e132d510&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryInformationThread is hooked to 0x00007ff9e132d470&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryEvent is hooked to 0x00007ff9e132da90&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtRaiseHardError is hooked to 0x00007ff9e132fce0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryVolumeInformationFile is hooked to 0x00007ff9e132d8f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtReplacePartitionUnit is hooked to 0x00007ff9e132fea0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryValueKey is hooked to 0x00007ff9e132d2b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryInformationToken is hooked to 0x00007ff9e132d3f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtOpenProcessToken is hooked to 0x00007ff9e132f4e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function *NtSetInformationThread is hooked to 0x00007ff9e132d170&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtOpenThreadToken is hooked to 0x00007ff9e132d450&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtOpenKey is hooked to 0x00007ff9e132d210&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtIsSystemResumeAutomatic is hooked to 0x00007ff9e132f020&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtInitiatePowerAction is hooked to 0x00007ff9e132f000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtWaitForSingleObject is hooked to 0x00007ff9e132d050&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtCreateEvent is hooked to 0x00007ff9e132d8d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtFsControlFile is hooked to 0x00007ff9e132d6f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtOpenFile is hooked to 0x00007ff9e132d630&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtClose is hooked to 0x00007ff9e132d1b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryInformationFile is hooked to 0x00007ff9e132d1f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetInformationFile is hooked to 0x00007ff9e132d4b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetInformationDebugObject is hooked to 0x00007ff9e13302a0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetSystemInformation is hooked to 0x00007ff9e1330540&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryInformationProcess is hooked to 0x00007ff9e132d2f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtFindAtom is hooked to 0x00007ff9e132d250&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryInformationAtom is hooked to 0x00007ff9e132f8c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtAddAtomEx is hooked to 0x00007ff9e132dce0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtDeleteAtom is hooked to 0x00007ff9e132e9c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtFlushKey is hooked to 0x00007ff9e132ed00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtCreateKey is hooked to 0x00007ff9e132d370&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtCreateFile is hooked to 0x00007ff9e132da70&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtCreateJobSet is hooked to 0x00007ff9e132e5a0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetInformationJobObject is hooked to 0x00007ff9e13302e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryInformationJobObject is hooked to 0x00007ff9e132f920&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtCreateJobObject is hooked to 0x00007ff9e132e580&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtAssignProcessToJobObject is hooked to 0x00007ff9e132e1a0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtTerminateJobObject is hooked to 0x00007ff9e13307e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtOpenJobObject is hooked to 0x00007ff9e132f3c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetEaFile is hooked to 0x00007ff9e1330220&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetSecurityObject is hooked to 0x00007ff9e13304e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryEaFile is hooked to 0x00007ff9e132f880&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQuerySecurityObject is hooked to 0x00007ff9e132fb40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function *NtSetInformationProcess is hooked to 0x00007ff9e132d350&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQuerySection is hooked to 0x00007ff9e132d9f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function *NtFreeVirtualMemory is hooked to 0x00007ff9e132d390&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtWriteFile is hooked to 0x00007ff9e132d0d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtEnumerateValueKey is hooked to 0x00007ff9e132d230&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtUnlockFile is hooked to 0x00007ff9e1330940&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtReadFile is hooked to 0x00007ff9e132d090&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtLockFile is hooked to 0x00007ff9e132f120&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtAllocateVirtualMemory is hooked to 0x00007ff9e132d2d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryVirtualMemory is hooked to 0x00007ff9e132d430&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtProtectVirtualMemory is hooked to 0x00007ff9e132d9d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtCreateMailslotFile is hooked to 0x00007ff9e132e620&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryDirectoryFile is hooked to 0x00007ff9e132d670&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryWnfStateData is hooked to 0x00007ff9e132fc40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtPowerInformation is hooked to 0x00007ff9e132dba0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtGetDevicePowerState is hooked to 0x00007ff9e132ee80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetThreadExecutionState is hooked to 0x00007ff9e13305a0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetSystemEnvironmentValueEx is hooked to 0x00007ff9e1330520&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQuerySystemEnvironmentValueEx is hooked to 0x00007ff9e132fbe0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetVolumeInformationFile is hooked to 0x00007ff9e1330640&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtDeviceIoControlFile is hooked to 0x00007ff9e132d0b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryAttributesFile is hooked to 0x00007ff9e132d770&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryFullAttributesFile is hooked to 0x00007ff9e132f8a0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtSetTimerResolution is hooked to 0x00007ff9e1330600&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtQueryTimerResolution is hooked to 0x00007ff9e132fc20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function *NtReadVirtualMemory is hooked to 0x00007ff9e132d7b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtWaitForMultipleObjects is hooked to 0x00007ff9e132db20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtClearEvent is hooked to 0x00007ff9e132d790&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function NtApphelpCacheControl is hooked to 0x00007ff9e132d950&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNEL32.DLL IAT to ntdll.dll of function *NtQuerySystemInformation is hooked to 0x00007ff9e132d690&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  +-- 81 hooked functions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checking ntdll.dll at KERNELBASE.dll IAT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryInformationFile is hooked to 0x00007ff9e132d1f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQuerySecurityObject is hooked to 0x00007ff9e132fb40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenFile is hooked to 0x00007ff9e132d630&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryWnfStateData is hooked to 0x00007ff9e132fc40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetInformationFile is hooked to 0x00007ff9e132d4b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtFsControlFile is hooked to 0x00007ff9e132d6f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryVolumeInformationFile is hooked to 0x00007ff9e132d8f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateFile is hooked to 0x00007ff9e132da70&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtWaitForSingleObject is hooked to 0x00007ff9e132d050&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtNotifyChangeDirectoryFileEx is hooked to 0x00007ff9e132f2e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCopyFileChunk is hooked to 0x00007ff9e132e420&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtQuerySystemInformation is hooked to 0x00007ff9e132d690&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenKey is hooked to 0x00007ff9e132d210&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryEaFile is hooked to 0x00007ff9e132f880&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtFlushBuffersFile is hooked to 0x00007ff9e132d930&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateEvent is hooked to 0x00007ff9e132d8d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryValueKey is hooked to 0x00007ff9e132d2b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenMutant is hooked to 0x00007ff9e132f460&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtReleaseMutant is hooked to 0x00007ff9e132d3d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateKeyTransacted is hooked to 0x00007ff9e132e5c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateKey is hooked to 0x00007ff9e132d370&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetValueKey is hooked to 0x00007ff9e132dbc0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryDirectoryFile is hooked to 0x00007ff9e132d670&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtTerminateProcess is hooked to 0x00007ff9e132d550&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetDefaultLocale is hooked to 0x00007ff9e13301c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtDeleteValueKey is hooked to 0x00007ff9e132eaa0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtEnumerateValueKey is hooked to 0x00007ff9e132d230&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryInstallUILanguage is hooked to 0x00007ff9e132f9e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtEnumerateKey is hooked to 0x00007ff9e132d610&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtGetNlsSectionPtr is hooked to 0x00007ff9e132ef00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtDeleteKey is hooked to 0x00007ff9e132ea40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateSection is hooked to 0x00007ff9e132d910&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtMapViewOfSection is hooked to 0x00007ff9e132d4d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryDefaultLocale is hooked to 0x00007ff9e132d270&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtNotifyChangeKey is hooked to 0x00007ff9e132f300&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryInformationToken is hooked to 0x00007ff9e132d3f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryLicenseValue is hooked to 0x00007ff9e132fa40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenSymbolicLinkObject is hooked to 0x00007ff9e132f580&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQuerySymbolicLinkObject is hooked to 0x00007ff9e132fba0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryMultipleValueKey is hooked to 0x00007ff9e132fa60&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenPrivateNamespace is hooked to 0x00007ff9e132f4c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtDeletePrivateNamespace is hooked to 0x00007ff9e132ea80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreatePrivateNamespace is hooked to 0x00007ff9e132e6e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtClose is hooked to 0x00007ff9e132d1b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryInformationProcess is hooked to 0x00007ff9e132d2f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtDuplicateObject is hooked to 0x00007ff9e132d750&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtResetEvent is hooked to 0x00007ff9e132ff00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryEvent is hooked to 0x00007ff9e132da90&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtSetInformationProcess is hooked to 0x00007ff9e132d350&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryKey is hooked to 0x00007ff9e132d290&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtLoadKeyEx is hooked to 0x00007ff9e132f100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryVirtualMemory is hooked to 0x00007ff9e132d430&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenProcessTokenEx is hooked to 0x00007ff9e132d5d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateWnfStateName is hooked to 0x00007ff9e132e940&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtDeleteWnfStateName is hooked to 0x00007ff9e132eae0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetSecurityObject is hooked to 0x00007ff9e13304e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtUnmapViewOfSection is hooked to 0x00007ff9e132d510&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQuerySecurityAttributesToken is hooked to 0x00007ff9e132fb20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtGetCachedSigningLevel is hooked to 0x00007ff9e132ede0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtDeviceIoControlFile is hooked to 0x00007ff9e132d0b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtReadFile is hooked to 0x00007ff9e132d090&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtWaitForMultipleObjects is hooked to 0x00007ff9e132db20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetSystemInformation is hooked to 0x00007ff9e1330540&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtYieldExecution is hooked to 0x00007ff9e132d890&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtDuplicateToken is hooked to 0x00007ff9e132d810&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAllocateLocallyUniqueId is hooked to 0x00007ff9e132dde0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAccessCheck is hooked to 0x00007ff9e132cfd0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAccessCheckByType is hooked to 0x00007ff9e132dc20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAccessCheckByTypeResultList is hooked to 0x00007ff9e132dc40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenProcessToken is hooked to 0x00007ff9e132f4e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenThreadToken is hooked to 0x00007ff9e132d450&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetInformationToken is hooked to 0x00007ff9e1330360&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAdjustPrivilegesToken is hooked to 0x00007ff9e132d7f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAdjustGroupsToken is hooked to 0x00007ff9e132dd40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtPrivilegeCheck is hooked to 0x00007ff9e132f6c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAccessCheckAndAuditAlarm is hooked to 0x00007ff9e132d4f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAccessCheckByTypeAndAuditAlarm is hooked to 0x00007ff9e132daf0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAccessCheckByTypeResultListAndAuditAlarm is hooked to 0x00007ff9e132dc60&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAccessCheckByTypeResultListAndAuditAlarmByHandle is hooked to 0x00007ff9e132dc80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenObjectAuditAlarm is hooked to 0x00007ff9e132f480&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtPrivilegeObjectAuditAlarm is hooked to 0x00007ff9e132f6e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCloseObjectAuditAlarm is hooked to 0x00007ff9e132d730&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtDeleteObjectAuditAlarm is hooked to 0x00007ff9e132ea60&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtPrivilegedServiceAuditAlarm is hooked to 0x00007ff9e132f700&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtSetInformationThread is hooked to 0x00007ff9e132d170&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtImpersonateAnonymousToken is hooked to 0x00007ff9e132ef60&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtFilterToken is hooked to 0x00007ff9e132ec60&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetCachedSigningLevel is hooked to 0x00007ff9e1330120&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtLockVirtualMemory is hooked to 0x00007ff9e132f180&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtUnlockVirtualMemory is hooked to 0x00007ff9e1330960&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtReadVirtualMemory is hooked to 0x00007ff9e132d7b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtProtectVirtualMemory is hooked to 0x00007ff9e132d9d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtWriteVirtualMemory is hooked to 0x00007ff9e132d710&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAllocateVirtualMemory is hooked to 0x00007ff9e132d2d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAllocateVirtualMemoryEx is hooked to 0x00007ff9e132de80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtFreeVirtualMemory is hooked to 0x00007ff9e132d390&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenEvent is hooked to 0x00007ff9e132d7d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtGetWriteWatch is hooked to 0x00007ff9e132ef40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtResetWriteWatch is hooked to 0x00007ff9e132ff20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetInformationVirtualMemory is hooked to 0x00007ff9e13303c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtAllocateUserPhysicalPages is hooked to 0x00007ff9e132de20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtFreeUserPhysicalPages is hooked to 0x00007ff9e132ed80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtMapUserPhysicalPages is hooked to 0x00007ff9e132f240&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenDirectoryObject is hooked to 0x00007ff9e132dad0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryObject is hooked to 0x00007ff9e132d1d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateSymbolicLinkObject is hooked to 0x00007ff9e132e7e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateDirectoryObjectEx is hooked to 0x00007ff9e132e4c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtLoadEnclaveData is hooked to 0x00007ff9e132f0a0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtTerminateEnclave is hooked to 0x00007ff9e13307c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateNamedPipeFile is hooked to 0x00007ff9e132e660&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtWriteFile is hooked to 0x00007ff9e132d0d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtLockFile is hooked to 0x00007ff9e132f120&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtUnlockFile is hooked to 0x00007ff9e1330940&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCancelIoFile is hooked to 0x00007ff9e132db60&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCancelIoFileEx is hooked to 0x00007ff9e132e200&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCancelSynchronousIoFile is hooked to 0x00007ff9e132e220&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtReadFileScatter is hooked to 0x00007ff9e132d590&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtWriteFileGather is hooked to 0x00007ff9e132d330&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetEvent is hooked to 0x00007ff9e132d190&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtClearEvent is hooked to 0x00007ff9e132d790&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtPulseEvent is hooked to 0x00007ff9e132f780&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateSemaphore is hooked to 0x00007ff9e132e7c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenSemaphore is hooked to 0x00007ff9e132f540&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtReleaseSemaphore is hooked to 0x00007ff9e132d110&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateMutant is hooked to 0x00007ff9e132e640&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateTimer2 is hooked to 0x00007ff9e132e840&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCreateTimer is hooked to 0x00007ff9e132e820&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenTimer is hooked to 0x00007ff9e132f5c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetTimerEx is hooked to 0x00007ff9e13305e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCancelTimer is hooked to 0x00007ff9e132dbe0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSignalAndWaitForSingleObject is hooked to 0x00007ff9e13306c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtDelayExecution is hooked to 0x00007ff9e132d650&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtOpenProcess is hooked to 0x00007ff9e132d490&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtCompareObjects is hooked to 0x00007ff9e132e320&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetInformationObject is hooked to 0x00007ff9e132db40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSetSystemTime is hooked to 0x00007ff9e1330580&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryAuxiliaryCounterFrequency is hooked to 0x00007ff9e132f7a0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtConvertBetweenAuxiliaryCounterAndPerformanceCounter is hooked to 0x00007ff9e132e400&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtCreateThreadEx is hooked to 0x00007ff9e132e800&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtResumeThread is hooked to 0x00007ff9e132da10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtTerminateThread is hooked to 0x00007ff9e132da30&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtOpenThread is hooked to 0x00007ff9e132f5a0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtQueryInformationThread is hooked to 0x00007ff9e132d470&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtSuspendThread is hooked to 0x00007ff9e1330780&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function NtGetContextThread is hooked to 0x00007ff9e132ee20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtSetContextThread is hooked to 0x00007ff9e1330160&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- KERNELBASE.dll IAT to ntdll.dll of function *NtQueueApcThreadEx2 is hooked to 0x00007ff9e132fca0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  +-- 147 hooked functions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checking ntdll.dll at InProcessClient64.dll IAT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function NtOpenSection is hooked to 0x00007ff9e132d6b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function *NtQueueApcThread is hooked to 0x00007ff9e132d870&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function NtQueryVirtualMemory is hooked to 0x00007ff9e132d430&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function NtQueryObject is hooked to 0x00007ff9e132d1d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function NtQuerySection is hooked to 0x00007ff9e132d9f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function *NtSetInformationThread is hooked to 0x00007ff9e132d170&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function NtQueryKey is hooked to 0x00007ff9e132d290&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function NtCreateFile is hooked to 0x00007ff9e132da70&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function NtQueryInformationProcess is hooked to 0x00007ff9e132d2f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function NtQueryInformationThread is hooked to 0x00007ff9e132d470&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function NtCallbackReturn is hooked to 0x00007ff9e132d070&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- InProcessClient64.dll IAT to ntdll.dll of function NtGetNextThread is hooked to 0x00007ff9e132eee0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  +-- 12 hooked functions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checking ntdll.dll at ADVAPI32.dll IAT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQueryValueKey is hooked to 0x00007ff9e132d2b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtClose is hooked to 0x00007ff9e132d1b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtOpenThreadToken is hooked to 0x00007ff9e132d450&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtOpenProcessToken is hooked to 0x00007ff9e132f4e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtSetInformationToken is hooked to 0x00007ff9e1330360&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtDuplicateToken is hooked to 0x00007ff9e132d810&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtCompareTokens is hooked to 0x00007ff9e132e360&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtOpenFile is hooked to 0x00007ff9e132d630&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQueryInformationProcess is hooked to 0x00007ff9e132d2f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQueryKey is hooked to 0x00007ff9e132d290&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtDeviceIoControlFile is hooked to 0x00007ff9e132d0b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function *NtQuerySystemInformation is hooked to 0x00007ff9e132d690&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtCreateKey is hooked to 0x00007ff9e132d370&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtSetValueKey is hooked to 0x00007ff9e132dbc0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtDeleteKey is hooked to 0x00007ff9e132ea40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtEnumerateKey is hooked to 0x00007ff9e132d610&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQueryVolumeInformationFile is hooked to 0x00007ff9e132d8f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtOpenSymbolicLinkObject is hooked to 0x00007ff9e132f580&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQuerySymbolicLinkObject is hooked to 0x00007ff9e132fba0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQueryInformationFile is hooked to 0x00007ff9e132d1f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtTraceControl is hooked to 0x00007ff9e1330860&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtRenameKey is hooked to 0x00007ff9e132fe40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function *NtSetInformationThread is hooked to 0x00007ff9e132d170&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtOpenKey is hooked to 0x00007ff9e132d210&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function *NtQuerySystemTime is hooked to 0x00007ff9e132db10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtWaitForSingleObject is hooked to 0x00007ff9e132d050&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQueryInformationThread is hooked to 0x00007ff9e132d470&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQuerySecurityObject is hooked to 0x00007ff9e132fb40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQueryPerformanceCounter is hooked to 0x00007ff9e132d5f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtCreateMutant is hooked to 0x00007ff9e132e640&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtOpenPrivateNamespace is hooked to 0x00007ff9e132f4c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtCreatePrivateNamespace is hooked to 0x00007ff9e132e6e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtWaitForMultipleObjects is hooked to 0x00007ff9e132db20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtCreateFile is hooked to 0x00007ff9e132da70&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtWriteFile is hooked to 0x00007ff9e132d0d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtReadFile is hooked to 0x00007ff9e132d090&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtAlpcQueryInformation is hooked to 0x00007ff9e132e0e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQueryObject is hooked to 0x00007ff9e132d1d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQueryMutant is hooked to 0x00007ff9e132fa80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtReplaceKey is hooked to 0x00007ff9e132fe80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtSaveKey is hooked to 0x00007ff9e1330040&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtSaveMergedKeys is hooked to 0x00007ff9e1330080&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtQueryInformationToken is hooked to 0x00007ff9e132d3f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtSetSystemInformation is hooked to 0x00007ff9e1330540&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtOpenKeyEx is hooked to 0x00007ff9e132f3e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- ADVAPI32.dll IAT to ntdll.dll of function NtSetInformationKey is hooked to 0x00007ff9e1330300&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  +-- 46 hooked functions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checking ntdll.dll at msvcrt.dll IAT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  +-- 0 hooked functions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checking ntdll.dll at sechost.dll IAT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtOpenProcessTokenEx is hooked to 0x00007ff9e132d5d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtOpenKey is hooked to 0x00007ff9e132d210&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtQueryValueKey is hooked to 0x00007ff9e132d2b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function *NtSetInformationThread is hooked to 0x00007ff9e132d170&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtQueryInformationThread is hooked to 0x00007ff9e132d470&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function *NtQueueApcThread is hooked to 0x00007ff9e132d870&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtQueryInformationFile is hooked to 0x00007ff9e132d1f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtCancelIoFile is hooked to 0x00007ff9e132db60&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtTraceControl is hooked to 0x00007ff9e1330860&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtSetSystemInformation is hooked to 0x00007ff9e1330540&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtSetIntervalProfile is hooked to 0x00007ff9e1330400&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function *NtQuerySystemInformation is hooked to 0x00007ff9e132d690&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtQueryIntervalProfile is hooked to 0x00007ff9e132fa00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtWaitForMultipleObjects is hooked to 0x00007ff9e132db20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtQueryPerformanceCounter is hooked to 0x00007ff9e132d5f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtSetEvent is hooked to 0x00007ff9e132d190&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function *NtTerminateProcess is hooked to 0x00007ff9e132d550&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtOpenThreadToken is hooked to 0x00007ff9e132d450&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtClose is hooked to 0x00007ff9e132d1b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtQueryInformationToken is hooked to 0x00007ff9e132d3f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- sechost.dll IAT to ntdll.dll of function NtOpenProcessToken is hooked to 0x00007ff9e132f4e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  +-- 21 hooked functions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checking ntdll.dll at RPCRT4.dll IAT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtQueryValueKey is hooked to 0x00007ff9e132d2b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtOpenKey is hooked to 0x00007ff9e132d210&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtWaitForAlertByThreadId is hooked to 0x00007ff9e1330a00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlertThreadByThreadId is hooked to 0x00007ff9e132ddc0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAllocateUuids is hooked to 0x00007ff9e132de60&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAdjustPrivilegesToken is hooked to 0x00007ff9e132d7f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function *NtQuerySystemTime is hooked to 0x00007ff9e132db10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtPrivilegeCheck is hooked to 0x00007ff9e132f6c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcCreateResourceReserve is hooked to 0x00007ff9e132df60&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcCancelMessage is hooked to 0x00007ff9e132dec0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcDeleteSecurityContext is hooked to 0x00007ff9e132e020&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcCreateSecurityContext is hooked to 0x00007ff9e132dfa0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcConnectPortEx is hooked to 0x00007ff9e132df00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcConnectPort is hooked to 0x00007ff9e132dee0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtCreateSection is hooked to 0x00007ff9e132d910&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtDuplicateToken is hooked to 0x00007ff9e132d810&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtImpersonateAnonymousToken is hooked to 0x00007ff9e132ef60&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcCreateSectionView is hooked to 0x00007ff9e132df80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcCreatePortSection is hooked to 0x00007ff9e132df40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAllocateReserveObject is hooked to 0x00007ff9e132de00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtSetIoCompletionEx is hooked to 0x00007ff9e1330440&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function *NtQueueApcThreadEx is hooked to 0x00007ff9e132fc80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtOpenThreadToken is hooked to 0x00007ff9e132d450&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtDeleteWnfStateName is hooked to 0x00007ff9e132eae0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtCreateWnfStateName is hooked to 0x00007ff9e132e940&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtQuerySecurityObject is hooked to 0x00007ff9e132fb40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtOpenDirectoryObject is hooked to 0x00007ff9e132dad0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtDelayExecution is hooked to 0x00007ff9e132d650&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtWaitForSingleObject is hooked to 0x00007ff9e132d050&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtFsControlFile is hooked to 0x00007ff9e132d6f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtCreateEvent is hooked to 0x00007ff9e132d8d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtQueryVolumeInformationFile is hooked to 0x00007ff9e132d8f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcCreatePort is hooked to 0x00007ff9e132df20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcQueryInformation is hooked to 0x00007ff9e132e0e0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcSendWaitReceivePort is hooked to 0x00007ff9e132e140&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcAcceptConnectPort is hooked to 0x00007ff9e132dea0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcDeletePortSection is hooked to 0x00007ff9e132dfc0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcDeleteSectionView is hooked to 0x00007ff9e132e000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcDisconnectPort is hooked to 0x00007ff9e132e040&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcQueryInformationMessage is hooked to 0x00007ff9e132e100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtClose is hooked to 0x00007ff9e132d1b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtCreateFile is hooked to 0x00007ff9e132da70&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtCreateNamedPipeFile is hooked to 0x00007ff9e132e660&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtWriteFile is hooked to 0x00007ff9e132d0d0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcSetInformation is hooked to 0x00007ff9e132e160&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtReadFile is hooked to 0x00007ff9e132d090&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function *NtQuerySystemInformation is hooked to 0x00007ff9e132d690&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtSetInformationFile is hooked to 0x00007ff9e132d4b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function *NtSetInformationThread is hooked to 0x00007ff9e132d170&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcOpenSenderThread is hooked to 0x00007ff9e132e0c0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcOpenSenderProcess is hooked to 0x00007ff9e132e0a0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcImpersonateClientContainerOfPort is hooked to 0x00007ff9e132e060&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- RPCRT4.dll IAT to ntdll.dll of function NtAlpcImpersonateClientOfPort is hooked to 0x00007ff9e132e080&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  +-- 53 hooked functions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checking ntdll.dll at bcrypt.dll IAT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- bcrypt.dll IAT to ntdll.dll of function NtOpenKey is hooked to 0x00007ff9e132d210&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- bcrypt.dll IAT to ntdll.dll of function NtQueryValueKey is hooked to 0x00007ff9e132d2b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- bcrypt.dll IAT to ntdll.dll of function NtQueryInformationProcess is hooked to 0x00007ff9e132d2f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- bcrypt.dll IAT to ntdll.dll of function NtClose is hooked to 0x00007ff9e132d1b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- bcrypt.dll IAT to ntdll.dll of function NtDeviceIoControlFile is hooked to 0x00007ff9e132d0b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- bcrypt.dll IAT to ntdll.dll of function NtOpenFile is hooked to 0x00007ff9e132d630&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- bcrypt.dll IAT to ntdll.dll of function *NtTerminateProcess is hooked to 0x00007ff9e132d550&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  +-- 7 hooked functions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checking ntdll.dll at FLTLIB.DLL IAT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- FLTLIB.DLL IAT to ntdll.dll of function NtCreateFile is hooked to 0x00007ff9e132da70&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- FLTLIB.DLL IAT to ntdll.dll of function NtDeviceIoControlFile is hooked to 0x00007ff9e132d0b0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- FLTLIB.DLL IAT to ntdll.dll of function NtWaitForSingleObject is hooked to 0x00007ff9e132d050&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  |-- FLTLIB.DLL IAT to ntdll.dll of function NtFsControlFile is hooked to 0x00007ff9e132d6f0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  +-- 4 hooked functions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Completed&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;35-结果&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;3.5 结果&lt;/span&gt;&#xA;  &lt;a href=&#34;#35-%e7%bb%93%e6%9e%9c&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;下表展示了 2024 年 3 月 1 日至 3 月 22 日期间进行的枚举结果&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/2025-6-hookchain/image-5.png&#39; alt=&#34;alt text&#34; height=&#34;729&#34; width=&#34;718&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;结论：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;94%的被分析EDR解决方案（16个中有15个）在Ntdll.dll之上的子系统层未显示钩子。这意味着，在对应用程序中加载的所有引用Ntdll的DLL进行验证时，仅有一个EDR解决方案在导入地址表（IAT）中显示存在钩子。&lt;/li&gt;&#xA;&lt;li&gt;50%的被分析EDR解决方案（16个中有8个）在用户模式下未显示存在钩子。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;4hookchain&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.HookChain&lt;/span&gt;&#xA;  &lt;a href=&#34;#4hookchain&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;在本次讨论中，我们首先概述并简化介绍本文重点关注的技术——HookChain。随后，我们将从技术层面详细解析HookChain：在4.2节中介绍所使用的数据结构和表格，接着在4.3节阐述填充这些表格的方法。之后，我们会在4.4节详细说明导入地址表（IAT）的挂钩过程，最后在4.5节展示功能测试以及HookChain植入在调用栈中的隐蔽性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;41-overview&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.1. Overview&lt;/span&gt;&#xA;  &lt;a href=&#34;#41-overview&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;一般来说，HookChain技术基于以下流程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用前文提到的系统调用号（SSN）动态映射技术之一，例如Halo’s gate。&lt;/li&gt;&#xA;&lt;li&gt;映射某些基础函数以便在后续步骤中使用，例如：&lt;br&gt;&#xA;a. NtAllocateReserveObject&lt;br&gt;&#xA;b. NtAllocateVirtualMemory&lt;br&gt;&#xA;c. NtQueryInformationProcess&lt;br&gt;&#xA;d. NtProtectVirtualMemory&lt;br&gt;&#xA;e. NtReadVirtualMemory&lt;br&gt;&#xA;f. NtWriteVirtualMemory&lt;/li&gt;&#xA;&lt;li&gt;创建并填充一个数组，每个数组项包含以下内容：&lt;br&gt;&#xA;a. 系统调用号（SSN）&lt;br&gt;&#xA;b. Ntdll.dll中的函数地址&lt;br&gt;&#xA;c. 该函数在Ntdll.dll中最近的SYSCALL指令的内存地址&lt;/li&gt;&#xA;&lt;li&gt;预加载其他DLL（如果已知正在运行的应用程序将动态加载并使用当前进程中尚未加载的其他DLL），并验证待加载的DLL是否会调用Ntdll.dll的函数。&lt;/li&gt;&#xA;&lt;li&gt;使用间接系统调用（Indirect Syscall）结合步骤2中映射的函数，对所有已加载DLL的导出表和导入表结构进行读取、枚举和处理。&lt;/li&gt;&#xA;&lt;li&gt;修改关键DLL的导入地址表（IAT），这些DLL包括kernel32、kernelbase、bcrypt、bcryptPrimitives、gdi32、mswsock、netutils和urlmon等调用Ntdll.dll的组件。此操作旨在将IAT中原生Nt/Zw调用的目标地址修改为应用程序的内部函数。这样一来，当诸如kernel32之类的子系统DLL调用Ntdll.dll中的函数时，实际执行的将是HookChain植入的代码，从而实现本文2.3.2节所述的IAT挂钩。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在采取这些操作之后，API 和子系统将以常规方式继续使用，因为流量转移和规避层已经实施，无需进一步操作。因此，对 Ntdll.dll 的调用将通过我们应用程序的内部函数执行，但对于正在执行的 PE（可移植可执行文件）来说是透明的，因为它将继续使用子系统 API，如图 14 所示。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/2025-6-hookchain/image-6.png&#39; alt=&#34;alt text&#34; height=&#34;690&#34; width=&#34;1158&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这种方法能够绕过所有在 Ntdll.dll 上执行的用户模式挂钩，因为所有执行控制都在应用程序自身内部。与这里介绍的其他技术相比，具有以下优点：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对于遥测技术的规则，被事件数据记录器识别的概率降低，比如：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;流程执行的总时间&lt;/li&gt;&#xA;&lt;li&gt;执行链&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;便携性&#xA;&lt;ol&gt;&#xA;&lt;li&gt;无需对现有代码/应用程序的执行进行任何工作和/或修改，因为拦截过程对正在运行的应用程序具有广泛的透明性。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;42-数据结构和表&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.2 数据结构和表&lt;/span&gt;&#xA;  &lt;a href=&#34;#42-%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e5%92%8c%e8%a1%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;h3 id=&#34;421-syscall_info&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.2.1 SYSCALL_INFO&lt;/span&gt;&#xA;  &lt;a href=&#34;#421-syscall_info&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;如4.1中说的，需要创建填充一个数组,其中记录了执行过程中将会用到的各种信息：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_SYSCALL_INFO&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;DWORD64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dwSsn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 系统调用号&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;PVOID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//用于存储Ntdll内函数的VA&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;PVOID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pSyscallRet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//用于存储NTdll内syscall执行的VA地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;PVOID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pStubFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//HookChain 拦截（植入）函数的地址存储字段，该地址是所有对相关函数的调用都将指向的目标。换句话说，这是将在导入地址表（IAT）中分配的地址，用于替换 Ntdll 函数的虚拟地址。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;DWORD64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dwHash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 函数的hash值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SYSCALL_INFO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PSYSCALL_INFO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;422-syscall_list&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.2.2 SYSCALL_LIST&lt;/span&gt;&#xA;  &lt;a href=&#34;#422-syscall_list&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define MAX_ENTRIES 512&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_SYSCALL_LIST&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;DWORD64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 表中当前的数量&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;SYSCALL_INFO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_ENTRIES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SYSCALL_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PSYSCALL_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;422-引用和索引&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.2.2 引用和索引&lt;/span&gt;&#xA;  &lt;a href=&#34;#422-%e5%bc%95%e7%94%a8%e5%92%8c%e7%b4%a2%e5%bc%95&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;下一个数据结构实际上是一个指向我们应用程序 &lt;code&gt;.data&lt;/code&gt; 段的指针，在汇编中定义如下：&lt;/p&gt;&#xA;&lt;p&gt;qIdx0 - qIdx5：变量，用于存储初始进程和操作所需的原生函数信息在数组中的位置。这些变量的名称以 0 到 5 的值结尾，存储以下函数的索引：0 - ZwOpenProcess，1 - ZwProtectVirtualMemory，2 - ZwReadVirtualMemory，3 - ZwWriteVirtualMemory，4 - ZwAllocateVirtualMemory，5 - ZwDelayExecution。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;.data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;qTableAddr&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;QWORD&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;# 存储 SYSCALL_LIST 表&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;qListEntrySize&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;QWORD&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# 该变量包含 SYSCALL_LIST-&amp;gt;Entries 中每个条目的大小（以字节为单位）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;qStubEntrySize&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;QWORD&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# 包含 HookChain 使用的每个拦截函数大小（以字节为单位）的变量。本文后面将提供有关这些函数及其使用方法的更多详细信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;qIdx0&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;QWORD&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;qIdx1&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;QWORD&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;qIdx2&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;QWORD&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;qIdx3&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;QWORD&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;qIdx4&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;QWORD&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;qIdx5&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;QWORD&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;43-填充表&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.3 填充表&lt;/span&gt;&#xA;  &lt;a href=&#34;#43-%e5%a1%ab%e5%85%85%e8%a1%a8&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SYSCALL_LIST&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SyscallList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用TEB和PEB定位Ntdll的地址&lt;/li&gt;&#xA;&lt;li&gt;枚举所有名称以 “Zw” 或 “Nt” 开头的函数&lt;/li&gt;&#xA;&lt;li&gt;检查所讨论的函数是否为将通过间接系统调用无条件使用的函数之一。如果是，则在数组 SyscallList.Entries 中添加一个新条目，并在变量 qIdx0 - qIdx5 中保存该函数在数组中的位置。以下是函数列表：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;NtAllocateReserveObject&lt;/li&gt;&#xA;&lt;li&gt;NtAllocateVirtualMemory&lt;/li&gt;&#xA;&lt;li&gt;NtQueryInformationProcess&lt;/li&gt;&#xA;&lt;li&gt;NtProtectVirtualMemory&lt;/li&gt;&#xA;&lt;li&gt;NtReadVirtualMemory&lt;/li&gt;&#xA;&lt;li&gt;NtWriteVirtualMemory&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;检查所讨论的函数代码中是否存在 JMP 指令，该指令表明存在 EDR 应用的钩子。如果存在，则在数组 SyscallList.Entries 中添加一个新条目。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在这个过程结束时，数组将填充所有具有 EDR 挂钩的 Nt/Zw 函数， 以及qIdx0-qIdx5这几个未来会用的函数&lt;/p&gt;&#xA;&lt;p&gt;在步骤3和4中，通过 “光环之门” 技术中使用的校验算法获取 SSN。&lt;/p&gt;&#xA;&lt;p&gt;对应代码中的：&lt;code&gt;GetSSN&lt;/code&gt; 和&lt;code&gt;GetNextSyscallInstruction&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;44-iat&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.4 IAT&lt;/span&gt;&#xA;  &lt;a href=&#34;#44-iat&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;接下来修改一家在DLL的IAT。&lt;/p&gt;&#xA;&lt;p&gt;然而，如果我们此时执行该过程，随后加载另一个动态库且该新库的导入地址表（IAT）中包含对Ntdll的引用，我们将不得不再次执行操作该DLL的IAT的过程。为避免这种重复处理，建议在执行IAT挂钩之前加载必要的库。&lt;/p&gt;&#xA;&lt;h3 id=&#34;441-预加载-dlls&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.4.1 预加载 DLLs&lt;/span&gt;&#xA;  &lt;a href=&#34;#441-%e9%a2%84%e5%8a%a0%e8%bd%bd-dlls&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;嘶，，这块没咋看懂？&lt;/p&gt;&#xA;&lt;h3 id=&#34;442-iat-hook&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.4.2 IAT HOOK&lt;/span&gt;&#xA;  &lt;a href=&#34;#442-iat-hook&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;h3 id=&#34;443-执行流&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.4.3 执行流&lt;/span&gt;&#xA;  &lt;a href=&#34;#443-%e6%89%a7%e8%a1%8c%e6%b5%81&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;完成上述步骤后，HookChain 植入所需的所有程序即已确定，从这一刻起，对 Windows 子系统的所有调用将不会在 Ntdll.dll 层面受到 EDR 的拦截和监控。&#xA;通过这种方式，让我们更深入地了解 HookChain 植入完成后应用程序的执行流程。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/2025-6-hookchain/image-7.png&#39; alt=&#34;alt text&#34; height=&#34;804&#34; width=&#34;1435&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;图16详细展示了HookChain植入后函数调用的执行流程，具体说明如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;以应用程序通过Kernel32.dll API/子系统中的CreateProcessW函数创建新进程为例。&lt;/li&gt;&#xA;&lt;li&gt;由于该特定函数实现在Kernelbase.dll中，kernel32.dll仅将执行流程重定向至kernelbase。&lt;/li&gt;&#xA;&lt;li&gt;在kernelbase DLL的CreateProcessW代码中，经过一些参数检查后，代码将执行属于Ntdll.dll的ZwCreateUserProcess函数。&lt;/li&gt;&#xA;&lt;li&gt;因此，CreateProcessW代码会在内核基（kernelbase）的导入地址表（IAT）中查找地址——该位置原本存储Ntdll.dll中ZwCreateUserProcess函数的地址，但在HookChain植入后，IAT中的此位置将替换为HookChain植入函数的地址。&lt;/li&gt;&#xA;&lt;li&gt;在获取已部署函数的地址后，CreateProcessW代码将调用（CALL）该地址，而非Ntdll.dll中ZwCreateUserProcess函数的地址，从而转向HookChain部署的函数。&lt;/li&gt;&#xA;&lt;li&gt;每个HookChain拦截函数均使用特定名称/索引创建，在我们的示例场景中函数名为Fnc0002，因此SyscallList.Entries数组中的对应索引为0x0002。通过这种方式，HookChain代码将在表（数组SyscallList.Entries[0x0002]）中查找先前存储的信息，如系统调用号（SSN）和Ntdll中系统调用指令的地址。&lt;/li&gt;&#xA;&lt;li&gt;掌握所有必要信息后，HookChain代码会重现Ntdll中函数的执行逻辑（mov r10, rcx; mov eax, SSN），并随后将执行流程转发至包含系统调用指令的Ntdll地址。&lt;/li&gt;&#xA;&lt;li&gt;在当前流程的栈顶位置，将包含返回地址——该地址为kernelbase的CreateProcessW执行CALL操作时插入栈中的下一条指令的地址。随后，Ntdll执行系统调用指令。当内核返回时，流程将导向CreateProcessW函数内的相应返回地址。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;注意：HookChain 的运行并不需要使用 CreateProcessW 函数或任何类似的分支机制。所提供的图表仅展示了 HookChain 植入后的函数调用过程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;45-调用栈遥测&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;4.5 调用栈遥测&lt;/span&gt;&#xA;  &lt;a href=&#34;#45-%e8%b0%83%e7%94%a8%e6%a0%88%e9%81%a5%e6%b5%8b&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;使用 HookChain 的优点之一是，即使这并非其主要目的，它也不会改变调用的调用栈（从 EDR 的角度来看）。通过这种方式，本测试旨在可视化并理解 HookChain 植入前后函数的调用栈。因此，测试代码执行 3 个操作：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用 CreateProcessW API 启动 Notepad.exe 进程。此过程在 HookChain 植入之前执行。&lt;/li&gt;&#xA;&lt;li&gt;所有HookChain植入操作均已执行。&lt;/li&gt;&#xA;&lt;li&gt;使用 CreateProcessW API 启动一个新的 Notepad.exe 进程。由于此时 HookChain 已经完成了所有的植入和绕过操作，Ntdll.dll 中的原始 ZwCreateUserProcess 函数将不会被执行。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;这里有好多图，我就不加了，后面再加&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;结果：调用栈跟踪遥测未发生变化，以至于 HOOK 可能不会被内核层的EDR检查发现。&lt;/p&gt;&#xA;&lt;h2 id=&#34;5-hookchain--testes&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;5. HOOKCHAIN – TESTES&lt;/span&gt;&#xA;  &lt;a href=&#34;#5-hookchain--testes&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;在这些测试中，选取了 14 款终端检测与响应（EDR）产品，截至 2023 年 12 月 31 日，其中 9 款产品被纳入 Gartner&amp;rsquo;s Magic Quadrant [15]。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/2025-6-hookchain/image-8.png&#39; alt=&#34;alt text&#34; height=&#34;951&#34; width=&#34;1391&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在上述图片中，Gartner&amp;rsquo;s Magic Quadrant中的被测产品以绿色高亮显示，而灰色标记的产品无法进行测试。&lt;br&gt;&#xA;此外，还测试了4款未列入Gartner象限的产品，分别是：Acronis、Cylance、Elastic和MalwareBytes。&lt;br&gt;&#xA;针对这些测试，按如下描述准备了两个版本的HookChain：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#39;https://nesl42.github.io/posts/2025-6-hookchain/image-9.png&#39; alt=&#34;alt text&#34; height=&#34;732&#34; width=&#34;1168&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;绿色表示无警报和拦截&#xA;黄色表示部分执行(未成功)且无报警，或者执行(成功)但有报警&#xA;红色表示执行因受阻和警报而失败（大概率是因为R0的作用）&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>VMware的配置</title>
      <link>https://nesl42.github.io/posts/2025-6-vm/</link>
      <pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate>
      <guid>https://nesl42.github.io/posts/2025-6-vm/</guid>
      <category domain="https://nesl42.github.io/categories/technology/">Technology</category>
      <description>&lt;h2 id=&#34;将vmware-中的虚拟机设定为一个固定值&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;将VMware 中的虚拟机设定为一个固定值&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e5%b0%86vmware-%e4%b8%ad%e7%9a%84%e8%99%9a%e6%8b%9f%e6%9c%ba%e8%ae%be%e5%ae%9a%e4%b8%ba%e4%b8%80%e4%b8%aa%e5%9b%ba%e5%ae%9a%e5%80%bc&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;打开虚拟机的 &lt;code&gt;.vmx&lt;/code&gt; 文件，添加&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;tools.syncTime = &amp;#34;FALSE&amp;#34; &#xD;&#xA;time.synchronize.continue = &amp;#34;FALSE&amp;#34; &#xD;&#xA;time.synchronize.restore = &amp;#34;FALSE&amp;#34; &#xD;&#xA;time.synchronize.resume.disk = &amp;#34;FALSE&amp;#34; &#xD;&#xA;time.synchronize.shrink = &amp;#34;FALSE&amp;#34; &#xD;&#xA;time.synchronize.tools.startup = &amp;#34;FALSE&amp;#34; &#xD;&#xA;rtc.startTime = 1325376000&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;rtc.startTime&lt;/code&gt; 是从1970年1月1日0时0分0秒到系统启动时间间隔的时间，单位是秒。可以到网站 &lt;a href=&#34;http://www.onlineconversion.com/unix_time.htm&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;http://www.onlineconversion.com/unix_time.htm&lt;/a&gt; 上换算得到希望虚拟机的启动时间&lt;/p&gt;&#xA;&lt;h2 id=&#34;设置延长启动画面的时间&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;设置延长启动画面的时间&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e8%ae%be%e7%bd%ae%e5%bb%b6%e9%95%bf%e5%90%af%e5%8a%a8%e7%94%bb%e9%9d%a2%e7%9a%84%e6%97%b6%e9%97%b4&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;打开虚拟机的 &lt;code&gt;.vmx&lt;/code&gt; 文件，添加&lt;/p&gt;&#xA;&lt;p&gt;在末尾加上 &lt;code&gt;bios.bootDelay = &amp;quot;5000&amp;quot;&lt;/code&gt;（这个5000，表示5秒的意思）&lt;/p&gt;&#xA;&lt;p&gt;或者：&lt;/p&gt;&#xA;&lt;p&gt;在末尾添加 &lt;code&gt;bios.forceSetupOnce = &amp;quot;TRUE&amp;quot;&lt;/code&gt;，就会自动进入bios设置界面了&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这个方法是只会实现一次的，即下次启动时，也是正常启动而不是进入bios设置界面。如果再想用这个方法进入bios界面，需要重新在.vmx配置文件中添加才行。&lt;/p&gt;&lt;/blockquote&gt;&#xA;</description>
    </item>
  </channel>
</rss>
